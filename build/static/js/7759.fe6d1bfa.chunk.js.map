{"version":3,"file":"static/js/7759.fe6d1bfa.chunk.js","mappings":"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","sources":["actions/ForgotPasswordAction.js","webpack://connect2mydoctor/./src/components/Layout/SignupLayout/SignupLayout.module.scss?5ac7","components/Layout/SignupLayout/index.js","webpack://connect2mydoctor/./src/components/ResetPassword/Reset.module.scss?f7b3","components/ResetPassword/index.js","pages/ResetPassword.js"],"sourcesContent":["import loginedApi from \"../apis\";\nimport CryptoJS from \"crypto-js\";\nconst { detect } = require('detect-browser');\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\")\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\")\n}//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nexport const fetchForgotPassword =\n  ({ values, userId }) =>\n    async (dispatch) => {\n      let resp = await loginedApi.post(\"getcountrycode\",\n        {\n          \"token\": \"token\",\n          \"version\": \"2.0\",\n          \"data\": { browserTimeZone: `GMT${formatTime}` },\n          \"requestType\": 1058\n        });\n      const doctorscountrycode = resp.data.data;\n      // var hash = CryptoJS.SHA512(values.confirmPassword);\n      var hash = CryptoJS.SHA512(\"C2MD|\" + values.confirmPassword);\n\n      const res = await loginedApi.post(\"updateForgotPassword\", {\n        token: \"C2MDVerificationToken\",\n        data: {\n          password: hash.toString(),\n          userId: userId,\n          browserTimeZone: `GMT${formatTime}`,\n          Ipaddress: doctorscountrycode.Ipaddress,\n          useragent: userAgent,\n          Browser: browser.name + \" \" + browser.version,\n          appname: \"C2MD Web\",\n          Os: platform,\n          currency: doctorscountrycode.currency,\n          accessCountry: doctorscountrycode.Country,\n        },\n        requestType: 6,\n      });\n    };\n\nexport const checkUserAvailability =\n  ({ type, searchkey }) =>\n    async (dispatch) => {\n\n      let resp = await loginedApi.post(\"getcountrycode\",\n        {\n          \"token\": \"token\",\n          \"version\": \"2.0\",\n          \"data\": { browserTimeZone: `GMT${formatTime}` },\n          \"requestType\": 1058\n        });\n      const doctorscountrycode = resp.data.data;\n\n      console.log({ type: type, searchkey: searchkey });\n\n\n      const response = await loginedApi.post(\"checkuserAvailablity\", {\n        requestType: 5,\n        token: \"C2MDVerificationToken\",\n        data: {\n          type: type, searchkey: searchkey,\n          browserTimeZone: `GMT${formatTime}`,\n          Ipaddress: doctorscountrycode.Ipaddress,\n          useragent: userAgent,\n          Browser: browser.name + \" \" + browser.version,\n          appname: \"C2MD Web\",\n          Os: platform,\n          currency: doctorscountrycode.currency,\n          accessCountry: doctorscountrycode.Country,\n        },\n      });\n\n      console.log(\"Check user responce == >\", response);\n     \n      if (response.status === 200) {\n        return response.data && response.data;\n      }\n    };\n","// extracted by mini-css-extract-plugin\nexport default {\"signup_topSection\":\"SignupLayout_signup_topSection__qPX88\",\"signup_div\":\"SignupLayout_signup_div__Kx25z\"};","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Style from \"./SignupLayout.module.scss\";\nimport Assets from \"../Assets\";\nimport classNames from 'classnames'\n\nfunction SignupLayout({ children }) {\n  const formLayout = classNames(Style.signup_form_login, 'col-md-9')\n\n  return (\n      <div className={Style.signup_topSection}>\n          <div className={Style.signup_div}>\n              <div>{children}</div>\n          </div>\n      </div>\n  );\n}\n\nexport default SignupLayout;\n","// extracted by mini-css-extract-plugin\nexport default {\"reset_form_align\":\"Reset_reset_form_align__8BhSP\",\"reset_header_align\":\"Reset_reset_header_align__HCyyh\",\"reset_PhoneInput\":\"Reset_reset_PhoneInput__hSqKS\",\"reset_mobile_input_field\":\"Reset_reset_mobile_input_field__5PpIF\",\"forgot_country_code\":\"Reset_forgot_country_code__4iKjl\",\"reset_input_field\":\"Reset_reset_input_field__fNtpm\",\"reset_error_msg\":\"Reset_reset_error_msg__Iqyhx\",\"reset_form_label\":\"Reset_reset_form_label__hTWYo\",\"signin_radiowrp\":\"Reset_signin_radiowrp__L4TbE\",\"signin_radioeach\":\"Reset_signin_radioeach__hSBJR\",\"reset_text\":\"Reset_reset_text__hmEO0\",\"signup_continue_btn\":\"Reset_signup_continue_btn__Qdbu5\",\"back_to_login_link\":\"Reset_back_to_login_link__ua3gB\",\"back_to_login_link_icon\":\"Reset_back_to_login_link_icon__nV4v5\"};","import React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Style from \"./Reset.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, useFormik, Field, ErrorMessage } from \"formik\";\nimport CountryJson from \"../../constants/country.json\";\n\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { ArrowLeftBlue } from \"../../assets/Logos/Icons\";\nimport { useDispatch } from \"react-redux\";\nimport { checkUserAvailability } from \"../../actions/ForgotPasswordAction\";\nimport CustomPhoneInput from \"../CustomPhoneInput/CustomPhoneInput\";\n\nfunction ResetPassword() {\n  const re = /^[0-9\\b]+$/;\n  const history = useHistory();\n  const emailTest = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  const [emailform, SetForm] = useState(false);\n\n  let dispatch = useDispatch()\n\n  let [isEnabled, setEnabled] = useState(false)\n\n  const handleOnChange = (value, data, event, formattedValue) => {\n\n  };\n\n\n\n  let onEmailChange = (e) => {\n\n    if (e.target.value.match(emailTest)) {\n\n      setEnabled(true)\n    }\n    else {\n\n      setEnabled(false)\n\n    }\n\n  }\n\n\n  let onPhoneChange = (e) => {\n\n    var pattern = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n\n    let phonenumber = e.slice(2)\n\n    if (phonenumber.match(pattern)) {\n\n      setEnabled(true)\n    }\n    else {\n\n      setEnabled(false)\n\n    }\n\n  }\n\n\n\n  let onContinue = (values) => {\n\n    let { loginType, email, mobile } = values;\n\n    console.log(loginType, values.mobile?.slice(2));\n\n    dispatch(\n      checkUserAvailability({\n        // type: values.loginType,\n        type: \"mail\",\n        searchkey: values.loginType == \"email\" ? values.email : values.mobile.slice(2),\n      })\n    ).then((res) => {\n\n      console.log(res);\n\n      if (res?.data.info) \n      {\n        let errors = {};\n        console.log(\"User not exist\");\n        errors.email = \"This mailid not registerd with Us please check the Email Id\"\n\n      }\n      else {\n        SetForm(true);\n        \n        console.log(\"User exist\", res?.data);\n\n        history.push({\n          pathname: \"/signup/verify\",\n          state: {\n          \"detail\": {\n            \"email\": \"shaju123456@gmail.com\",\n            \"mobileNumber\": \"\",\n            \"accessCountry\": \"0\",\n            \"dial_code\": \"91\",\n            \"countryCode\": \"IN\",\n            \"code\": {\n              \"name\": \"India\",\n              \"flag\": \"🇮🇳\",\n              \"code\": \"IN\",\n              \"dial_code\": \"+91\"\n            }\n          },\n          \"userType\": \"Patient\",\n          \"page\": \"reset\"\n        },\n        });\n\n      }\n\n\n      // if (res?.data.otpvalue == \"Email id not registerd\") \n      // {\n      //   console.log();\n      // } else {\n\n      // }\n    });\n\n  }\n\n\n  return (\n    <SignupLayout>\n      <Formik\n        validate={(values) => {\n          let errors = {};\n          if (values.loginType === \"email\") {\n            if (values.email === \"\") {\n              errors.email =\n                \"Please enter the eMail id used when you created the account\";\n            } else if (!emailTest.test(values.email)) {\n              errors.email =\n                \"There seems to be some issue with your eMail id. Please check \";\n            }\n          }\n          if (values.loginType === \"mobile\") {\n            if (values.mobile === \"\") {\n              errors.mobile = \"Please enter the registered mobile number \";\n            }\n            // else if (values.mobile.toString().length != 10) {\n            //   errors.mobile =\n            //     \"There seems to be some issue with the mobile number you entered. Please check \";\n            // }\n          }\n          return errors;\n        }}\n\n        initialValues={{\n          email: \"\",\n          mobile: \"\",\n          loginType: \"email\",\n          accessCountry: \"0\",\n          dial_code: \"91\",\n          countryCode: \"IN\",\n          code: { name: \"India\", flag: \"🇮🇳\", code: \"IN\", dial_code: \"+91\" },\n        }}\n        onSubmit={(values) => {\n          // if (values.loginType === \"mobile\") {\n          //   history.push({\n          //     pathname: \"/signup/verify\",\n          //     state: { detail: values, page: \"reset\" },\n          //   });\n          // } else {\n          //   SetForm(true);\n          // }\n\n          onContinue(values);\n        }}\n      >\n        {({\n          touched,\n          errors,\n          setFieldValue,\n          values,\n          handleChange,\n          handleSubmit\n\n        }) => (\n          <form className={Style.reset_form_align} onSubmit={handleSubmit}>\n            <h2 className={Style.reset_header_align}>Reset your password</h2>\n            <div className=\"form-group\">\n              {emailform ? (\n                <p className={Style.reset_text}>\n                  Verification code has been sent to your email\n                </p>\n              ) : (\n                <p className={Style.reset_text}>\n                  Enter the email address or mobile number associated with your\n                  account\n                </p>\n              )}\n            </div>\n            <div>\n              <p></p>\n            </div>\n            <div className=\"form-group\">\n              <label className={Style.reset_form_label}>\n                {[\"radio\"].map((type) => (\n                  <div key={`inline-${type}`}>\n                    <div className={Style.signin_radiowrp}>\n                      <span>Sign in with</span>\n                      <div className={Style.signin_radioeach}>\n                        <div>\n                          <Form.Check\n                            inline\n                            label=\"eMail\"\n                            name=\"group1\"\n                            type={type}\n                            id={`inline-${type}-1`}\n                            onChange={() => setFieldValue(\"loginType\", \"email\")}\n                            checked={values.loginType === \"email\"}\n                          />\n                        </div>\n                        <div>\n                          <Form.Check\n                            inline\n                            label=\"Mobile\"\n                            name=\"group1\"\n                            type={type}\n                            id={`inline-${type}-2`}\n                            checked={values.loginType === \"mobile\"}\n                            onChange={() => {\n                              SetForm(false);\n                              setFieldValue(\"loginType\", \"mobile\");\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </label>\n\n              <br />\n              {values.loginType === \"email\" && (\n                <p>\n                  <Field\n                    type=\"text\"\n                    name=\"email\"\n                    className={\n                      Style.reset_input_field +\n                      \" \" +\n                      `${touched.email && errors.email ? \"is-invalid\" : \"\"}`\n                    }\n                    placeholder=\"Enter eMail id\"\n                    onChange={(e) => { handleChange(e); onEmailChange(e) }}\n                  />\n                  <ErrorMessage\n                    component=\"div\"\n                    name=\"email\"\n                    className={Style.reset_error_msg}\n                  />\n                </p>\n              )}\n              {values.loginType === \"mobile\" && (\n                <>\n                  <div\n                    className={\n                      Style.reset_PhoneInput +\n                      \" \" +\n                      `${touched.mobile && errors.mobile ? \"is-invalid\" : \"\"}`\n                    }\n                  >\n                    <CustomPhoneInput\n                      country={\"in\"}\n                      value={values.mobile?.slice(values.dial_code?.length)}\n                      name=\"mobile\"\n                      autoFormat={false}\n                      countryCodeEditable={false}\n                      onChange={(value, data, event, formattedValue) => {\n\n                        onPhoneChange(value)\n                        setFieldValue(\"mobile\", value);\n                        setFieldValue(\"dial_code\", data.dialCode);\n                        setFieldValue(\n                          \"countryCode\",\n                          data.countryCode?.toUpperCase()\n                        );\n\n                        handleOnChange(value, data, event, formattedValue);\n                      }}\n                    />\n                    {/* <select\n                      className={Style.forgot_country_code}\n                      value={values.accessCountry}\n                      name=\"accessCountry\"\n                      onChange={(e) => {\n                        setFieldValue(\"accessCountry\", e.target.value);\n                        setFieldValue(\"code\", CountryJson[e.target.value]);\n                      }}\n                      // onChange={(value) =>\n                      //   setFieldValue(\"accessCountry\", value)\n                      // }\n                    >\n                      {CountryJson.map((item, index) => {\n                        return (\n                          <option value={index}>\n                            {item.flag} {item.dial_code}\n                          </option>\n                        );\n                      })}\n                    </select> */}\n                    {/* <Field\n                      type=\"text\"\n                      name=\"mobile\"\n                      className={Style.reset_input_field}\n                      placeholder=\"Enter Mobile No\"\n                      onChange={(e) => {\n                        if (e.target.value === \"\" || re.test(e.target.value)) {\n                          handleChange(e);\n                        }\n                      }}\n                      autoComplete=\"off\"\n                    /> */}\n                  </div>\n                  <ErrorMessage\n                    component=\"div\"\n                    name=\"mobile\"\n                    className={Style.reset_error_msg}\n                  />\n                </>\n              )}\n            </div>\n\n            <div className=\"col-md-12\">\n              {emailform ? (\n                <Button\n                  variant=\"outline-secondary\"\n                  className={Style.signup_continue_btn}\n                  type=\"submit\"\n                  onClick={() => history.push(\"/signin\")}\n                >\n                  Go back\n                </Button>\n              ) : (\n                <Button\n                  disabled={!isEnabled}\n                  variant=\"outline-secondary\"\n                  className={Style.signup_continue_btn}\n                  type=\"submit\"\n\n                >\n                  Continue\n                </Button>\n              )}\n\n              {\n                emailform ? null :\n\n                  <div\n                    variant=\"outline-secondary\"\n                    className={Style.back_to_login_link}\n                    type=\"submit\"\n                    onClick={() => { history.push('/signin') }}\n                  >\n                    <div className={Style.back_to_login_link_icon}><ArrowLeftBlue /></div>\n                    Back\n                  </div>\n\n              }\n\n\n            </div>\n          </form>\n        )}\n      </Formik>\n    </SignupLayout>\n  );\n}\n\nexport default ResetPassword;\n","import React from \"react\";\nimport LoginLayout from \"../components/Layout/LoginLayout\";\nimport ResetPassword from \"../components/ResetPassword\";\n\nfunction ResetPasswordPage() {\n  return (\n    <LoginLayout>\n      <ResetPassword />\n    </LoginLayout>\n  );\n}\n\nexport default ResetPasswordPage;\n"],"names":["browser","detect","require","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","slice","search","fetchForgotPassword","values","userId","dispatch","loginedApi","browserTimeZone","resp","doctorscountrycode","data","hash","CryptoJS","confirmPassword","token","password","Ipaddress","useragent","Browser","name","version","appname","Os","currency","accessCountry","Country","requestType","checkUserAvailability","type","searchkey","console","log","response","status","children","classNames","Style","className","history","useHistory","emailTest","useState","emailform","SetForm","useDispatch","isEnabled","setEnabled","SignupLayout","validate","errors","loginType","email","test","mobile","initialValues","dial_code","countryCode","code","flag","onSubmit","then","res","info","push","pathname","state","onContinue","touched","setFieldValue","handleChange","handleSubmit","map","Form","inline","label","id","onChange","checked","placeholder","e","target","value","match","onEmailChange","component","CustomPhoneInput","country","length","autoFormat","countryCodeEditable","event","formattedValue","dialCode","toUpperCase","Button","variant","onClick","disabled","LoginLayout"],"sourceRoot":""}