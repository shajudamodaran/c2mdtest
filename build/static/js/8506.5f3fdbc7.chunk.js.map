{"version":3,"file":"static/js/8506.5f3fdbc7.chunk.js","mappings":"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","sources":["Helpers/localStorageHelper.js","components/Styled/TittleCard.jsx","constants/const.js","components/PrescriptionForm/Helpers/Constants.js","components/PrescriptionForm/Components/Modal/Modal.jsx","components/PrescriptionForm/Components/SuccessModel/SuccessModal.jsx","components/PrescriptionForm/Helpers/helperFunctions.js","components/PrescriptionForm/Components/LoaderModel/LoaderModel.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiSelect.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiAutoComplete.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiDropdown.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiDatePicker.jsx","components/PrescriptionForm/Components/FailiureModal/FailiureModal.jsx","components/PrescriptionForm/Components/CustomeComponents/AutoCompleteWithCheckbox.jsx","components/PrescriptionForm/PriscriptionForm.jsx","components/PrescriptionTemplateList/prescriptionTemplateList.jsx","components/PrescriptionForm/Components/SyncSuccessModal/SyncSuccessModal.jsx","components/PrescriptionDashboard/prescriptionDashboard.jsx","pages/PriscriptionCr/constants.js","pages/PriscriptionCr/Index.jsx"],"sourcesContent":["\nexport const getFromLocalStorage = async (key) =>{\n\n   return localStorage.getItem(key);\n\n}","import styled from 'styled-components'\n\nexport const TittleCard = styled.div`\n\npadding:10px 10px;\nbackground-color:white;\ndisplay:\"flex\";\nborder-radius:5px;\nbox-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n  \n`\n\n","\nexport const USER_TYPE=\"c2mdUserUserType\"\nexport const USER_DATA=\"userData\"\nexport const ADMIN_USER=\"C2MDAdmin\"\nexport const CLINIC_ADMIN_USER=\"ClinicAdmin\"\nexport const USER_TOKEN=\"c2mdUserToken\"\nexport const BETHANY_CLINIC_ID=\"14\"\n","export const INVESTIGATION_HEAD = \"Investigation\"\nexport const MEDICINE_HEAD = \"Medicine\"\n\n//common\nexport const DELETE_FLAG = \"Delete\"\n\n//investigation table\nexport const INVESTIGATION_TABLE_HEADING_NAME = \"InvestigationName\"\nexport const INVESTIGATION_TABLE_HEADING_COMMENTS = \"Instructions\"\n\n//Medicine Table\nexport const MEDICINE_TABLE_HEADING_MEDICINE_TYPE= \"MedicineType\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_NAME= \"MedicineName\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_WHEN= \"Whentohave\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_FREEQUANCY= \"Frequency\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_QUALITY= \"Quantity\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_UNIT= \"Unit\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_START_DATE= \"StartingDate\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_DAYS= \"Noofdays\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_INSTRUCTIONS= \"Instructions\"\n\n\n\n\nexport const getNumberOfDays = (max) => {\n\n    let result=[]\n\n    for (let i = 1; i <= max; i++) \n    {\n       result.push(i)\n    }\n\n    return result\n\n}\n\n\n\n\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { UPDATE_INVESTIGATION_TABLE_DATA, UPDATE_MEDICINE_TABLE_DATA, UPDATE_REDUX_PRESCRIPTION } from '../../../../actions/type'\nimport { DELETE_FLAG, INVESTIGATION_HEAD } from '../../Helpers/Constants'\n// import { setInvestigationRedux, setMedicinesRedux, updateReduxData } from '../../Redux/Slice/SelectedDataSlice'\nimport './modal.css'\n\nfunction Modal({ state, setState, data, setData, removeIndex, deletingFrom }) {\n\n   const { investigationData, medicinesData } = useSelector((state) =>  state?.presctiptionFormReducer)\n\n  \n\n\n    const dispatch = useDispatch()\n\n    let removeData = () => {\n\n        //console.log(deletingFrom,investigationData);\n\n\n        if (data) {\n\n            if (deletingFrom===INVESTIGATION_HEAD) {\n\n                let newResult = investigationData.filter((element,key) => { return (key !== removeIndex) })\n                console.log(\"New removed array==>\", newResult);\n                dispatch({\n                    type: UPDATE_INVESTIGATION_TABLE_DATA,\n                    payload: newResult\n                });\n            }\n            else {\n\n                let newResult = medicinesData.filter((element) => { return (element.id !== removeIndex) })\n                console.log(\"New removed array==>\", newResult);\n                dispatch({\n                    type: UPDATE_MEDICINE_TABLE_DATA,\n                    payload: newResult\n                });\n            }\n\n\n\n        }\n\n        setState(false)\n\n\n\n\n    }\n\n\n    let updateReduxSelect = ({ head, id, tittle, value }) => {\n\n        dispatch(UPDATE_REDUX_PRESCRIPTION({ head, id, tittle, value }))\n\n    }\n\n\n\n\n\n    return (\n        <>\n            {\n                state ?\n\n                    <div className=\"modal-prescription\" >\n                        <div className=\"modal-body-prescription\">\n                            <div className=\"modal-content-prescription\">\n                                Do you want to delete this ?\n                            </div>\n\n                            <div className=\"modal-buttons-prescription\">\n                                <button className='modal-cancel-btn-prescription' onClick={() => { setState(false) }}>No</button>\n                                <button className='modal-ok-btn-prescription' onClick={() => { removeData() }}>Yes</button>\n                            </div>\n                        </div>\n                    </div> : null\n            }\n        </>\n    )\n}\n\nexport default Modal\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { CLEAR_PRESCRIPTION } from '../../../../actions/type'\n\nfunction SuccessModal({ state,setState,successMessage, isPreload, setEditMode, clearData }) {\n\n    let dispatch=useDispatch()\n\n\n    let handleOkClick =()=>{\n\n        setState(false)\n\n        if(isPreload)\n        {\n            setEditMode(false)\n        }\n        else{\n\n             if(successMessage.includes(\"successfully\")){\n\n                    clearData()\n    \n                }\n          \n\n           \n\n           \n        }\n\n       \n    }\n\n    console.log(successMessage);\n\n    return (\n\n        <>\n            {state ?\n\n                <div className=\"modal-loader\" >\n                    <div className=\"modal-body-prescription\">\n                        <div className=\"modal-content-prescription\">\n                           {successMessage?successMessage:\"Success\"}\n                        </div>\n\n                        <div className=\"modal-buttons-prescription\" style={{width:\"100%\",display:\"flex\", flexDirection:\"row\", justifyContent:\"center\"}}>\n                            <button className='modal-ok-btn-prescription' onClick={handleOkClick}>Ok</button>\n                        </div>\n                    </div>\n                </div> : null}\n        </>\n\n    )\n}\n\nexport default SuccessModal\n","export const validateNumberOnKeyPress = (event) => {\n\n\n    if (event.which == 46 || event.which == 8) {\n        //do nothing\n    }\n    else if (event.which < 48 || event.which > 57) {\n        event.preventDefault();\n    }\n    else if (event.target.value.length > 9) {\n\n        event.preventDefault();\n    }\n\n\n}\n\n\nlet gerErrorMessage = (type, name) => {\n\n    let errorMessageText = `${name} can't empty. please enter the ${name}!!!`\n    let errorMessageSelect = `${name} can't empty. please select the ${name}!!!`\n\n\n    if (type == 'select') {\n        return { status: false, error: errorMessageSelect }\n    }\n    else {\n        return { status: false, error: errorMessageText }\n    }\n\n}\n\n\nexport const validateFormData = (reports, investigationtableData, medicineTableData) => {\n\n\n\n  \n    if (reports.height.value ||\n        reports.height.unit ||\n        reports.weight.value ||\n        reports.weight.unit ||\n        reports.lmp ||\n        reports.chiefComplaints ||\n        reports.releventPoint ||\n        reports.diagnosis ||\n        reports.additionalInstruction||\n        reports.examination || validateInvestigationTable(investigationtableData).status===true || validateMedicinetable(medicineTableData).status===true ) \n         {\n\n\n        return { status: true, error: validateMedicinetable(medicineTableData) };\n    }\n\n   \n}\n\nexport const validateInvestigationTable = (table_data) => {\n\n    let result = { status: false, error: \"message\" }\n\n\n    for (const element of table_data) {\n\n        if (element.name) \n        {\n           result= { status: true, error: \"message\" }\n            break\n\n        }\n        else if (element.comment) {\n            result= { status: true, error: \"message\" }\n            break\n\n        }\n\n    }\n\n\n    return result\n\n}\n\n\nexport const validateMedicinetable = (table_data) => {\n\n   \n\n    let result = { status: false, error: \"initial\" }\n    let process = null\n\n\n    for (const element of table_data) {\n\n        if (element.type) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.name) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.when) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.freequancy) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.quantity) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.unit) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.date) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.days) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.instructions) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n\n\n    }\n\n\n    return result\n\n}\n\n\n\nexport const validateMedicineTableForAddNewRow =(table_data)=>{\n\n    let result = { status: true, error: \"message\" }\n    let process = null\n\n\n    for (const element of table_data) {\n\n     \n         if (!element.name) {\n            process = { id: element.id, element: \"Name of Medicine\" }\n            break\n\n        }\n        \n\n    }\n\n    result = process ? { status: false, error: `\"${process.element}\"  of ${process.id + 1}${process.id + 1 == 1 ? \"st\" : process.id + 1 == 2 ? \"nd\" : process.id + 1 == 3 ? \"rd\" : \"th\"} medicine on the Medicines table is missing` } : { status: true, error: \"message\" }\n\n\n    return result\n\n\n\n}\n\n\nexport const validateInvestigationtableForAddNewRow=(table_data)=>{\n\n    let result = { status: true, error: \"message\" }\n\n\n    for (const element of table_data) {\n\n        if (!element.name) \n        {\n           result= { status: false, error: \"Name missing\" }\n            break\n\n        }\n        \n\n    }\n\n\n    return result\n\n}\n\n\nexport const getAddInvestigationButtonText=(length)=>{\n\n    if(length==0)\n    {\n        return (\"Add investigation\")\n    }\n    else if(length>0)\n    {\n        return (\"Add Investigations\")\n    }\n\n}\n\n","import React from 'react'\nimport { PuffLoader, SyncLoader } from 'react-spinners';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport '../Modal/modal.css'\n\nfunction LoaderModel({ state, setState }) {\n\n\n\n    return (\n        <>\n            {state ?\n\n                <div className=\"modal-loader\" >\n                    <div className=\"modal-body-prescription\">\n                        <div className=\"modal-content-prescription\">\n                            {/* when loader starts, cant able to call the API again even again clicks on the SAVE button */}\n                            Saving Template. Please wait ...\n\n                            \n                        </div>\n\n                        <div className=\"modal-buttons\" style={{ width: \"100%\", display: \"flex\", flexDirection: \"row\", justifyContent: \"center\" }}>\n\n                            <PuffLoader color={\"black\"} loading={true} size={50} />\n\n                        </div>\n                    </div>\n                </div> : null}\n        </>\n    )\n}\n\nexport default LoaderModel\n","import React from 'react'\nimport InputBase from '@mui/material/InputBase';\nimport { styled } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\nimport { useTheme } from '@emotion/react';\n\nfunction MuiSelect() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst names = [\n  'Oliver Hansen',\n  'Van Henry',\n  'April Tucker',\n  'Ralph Hubbard',\n  'Omar Alexander',\n  'Carlos Abbott',\n  'Miriam Wagner',\n  'Bradley Wilkerson',\n  'Virginia Andrews',\n  'Kelly Snyder',\n];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\n\n\n\nexport const BootstrapInput = styled(InputBase)(({ theme }) => ({\n   'minWidth':\"110px\",\n   'width':\"100%\",\n    'label + &': {\n      marginTop: theme.spacing(5),\n    },\n  \n    '& .MuiInputBase-input': {\n      borderRadius: 4,\n      position: 'relative',\n      backgroundColor: theme.palette.background.paper,\n      border: '0px solid #ced4da',\n      fontSize: '14px !important',\n      textAlign:\"start\",\n      padding: '.75rem .6rem',\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\n      // Use the system font instead of the default Roboto font.\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n      '&:focus': {\n        borderRadius: 4,\n        borderColor: '#ffffff',\n        backgroundColor:\"white\"\n       \n      },\n    },\n  }));\n  \n\nexport default MuiSelect\n","import React, { useEffect } from 'react'\nimport TextField from '@mui/material/TextField';\nimport Autocomplete,{ createFilterOptions }  from '@mui/material/Autocomplete';\nimport { FormControl, InputLabel } from '@mui/material';\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { BootstrapInput } from './MuiSelect';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n  'input': {\n    '&::placeholder': {\n      textOverflow: 'ellipsis !important',\n      color: 'blue !important',\n      color: 'rgb(119, 119, 119)!important',\n      opacity: '1 !important',\n      fontSize: \"14px !important\"\n    }\n  },\n\n  root: {\n\n    \"& .css-16awh2u-MuiAutocomplete-root\": {\n      width: \"200px\"\n\n    },\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n      transform: \"translate(34px, 20px) scale(1);\",\n\n    }\n  },\n  inputRoot: {\n    color: \"purple\",\n    backgroundColor: \"white\",\n    padding: '0px',\n    fontSize: \"14px\",\n\n\n\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n      paddingLeft: 0,\n\n      margin: \"0px\",\n      padding: 0,\n      fontSize: \"14px\"\n\n\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"green\",\n      border: 0,\n    },\n    \"&:hover .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"red\",\n      border: 0,\n    },\n    \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"purple\",\n      border: 0,\n    }\n\n  }\n}));\n\n\nconst usePlaceholderStyles = makeStyles(theme => ({\n\n  '.MuiAutocomplete-root': {\n    borderRadius: 4,\n    backgroundColor: 'red'\n\n  },\n\n  noBorder: {\n    border: \"none\",\n  },\n  customTextField: {\n    \"& input::placeholder\": {\n      fontSize: \"20px !important\",\n      opacity: 1\n    }\n  },\n  'input-label': {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    width: '100%',\n    color: 'red',\n  },\n\n  'input': {\n    '&::placeholder': {\n      textOverflow: 'ellipsis !important',\n      color: 'blue'\n    }\n  }\n\n}));\n\nconst Placeholder = ({ children }) => {\n  const classes = usePlaceholderStyles();\n  return <div className={classes.placeholder}>{children}</div>;\n};\n\n\nfunction MuiAutoComplete({ value, data, name, onChange, id, placeholder,isSpeciality, selected,style }) {\n\n  const classes = useStyles();\n  const [answer, setAnswer] = React.useState(\"\");\n\n\n  const Pop = props => {\n    const { className, anchorEl, style, ...rest } = props\n    const bound = anchorEl.getBoundingClientRect()\n    return <div {...rest} style={{\n      position: 'absolute',\n      zIndex: 9999,\n      width: bound.width\n    }} />\n  }\n\n  let handleOnachange = (e, values) => {\n\n   onChange({ data: values, id, key: name }) \n\n  }\n\n  const filterOptions = createFilterOptions({\n    matchFrom: 'start',\n    stringify: (option) => option,\n  });\n\n  // const filterOptions = createFilterOptions({\n  //   // matchFrom: 'start',\n  //   stringify: (option) => option, // make it one for it\n  // });\n\n\n  useEffect(() => {\n\n    if(isSpeciality)\n    {\n      console.log(value);\n\n    }\n   \n  }, [])\n  \n\n  \n\n  return (\n\n    <Autocomplete\n      // classes={{ notchedOutline: classes.input }}\n      popoverProps={{ style: { width: 'auto' } }}\n      style={{\n        minWidth: 300,\n        width: \"100%\"\n      }}\n    \n      value={value}\n      filterOptions={data?filterOptions:null}\n      onChange={handleOnachange}\n      classes={classes}\n      id=\"combo-box-demo\"\n      options={data ? data : null}\n      renderInput={(params) => {\n\n        return (\n          <TextField\n            InputProps={{ classes: { input: classes['input'] } }}\n            {...params}\n            placeholder={placeholder}\n          />\n        )\n      }}\n    />\n\n  )\n}\n\nexport default MuiAutoComplete\n","import React from 'react'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { BootstrapInput } from './MuiSelect';\n\nconst usePlaceholderStyles = makeStyles(theme => ({\n    placeholder: {\n        color: \"#868686\",\n        color: 'rgb(119, 119, 119)!important',\n        fontSize: \"14.5px\",\n        margin: \"0px\"\n    },\n\n    root: {\n        '&.MuiOutlinedInput-root': {\n            backgroundColor: \"red !important\",\n\n        },\n\n        \"& .MuiInputBase-root\": {\n            padding: 0,\n            \"& .MuiButtonBase-root\": {\n                padding: 0,\n                paddingLeft: 0,\n            },\n            \"& .MuiInputBase-input\": {\n                backgroundColor: \"white\",\n                padding: \".8rem .6rem !important\",\n                minHeight: 30,\n                cursor: \"pointer\",\n                backgroundColor: \"red !important\",\n                fontSize: \"14px\",\n\n            }\n        }\n    },\n}));\n\nconst Placeholder = ({ children }) => {\n    const classes = usePlaceholderStyles();\n    return <div className={classes.placeholder}>{children}</div>;\n};\n\n\n\nfunction MuiDropdown({ onChange, name, data, isMedTable, id, placeholder, value, style, isObject, populationName,populationId }) {\n\n    const [answer, setAnswer] = React.useState(\"\");\n\n    let handleOnChange = (e) => {\n        if (isMedTable) {\n            console.log({ data: e.target.value, id: id, key: name });\n            onChange({ data: e.target.value, id: id, key: name });\n            // setAnswer(e.target.value)\n        }\n\n        else {\n            onChange(name, e.target.value);\n            // setAnswer(e.target.value)\n        }\n    }\n\n\n    return (\n        <Select\n            style={style ? style : null}\n            input={<BootstrapInput placeholder={placeholder} />}\n            value={value}\n            onChange={handleOnChange}\n            displayEmpty\n            inputProps={{ style: { fontSize: 20 } }} // font size of input text\n            InputLabelProps={{ style: { fontSize: 20 } }} // font size of input label\n            renderValue={\n                value ? () => <span>{value}</span> : () => <Placeholder>{placeholder}</Placeholder>\n            }\n        >\n            {\n                isObject ?\n\n                    data ?\n\n                        data.map((element, key) => {\n                            return (\n\n                                <MenuItem key={key} value={element[populationId?populationId:id]}>{element[populationName?populationName:name]}</MenuItem>\n\n                            )\n                        })\n\n                        : null\n\n\n                    :\n\n\n                    data ?\n\n                        data.map((element, key) => {\n                            return (\n\n                                <MenuItem key={key} value={element}>{element}</MenuItem>\n\n                            )\n                        })\n\n                        : null\n\n            }\n\n        </Select>\n    )\n}\n\nexport default MuiDropdown\n","import React from 'react'\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport TextField from '@mui/material/TextField';\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport { DatePicker, KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport moment from 'moment'\n\nimport { Menu, Dropdown } from 'antd';\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n\n    root: {\n        '&.MuiOutlinedInput-root': {\n            backgroundColor: \"red !important\"\n        },\n\n        \"& .MuiInputBase-root\": {\n            padding: 0,\n            \"& .MuiButtonBase-root\": {\n                padding: 0,\n                paddingLeft: 0,\n            },\n            \"& .MuiInputBase-input\": {\n                backgroundColor: \"white\",\n                padding: \".5rem .6rem\",\n                fontSize: \"14.8px\",\n                minHeight: 28,\n                cursor: \"pointer\",\n\n            }\n        }\n    },\n    inputRoot: {\n        color: \"purple\",\n        backgroundColor: \"white\",\n        padding: '0px',\n\n        '& .MuiFormControl-root MuiTextField-root': {\n\n            backgroundColor: \"red\"\n\n        },\n\n\n        // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n        '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n            // Default left padding is 6px\n            paddingLeft: 0,\n\n            margin: \"0px\",\n            padding: 0\n\n        },\n        \"& .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"green\",\n            border: 0,\n        },\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"red\",\n            border: 0,\n        },\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"purple\",\n            border: 0,\n        }\n\n    }\n\n\n}));\n\n\n\nfunction MuiDatePicker({ onChange, name, isMedTable, id, maxDate, minDate, placeholder, _value, error }) {\n\n    const [value, setValue] = React.useState(null);\n    const classes = useStyles();\n\n    const menu = (\n        <Menu>\n            <Menu.Item onClick={() => { setValue(null) }} key=\"1\">Clear date</Menu.Item>\n\n        </Menu>\n    );\n\n    const handleChange = (newValue) => {\n\n\n        console.log(newValue);\n\n        if (isMedTable) {\n\n            console.log(newValue, id, name);\n\n            onChange({ data: convertDate(newValue), id, key: name })\n            // setState(newValue);\n\n        }\n        else {\n\n            // setState(newValue);\n            onChange(name, convertDate(newValue))\n\n        }\n\n\n    };\n\n\n    let convertDate = (para_date) => {\n        const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        const dateObj = new Date(para_date);\n        const month = monthNames[dateObj.getMonth()];\n        const day = String(dateObj.getDate()).padStart(2, '0');\n        const year = dateObj.getFullYear();\n        const output = day + '-' + month + '-' + year;\n\n        return output\n    }\n\n    return (\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n            <Dropdown overlay={menu} trigger={['contextMenu']}>\n\n                <DatePicker\n                    error={error}\n                    helperText={null}\n                    autoOk\n                    classes={classes}\n                    InputProps={{\n                        disableUnderline: true\n                    }}\n                    maxDate={maxDate}\n                    minDate={minDate}\n                    placeholder={placeholder}\n                    variant=\"inline\"\n                    value={_value ? moment(_value) : null}\n                    onChange={handleChange}\n                    disableToolbar={false}\n                    format={'dd-MMM-yyyy'}\n\n\n                />\n            </Dropdown>\n\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default MuiDatePicker\n","import React from 'react'\n\nfunction FailiureModal({ state,setState }) {\n    return (\n\n        <>\n            {state ?\n\n                <div className=\"modal\" >\n                    <div className=\"modal-body\">\n                        <div className=\"modal-content\">\n                        Prescription already saved. No changes found\n                        </div>\n\n                        <div className=\"modal-buttons\" style={{width:\"100%\",display:\"flex\", flexDirection:\"row\", justifyContent:\"center\"}}>\n                            <button className='modal-ok-btn' onClick={() => { setState(false) }}>Ok</button>\n                        </div>\n                    </div>\n                </div> : null}\n        </>\n\n    )\n}\n\nexport default FailiureModal\n","\nimport { Select } from 'antd'\n\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SET_SELECTED_DOCTORS, UPDATE_REDUX_PRESCRIPTION } from '../../../../actions/type';\n\nfunction AutoCompleteWithCheckbox(props) {\n\n  let { data, setSelected, ...other } = props\n\n  const { Option } = Select;\n\n  let [_data, setData] = useState(data)\n  let [options, setOptions] = useState([])\n  const [value, setValue] = React.useState([]);\n\n  let dispatch = useDispatch()\n  const { selectedDoctors, doctorsList } = useSelector((state) => state?.presctiptionFormReducer)\n\n\n\n  let createOptionObject = (para_data) => {\n\n    if (para_data.length > 0) {\n\n      let _options = []\n\n      for (let i = 0; i<para_data.length; i++) {\n\n        _options.push({\n          label: `${para_data[i].doctorName}`,\n          value: para_data[i].doctorId,\n        });\n      }\n\n      return(_options);\n\n    }\n\n\n  }\n\n\n\n  const selectProps = {\n    mode: 'multiple',\n    style: {\n      width: '300px',\n    },\n    placeholder: 'Select doctor',\n    maxTagCount: 'responsive',\n  };\n\n\n  let handleOnchange = (newValue) => {\n\n    console.log(newValue);\n\n   \n\n    dispatch({\n      type: SET_SELECTED_DOCTORS,\n      payload: newValue\n    });\n\n    // setValue(newValue);\n\n\n  }\n\n\n\n  return (\n    <Select value={selectedDoctors} options={ createOptionObject(doctorsList)} onChange={(e) => { handleOnchange(e) }} getPopupContainer={trigger => trigger.parentNode} {...other} {...selectProps} />\n  )\n}\n\nexport default AutoCompleteWithCheckbox","import React, { useEffect, useRef, useState } from 'react'\nimport './prescriptionform.css'\nimport axios from \"axios\";\n\nimport { notification, Popover, Tooltip } from 'antd';\nimport { AddIcon_Prescription, DeleteIcon_Prescription, LabelIcon_Prescription } from '../../assets/Logos/Icons';\nimport Modal from './Components/Modal/Modal';\n\nimport { Select } from 'antd';\nimport SuccessModal from './Components/SuccessModel/SuccessModal';\n\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getNumberOfDays, INVESTIGATION_HEAD, INVESTIGATION_TABLE_HEADING_COMMENTS, INVESTIGATION_TABLE_HEADING_NAME, MEDICINE_HEAD, MEDICINE_TABLE_HEADING_MEDICINE_DAYS, MEDICINE_TABLE_HEADING_MEDICINE_FREEQUANCY, MEDICINE_TABLE_HEADING_MEDICINE_INSTRUCTIONS, MEDICINE_TABLE_HEADING_MEDICINE_NAME, MEDICINE_TABLE_HEADING_MEDICINE_QUALITY, MEDICINE_TABLE_HEADING_MEDICINE_START_DATE, MEDICINE_TABLE_HEADING_MEDICINE_TYPE, MEDICINE_TABLE_HEADING_MEDICINE_UNIT, MEDICINE_TABLE_HEADING_MEDICINE_WHEN } from './Helpers/Constants';\n// import { setInvestigationRedux, setMedicinesRedux, setSubmissionData, updateReduxData } from '../../Redux/Slice/SelectedDataSlice';\n\nimport {\n    FileSearchOutlined,\n    MedicineBoxOutlined,\n    PlusCircleOutlined,\n    UserOutlined\n} from '@ant-design/icons';\nimport { getAddInvestigationButtonText, validateFormData, validateInvestigationtableForAddNewRow, validateMedicineTableForAddNewRow, validateNumberOnKeyPress } from './Helpers/helperFunctions';\n\n\nimport LoaderModel from './Components/LoaderModel/LoaderModel';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiAutoComplete from './Components/CustomeComponents/MuiAutoComplete';\nimport MuiDropdown from './Components/CustomeComponents/MuiDropdown';\nimport MuiDatePicker from './Components/CustomeComponents/MuiDatePicker';\nimport LmpdatePicker from './Components/CustomeComponents/LmpdatePicker';\nimport FailiureModal from './Components/FailiureModal/FailiureModal';\nimport { CLEAR_PRESCRIPTION, SET_DOCTORS, SET_SELECTED_DEPARTMENT, SET_SELECTED_DOCTORS, SET_SUBMISSION_DATA_PRESCRIPTION, UPDATE_INVESTIGATION_TABLE_DATA, UPDATE_MEDICINE_TABLE_DATA, UPDATE_REDUX_PRESCRIPTION } from '../../actions/type';\nimport { getDepartments, getDoctors } from '../../actions/PrescriptionFormActions';\nimport AutoCompleteWithCheckbox from './Components/CustomeComponents/AutoCompleteWithCheckbox';\n//import authHeader from '../../actions/auth-header';\n// import NetworkErrorModal from './Components/NetworkErrorModal/NetworkErrorModal';\n\n\nconst useStyles = makeStyles(theme => ({\n    quantityRoot: {\n        color: \"#FFFFFF\",\n        backgroundColor: \"#ffffff\",\n        opacity: 0.6,\n        borderRadius: \"5px\",\n        outline: \"0px !importanrt\",\n        \"&:hover\": {\n            backgroundColor: \"#ffffff\",\n            borderRadius: \"5px\",\n            opacity: 1,\n            border: \"0px !importanrt\",\n        },\n        \"&:focus-within\": {\n\n            borderRadius: \"5px\",\n            opacity: 1,\n            border: \"0px !importanrt\",\n        },\n        \"& .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ffffff\",\n            border: \"0px !importanrt\",\n\n        },\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ffffff\",\n            border: \"0px !importanrt\",\n        },\n        \"& .Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ffffff\",\n            borderRadius: \"5px 5px 0 0\",\n            border: \"0px !importanrt\",\n        },\n        \"& .Mui-disabled\": {\n            color: \"#FFFFFF\",\n            opacity: 0.6,\n            border: \"0px !importanrt\",\n        },\n        \"& .Mui-disabled .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ff0000\",\n            border: \"0px !importanrt\",\n        },\n\n    },\n    selectRoot: {\n        color: \"#FFFFFF\",\n        border: 0,\n\n        \"& .Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #484850\",\n            borderRadius: \"5px 5px 0 0\"\n        },\n    },\n    icon: {\n        color: \"#FFFFFF\"\n    },\n    selectPaper: {\n        backgroundColor: \"#ffffff\",\n        border: \"1px solid #ffffff\",\n        borderRadius: \"5px\",\n        color: \"#FFFFFF\",\n        \"& li:hover\": {\n            backgroundColor: \"#ffffff\"\n        }\n    }\n}\n));\n\n\n\nconst { Option } = Select;\n\nfunction PriscriptionForm({ preloadData, backAction, setEditMode }) {\n\n    const dispatch = useDispatch()\n    let history = useHistory()\n\n    let [finalInvestigations, setFinalInvestigation] = useState([])\n    let [finalMedicinesdata, setFinalMedicinesdata] = useState([])\n    let [params, setParams] = useState(JSON.parse(localStorage.getItem(\"basicinfo\")))\n\n    let [isreadyToValidate, setReadyToValidate] = useState({\n        templateName: false,\n        doctos: false,\n        department: false\n    })\n\n\n    const { selectedDataInvestigation, selectedDataMedicines, submissionData, investigationData, medicinesData } = useSelector((state) => state?.presctiptionFormReducer)\n    const { selectedDoctors, selectedDepartment } = useSelector((state) => state?.presctiptionFormReducer)\n    let leftMenus =\n        [\n            { name: \"Patient Reports\", icon: <UserOutlined /> },\n            { name: \"Investigations\", icon: <FileSearchOutlined /> },\n            { name: \"Medicines\", icon: <MedicineBoxOutlined /> },\n            { name: \"Additional Instructions\", icon: <PlusCircleOutlined /> },\n        ]\n\n    let [isNetworkError, setNetworkError] = useState(true)\n\n    useEffect(() => {\n\n        let _params = JSON.parse(localStorage.getItem(\"basicinfo\"));\n\n        if (_params) {\n            setNetworkError(false)\n        }\n        else {\n            setNetworkError(true)\n        }\n\n\n    }, [])\n\n\n    let [activeLeft, setActiveLeft] = useState(leftMenus[0].name)\n\n    let [isConfirmDelete, setConfirmDelete] = useState(false)\n    let [deleteIndex, setDeleteIndex] = useState(null)\n\n    let [isConfirmDeleteMedicine, setConfirmDeleteMedicine] = useState(false)\n    let [deleteIndexMedicine, setDeleteIndexMedicine] = useState(null)\n\n    let [deletingFrom, setDeletingFrom] = useState(null)\n\n    let [isSuccess, setSuccess] = useState(false)\n    let [successMessage, setSuccessMessage] = useState(\"\")\n    let [isFailed, setFailed] = useState(false)\n    let [isdisabled, setDisabled] = useState(false)\n    let [test, settest] = useState(false)\n    let [medicine, setMedicine] = useState(false)\n    const [presciptioninfor, setPrescriptioninfo] = useState({\n        height: \"\",\n        weight: \"\",\n        lmp: \"\",\n        cheifcomplaints: \"\",\n        relevantpointfromhistory: \"\",\n        diagnosis: \"\",\n        examinationlabfindings: \"\",\n        additionalinstrunction: \"\",\n        doctorName: params?.doctorname,\n        registrationnumber: params?.registrationnumber,\n        qualification: params?.qualification,\n        patientname: params?.patientname,\n        gender: params?.gender,\n        age: params?.age,\n        appointmentdate: params?.appointmentdate,\n        appointmenttime: params?.appointmenttime,\n        patientNO: params?.patientno,\n        doctorcode: params?.doctorcode,\n        appointmentID: params?.appointmentID,\n        medicine: [],\n        labTest: []\n    });\n\n    let [isReadyToSubmit, setRedyToSubmit] = useState(false)\n\n    let [isDropDown, setDropDownClass] = useState({ status: false, key: 0 })\n\n    let [isReadtToAddMedicine, setReadytoAddMedicine] = useState({ status: false })\n    let [isReadyToAddInvestigation, setReadytoAddInvestigation] = useState(null)\n    let [isLoading, setLoading] = useState(false)\n\n    let [scrollAmount, setScrollAmount] = useState(0)\n\n    let [selectedLmp, setSelectedLmp] = useState(null)\n\n    let [preloadPrescription, setPreloadPrescription] = useState(preloadData)\n\n    let [departmentsArray, setDepartmentsArray] = useState([])\n\n    let [selectedDepartmentName, setSelectedDepartmentName] = useState(null)\n\n    let [doctorsArray, setDoctors] = useState([])\n    let [selectedDr, setDr] = useState([])\n\n\n    let [templateName, setTemplateName] = useState(null)\n\n    let [validationError, setvalidatoinError] = useState(\n        {\n            department: null,\n            doctors: null,\n            templateName: null\n        }\n    )\n\n    let whenData = ['Before Food', 'After Food', 'SOS']\n    let [daysCount,setdaysCount]=useState(getNumberOfDays(120))\n\n\n\n\n\n\n    useEffect(() => {\n\n        loadmedicine()\n        loadtest()\n        //checkForLastPrescription()\n        loadDepartments()\n\n    }, []);\n\n\n\n    useEffect(() => {\n\n        if (preloadPrescription) {\n\n            populatePreloadData()\n\n        }\n        else {\n            clearPrepopulateddate()\n        }\n\n    }, [preloadPrescription])\n\n\n\n\n    useEffect(() => {\n\n        let result = validateMedicineTableForAddNewRow(medicinesData)\n\n        console.log(result);\n\n        setReadytoAddMedicine(result)\n        setFinalMedicinesdata([])\n        setFinalMedicinesdata(medicinesData)\n\n    }, [medicinesData])\n\n\n\n    useEffect(() => {\n\n        let result = validateInvestigationtableForAddNewRow(investigationData)\n\n        setReadytoAddInvestigation(result.status)\n\n        setFinalInvestigation([])\n        setFinalInvestigation(investigationData)\n\n    }, [investigationData])\n\n\n\n\n\n\n    const tests = [];\n    const medicines = [];\n    const units = [\"GRAMS\", \"MCG\", \"MG\", \"MG/ML\", \"ML\", \"NUM\", \"μm\", \"PERCENTAGE\",];\n    const frequecny = [\"30 Minutes Before Breakfast \", \"30 Minutes Before Dinner\", \"30 Minutes Before Food \", \"30 Minutes Before Lunch \", \"6 hr for fever > 100 f \", \"After Dinner\", \"After Food \", \"After Lunch \", \"As Directed \", \"Before Food \", \"Every fourth hourly \", \"For immediate use\", \"Four Times Daily\", \"Half a Day-Evening \", \"Half a Day-Evening and Noon \", \"Half a Day-Morning \", \"Half a Day-Morning and Evening \", \"Half a Day-Morning and Noon \", \"Half a Day-Noon \", \"Half tablet, thrice daily\", \"Hourly \", \"On Alternate Days\", \"On Empty Stomach\", \"Once Daily - Evening\", \"Once Daily - Morning\", \"Once Daily - Morning and Evening\", \"Once Daily - Night \", \"Once Daily - Noon\", \"Once a Month\", \"Once a Week \", \"SOS \", \"Thrice a Day\", \"Thrice Daily\", \"Thrice Weekly\", \"Twice a Day - Noon and Night\", \"Twice Daily \", \"Twice Daily - Morning and Evening\", \"Twice Daily - Morning and Night \", \"Twice Daily - Morning and Noon \", \"Twice Daily - Noon and Evening \", \"Twice Weekly\", \"Use when required\", \"With First Bite of Food \"]\n\n\n    function loadtest() {\n        axios.post(\"https://uat.c2mdr.com/c2mydrrestdemo/v1/c2mdapi/getbethanylabtest\", {\n            token: \"token\",\n            data: {\n                isFromMobile: true,\n                clinicId: \"Bethany\",\n                basicinfo: {\n                    doctorName: presciptioninfor.doctorName,\n                    registrationnumber: presciptioninfor.registrationnumber,\n                    qualification: presciptioninfor.qualification,\n                    patientname: presciptioninfor.patientname,\n                    gender: presciptioninfor.gender,\n                    age: presciptioninfor.age,\n                    appointmentdate: presciptioninfor.appointmentdate,\n                    appointmenttime: presciptioninfor.appointmenttime,\n                    patientNO: presciptioninfor.patientNO,\n                    doctorcode: presciptioninfor.doctorcode,\n                    appointmentID: presciptioninfor.appointmentID\n\n                }\n\n            },\n            requestType: 234,\n        })\n            .then((result) => {\n\n\n                result.data.data.map((obj2, key) => {\n\n                    tests.push(obj2.testname);\n\n                });\n                settest([...new Set(tests)]);\n\n\n\n            })\n            .catch((err) => {\n                // Do somthing\n            })\n    }\n    function onChange(date, dateString) {\n\n        setPrescriptioninfo({ ...presciptioninfor, lmp: dateString })\n    }\n\n    function loadmedicine() {\n\n        axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/getbethanymedicinelist\", {\n            token: \"token\",\n            data: {\n                type: \"DRUGS\",\n                clinicId: \"Bethany\",\n                basicinfo: {\n                    doctorName: presciptioninfor.doctorName,\n                    registrationnumber: presciptioninfor.registrationnumber,\n                    qualification: presciptioninfor.qualification,\n                    patientname: presciptioninfor.patientname,\n                    gender: presciptioninfor.gender,\n                    age: presciptioninfor.age,\n                    appointmentdate: presciptioninfor.appointmentdate,\n                    appointmenttime: presciptioninfor.appointmenttime,\n                    patientNO: presciptioninfor.patientNO,\n                    doctorcode: presciptioninfor.doctorcode,\n                    appointmentID: presciptioninfor.appointmentID\n\n                }\n\n            },\n            requestType: 233,\n        })\n            .then((result) => {\n\n\n\n\n                result.data.data.description.map((obj2, key) => {\n\n\n                    medicines.push(obj2);\n                });\n\n\n\n                setMedicine([...new Set(medicines)]);\n\n            })\n    }\n\n    const mm = [\"DRUGS\", \"tesdt\"];\n\n    let [labtest, setLabtest] = useState([\n        {\n            testType: \"\",\n            testNames: \"\",\n            comment: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in.\",\n            id: 3\n        }\n    ])\n\n\n\n    let addInvestigation = () => {\n\n        setActiveLeft(leftMenus[1].name)\n\n\n\n        if (investigationData.length <= 0) {\n\n            let newArray = [...investigationData, {\n                name: null,\n                comment: null,\n                id: investigationData.length\n            }]\n\n            dispatch({\n                type: UPDATE_INVESTIGATION_TABLE_DATA,\n                payload: newArray\n            });\n\n\n        }\n\n        else if (investigationData[investigationData.length - 1].name != null) {\n\n\n            let newArray = [...investigationData, {\n                name: null,\n                comment: null,\n                id: investigationData[investigationData.length - 1].id + 1\n            }]\n\n            dispatch({\n                type: UPDATE_INVESTIGATION_TABLE_DATA,\n                payload: newArray\n            });\n\n\n        }\n        else {\n\n            // notification.error({\n            //     message: `Investigation table is incomplete`,\n            //     description:\n            //         'Please fill the all fields in investigation table inorder to add new row.',\n            //     placement: \"bottomRight\",\n            // });\n\n        }\n\n\n    }\n\n\n\n    let removeInvestigation = (id) => {\n\n        setDeleteIndex(id)\n        setConfirmDelete(true)\n        setDeletingFrom(INVESTIGATION_HEAD)\n\n\n    }\n\n\n\n    let addMedicine = () => {\n\n        setActiveLeft(leftMenus[2].name)\n\n\n\n        if (medicinesData.length <= 0) {\n\n            let newArray = [...medicinesData, {\n                id: medicinesData.length,\n                type: null,\n                name: null,\n                when: null,\n                freequancy: null,\n                quantity: null,\n                unit: null,\n                date: null,\n                days: null,\n                instructions: null\n            }]\n\n            dispatch({\n                type: UPDATE_MEDICINE_TABLE_DATA,\n                payload: newArray\n            });\n\n            MedicineElement.current.scrollLeft = 0\n\n\n        }\n\n        else if (medicinesData[medicinesData.length - 1].name != null) {\n\n\n\n            let newArray = [...medicinesData, {\n                id: medicinesData[medicinesData.length - 1].id + 1,\n                type: null,\n                name: null,\n                when: null,\n                freequancy: null,\n                quantity: null,\n                unit: null,\n                date: null,\n                days: null,\n                instructions: null\n            }]\n\n            dispatch({\n                type: UPDATE_MEDICINE_TABLE_DATA,\n                payload: newArray\n            });\n\n            MedicineElement.current.scrollLeft = 0\n\n\n\n\n\n\n        }\n        else {\n\n            notification.error({\n                message: `Medicines table is incomplete`,\n                description:\n                    'Please fill the all fields in Medicines table inorder to add new row.',\n                placement: \"bottomRight\",\n            });\n\n\n        }\n\n\n\n\n    }\n\n    let removeMedicine = (id) => {\n\n        setDeleteIndexMedicine(id)\n        setConfirmDeleteMedicine(true)\n        setDeletingFrom(MEDICINE_HEAD)\n\n\n    }\n\n    var selectmedicine = []\n    var selectlabtest = []\n\n    let validateForSubmitButton = () => {\n\n        let result = validateFormData(submissionData, investigationData, medicinesData)\n        result ? setRedyToSubmit(true) : setRedyToSubmit(false)\n\n    }\n\n    useEffect(() => {\n        validateForSubmitButton()\n    }, [investigationData, medicinesData])\n\n\n\n    async function saveprescription() {\n\n\n        setLoading(true)\n\n        console.log(\"No value is missing. Ready to submit\");\n\n        console.log(\"Other basic informations (Also update included)==>\", submissionData);\n\n        console.log(\"Investigation Table Data (Also update included)==>\", investigationData);\n\n        console.log(\"Medicine Table Data (Also update included)==>\", medicinesData);\n\n\n\n\n        medicinesData.map((obj, key) => {\n\n            if (obj.name != null) {\n                selectmedicine.push({\n                    StartVal: obj.date !== null ? obj.date : \"\",\n                    StrengthVal: '',\n                    displayTablet: obj.freequancy != null ? obj.freequancy : \"\",\n                    isPermitted: false,\n                    measurement: obj.unit != null ? obj.unit : \"\",\n                    mediComment: obj.instructions != null ? obj.instructions : \"\",\n                    medtakeMethod: obj.when != null ? obj.when : \"\",\n                    name: obj.name,\n                    quandity: obj.quantity != null ? obj.quantity : \"\",\n                    totalDays: obj.days != null ? obj.days : \"\",\n                    type: \"DRUGS\"\n                })\n            }\n        });\n\n        investigationData.map(savedLabTest => {\n            if (savedLabTest.name != null) {\n                selectlabtest.push({\n                    testType: savedLabTest.name,\n                    testNames: \"\",\n                    testComment: savedLabTest.comment != null ? savedLabTest.comment : \"\"\n                })\n            }\n        })\n\n        setPrescriptioninfo({ ...presciptioninfor, medicine: selectmedicine })\n        setPrescriptioninfo({ ...presciptioninfor, labTest: selectlabtest })\n\n        let requestdata = {\n            attachementArrs: [],\n            consultationDetails: {\n                doctor_suggestion: \"\",\n                chiefcomplaints: submissionData.chiefComplaints != null ? submissionData.chiefComplaints : \"\",\n                diagnosis: submissionData.diagnosis != null ? submissionData.diagnosis : \"\",\n                investigation: submissionData.examination != null ? submissionData.examination : \"\",\n                notes: submissionData.releventPoint != null ? submissionData.releventPoint : \"\",\n                instruction: submissionData.additionalInstruction != null ? submissionData.additionalInstruction : \"\",\n                share: true,\n                privateMessage: \"\",\n                weight: submissionData.weight.value != null ? submissionData.weight.value + \" \" + submissionData.weight.unit : \"\",\n                height: submissionData.height.value != null ? submissionData.height.value + \" \" + submissionData.height.unit : \"\",\n                lmp: submissionData.lmp != null ? submissionData.lmp : \"\",\n                medicine: selectmedicine,\n                labTest: selectlabtest\n            },\n            basicinfo: {\n                doctorName: presciptioninfor.doctorName,\n                registrationnumber: presciptioninfor.registrationnumber,\n                qualification: presciptioninfor.qualification,\n                patientname: presciptioninfor.patientname,\n                gender: presciptioninfor.gender,\n                age: presciptioninfor.age,\n                appointmentdate: presciptioninfor.appointmentdate,\n                appointmenttime: presciptioninfor.appointmenttime,\n                patientNO: presciptioninfor.patientNO,\n                doctorcode: presciptioninfor.doctorcode,\n                appointmentID: presciptioninfor.appointmentID\n\n            }\n        }\n\n        let dummyParams = { \"token\": \"token\", \"data\": { \"prescriptionDetails\": { \"attachementArrs\": [], \"consultationDetails\": { \"doctor_suggestion\": \"\", \"chiefcomplaints\": \"CAME FOR FITNESS FOR WIDE LOCAL EXCISION OF LEFT BUCCAL MUCOSA\", \"diagnosis\": \"\", \"investigation\": \"BP 130/76 MM HG\\nRS AND CVS NAD\\nCBC 13.7/5500/254000 ESR 10 RBS 108\\nCREAT 0.8 INR 1.19 VM NR\\nECG NOTED HRCT CHEST NAD\\n2D ECHO EF 60%, MILD LVH\", \"notes\": \"HT ON TAZLOC H OD\\nNO H/O COVID\\nALLERGY TO MEDICINE NOT KNOWN\\nNON SMOKER\\nCOVID VACCINATION+\", \"instruction\": \"CAN GO AHEAD WITH SURGERY WITH DUE RISK\", \"share\": true, \"privateMessage\": \"\", \"weight\": \"\", \"height\": \"\", \"lmp\": \"\", \"medicine\": [], \"labTest\": [] }, \"basicinfo\": { \"doctorName\": \"DR. KULDEEP  DALAL\", \"registrationnumber\": \"2003/07/2759\", \"qualification\": \"M.D.(Gen.Med.), F.N.B.(Crit.Care), F.C.C.P.\", \"patientname\": \"MR. AJAY . RAJE\", \"gender\": \"Male\", \"age\": \"59\", \"appointmentdate\": \"21-Mar-2022\", \"appointmenttime\": \"11:45 AM\", \"patientNO\": \"1225133\", \"doctorcode\": \"128\", \"appointmentID\": \"883727\" } }, \"browserTimeZone\": \"\" }, \"browserTimeZone\": \"\", \"requestType\": 235 }\n\n\n        console.log(requestdata);\n\n        // try {\n        //     axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/saveprescription\", requestdata)\n        //         .then((result) => {\n\n        //             console.log(result);\n\n        //             if (result) {\n\n\n        //                 if (result.data.data.info === \"Updated Successfully\") {\n        //                     //   setSuccess(true)\n\n        //                     setLoading(false)\n        //                     // setSuccess(true)\n\n        //                     navigate(\"/success\");\n\n\n        //                     // setTimeout(function () {\n        //                     //     resetPage();\n        //                     // }, 3000);\n\n        //                 }\n        //                 else if(result.data.data.info===\"Prescription already Saved. No changes Found\") {\n\n        //                     //  setSuccess(false)\n        //                     setLoading(false)\n        //                     setFailed(true)\n\n        //                 }\n        //                 // console.log(result)\n        //             }\n        //             else {\n\n        //             }\n\n        //         })\n\n        // } catch (error) {\n\n        //     console.log(error);\n\n        // }\n        //       navigate(\"/c2mydrprescription/success\");\n\n        try {\n            axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/saveprescription\", {\n                token: \"token\",\n                data: {\n\n                    prescriptionDetails: requestdata,\n                    browserTimeZone: '',\n\n                },\n                browserTimeZone: '',\n                requestType: 235,\n            })\n                .then((result) => {\n\n                    console.log(result);\n\n                    if (result) {\n\n                        if (result.data.data.info === \"Updated Successfully\") {\n                            //   setSuccess(true)\n\n                            setLoading(false)\n                            // setSuccess(true)\n\n                            history.push(\"/success\");\n\n\n                            // setTimeout(function () {\n                            //     resetPage();\n                            // }, 3000);\n\n                        }\n                        else if (result.data.data.info === \"Prescription already saved. No changes found\") {\n\n                            //  setSuccess(false)\n                            setLoading(false)\n                            setFailed(true)\n\n                        }\n                        // console.log(result)\n                    }\n                    else {\n\n                    }\n\n                })\n\n        } catch (error) {\n\n            console.log(error);\n            setSuccess(true)\n        }\n\n\n\n\n\n\n\n\n\n    }\n\n    function handleChangeWeight(value) {\n        // console.log(`selected ${value}`);\n    }\n\n    let InvestigationTextAreaOnChange = ({ data, id }) => {\n\n        updateReduxSelect({\n            head: INVESTIGATION_HEAD,\n            id,\n            tittle: INVESTIGATION_TABLE_HEADING_COMMENTS,\n            value: data\n        })\n\n    }\n\n    let InvestigationNameOnChange = ({ data, id }) => {\n\n        updateReduxSelect({\n            head: INVESTIGATION_HEAD,\n            id,\n            tittle: INVESTIGATION_TABLE_HEADING_NAME,\n            value: data\n        })\n\n        // console.log(data, id);\n\n    }\n\n    let MedicineOnChange = ({ data, id, tittle }) => {\n\n        // console.log(data);\n\n        updateReduxSelect({\n            head: MEDICINE_HEAD,\n            id,\n            tittle,\n            value: data\n        })\n\n        console.log(data, id, tittle);\n\n    }\n\n\n    let updateReduxSelect = ({ head, id, tittle, value }) => {\n\n        //dispatch(UPDATE_REDUX_PRESCRIPTION({ head, id, tittle, value }))\n\n        dispatch({\n            type: UPDATE_REDUX_PRESCRIPTION,\n            payload: { head, id, tittle, value }\n        });\n\n\n    }\n\n\n    const MedicineElement = useRef();\n    const InvestigationElement = useRef();\n    const AddInstructionElement = useRef();\n    const ScrollElement = useRef();\n\n\n    let focusElement = (para_element) => {\n\n        console.log(InvestigationElement);\n\n        switch (para_element) {\n\n            case leftMenus[0].name:\n                ScrollElement.current.scrollTop = 0\n                break;\n\n            case leftMenus[1].name:\n                ScrollElement.current.scrollTop = InvestigationElement.current.offsetTop\n                break;\n\n            case leftMenus[2].name:\n                ScrollElement.current.scrollTop = MedicineElement.current.offsetTop\n                break;\n\n            case leftMenus[3].name:\n                AddInstructionElement.current.focus()\n                ScrollElement.current.scrollTop = 3000\n                break;\n\n            default:\n                break;\n        }\n\n    }\n\n\n    let onChangeSubmissiondata = (key, value) => {\n\n\n\n        if (key === \"additionalInstruction\") {\n            pointToSection(3)\n        }\n        else {\n            pointToSection(0)\n        }\n\n        dispatch({\n            type: SET_SUBMISSION_DATA_PRESCRIPTION,\n            payload: { [key]: value }\n        });\n\n        validateForSubmitButton()\n\n\n        //dispatch(setSubmissionData({ [key]: value }))\n\n    }\n\n    let onChangeSubmissiondataHeightWidth = (key, value) => {\n\n        pointToSection(0)\n\n        dispatch({\n            type: SET_SUBMISSION_DATA_PRESCRIPTION,\n            payload: { [key]: { ...submissionData[key], value } }\n        });\n\n\n        //dispatch(setSubmissionData({ [key]: { ...submissionData[key], value } }))\n\n    }\n\n    let onChangeSubmissiondataHeightWidthUnit = (key, unit) => {\n\n\n        // console.log(key, unit);\n        pointToSection(0)\n\n        dispatch({\n            type: SET_SUBMISSION_DATA_PRESCRIPTION,\n            payload: { [key]: { ...submissionData[key], unit } }\n        });\n        //dispatch(setSubmissionData({ [key]: { ...submissionData[key], unit } }))\n\n    }\n\n\n    let updateInvestigationTable = ({ id, data, key, state }) => {\n\n        pointToSection(1)\n        let newArray = JSON.parse(JSON.stringify(investigationData));\n        newArray[id][key] = data ? data : null\n        //dispatch(setInvestigationRedux(newArray))\n        dispatch({\n            type: UPDATE_INVESTIGATION_TABLE_DATA,\n            payload: newArray\n        });\n\n        validateForSubmitButton()\n\n    }\n\n    let updateMedicineTable = ({ id, data, key }) => {\n\n        // let newArray = medicinesList\n        // newArray[id].assign({ [key]: data })\n        // setMedicinesList(newArray)\n\n        pointToSection(2)\n        console.log(id, key, moment.isMoment(data) ? data.toDate() : data);\n\n\n        let newArray = JSON.parse(JSON.stringify(medicinesData));\n        console.log(newArray)\n        newArray[id][key] = data ? data : null\n\n        dispatch({\n            type: UPDATE_MEDICINE_TABLE_DATA,\n            payload: newArray\n        });\n        //dispatch(setMedicinesRedux(newArray))\n        validateForSubmitButton()\n\n\n\n    }\n\n\n    let resetPage = () => {\n\n        window.location.reload();\n\n\n    }\n\n    useEffect(() => {\n\n        if (medicinesData.length <= 1) {\n            MedicineElement.current.scrollLeft = 0\n        }\n\n    }, [medicinesData])\n\n\n    let pointToSection = (id) => {\n\n        setActiveLeft(leftMenus[id ? id : 0].name)\n    }\n\n    const classes = useStyles();\n\n\n    const noInvestigationPopOver = (\n        <div>\n            <div>Complete investigation table to add new row</div>\n        </div>\n    );\n\n\n    const noMedicinePopOver = (\n        <div>\n            <div>Complete medicines table to add new row</div>\n        </div>\n    );\n\n\n    let refreshPage = () => {\n        window.location.reload(true);\n    }\n\n\n    // LOAD LAST PRESCRIPTION Functionalities............................................................\n\n    let checkForLastPrescription = () => {\n\n        let params =\n        {\n            \"requestType\": \"1054\",\n            \"version\": 1,\n            \"data\": {\n                \"AppId\": \"89\",\n                \"doctorcode\": \"176\",\n                \"patientNO\": \"1003944\"\n            }\n        }\n\n        axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/preloadprescription\", params)\n            .then((result) => {\n\n                setPreloadPrescription(result.data.data?.prescriptionDetails)\n\n                console.log(result.data.data?.prescriptionDetails);\n\n\n            })\n\n    }\n\n    let populatePreloadData = () => {\n\n        console.log(preloadPrescription);\n\n        if (preloadPrescription) {\n\n            let dep_id = null\n\n            setSelectedDepartmentName(preloadPrescription?.department.Name)\n\n            dispatch({\n                type: SET_SELECTED_DEPARTMENT,\n                payload: preloadPrescription.department.Id\n            });\n\n\n            loadDoctors(preloadPrescription.department.Id, getElementArray(preloadPrescription?.doctors, \"Id\"))\n\n            // dispatch({\n            //     type: SET_SELECTED_DOCTORS,\n            //     payload: getElementArray(preloadPrescription?.doctors, \"Id\")\n            // });\n\n            setTemplateName(preloadPrescription.templateName)\n\n\n            setParams(\n                {\n                    ...params,\n                    patientname: preloadPrescription?.basicinfo?.patientname,\n                    age: preloadPrescription?.basicinfo?.age,\n                    gender: preloadPrescription?.basicinfo?.gender,\n                    patientno: preloadPrescription?.basicinfo?.patientNO\n                }\n            )\n\n            onChangeSubmissiondataHeightWidth(\"height\", preloadPrescription?.consultationDetails?.height)\n            onChangeSubmissiondataHeightWidth(\"weight\", preloadPrescription?.consultationDetails?.weight)\n\n            if (preloadPrescription?.consultationDetails?.lmp) { setSelectedLmp(preloadPrescription?.consultationDetails?.lmp) }\n\n            if (preloadPrescription?.consultationDetails?.chiefcomplaints) { onChangeSubmissiondata(\"chiefComplaints\", preloadPrescription?.consultationDetails?.chiefcomplaints) }\n\n            if (preloadPrescription?.consultationDetails?.notes) { onChangeSubmissiondata(\"releventPoint\", preloadPrescription?.consultationDetails?.notes) }\n\n            if (preloadPrescription?.consultationDetails?.diagnosis) { onChangeSubmissiondata(\"diagnosis\", preloadPrescription?.consultationDetails?.diagnosis) }\n\n            if (preloadPrescription?.consultationDetails?.investigation) { onChangeSubmissiondata(\"examination\", preloadPrescription?.consultationDetails?.investigation) }\n\n            //Investigation table population\n            if (preloadPrescription?.consultationDetails?.labTest && preloadPrescription?.consultationDetails?.labTest.length > 0) {\n\n\n                let newArray = []\n\n                preloadPrescription.consultationDetails.labTest.map((element, key) => {\n\n                    newArray.push({\n                        name: element.testType,\n                        comment: element.testComment,\n                        id: key\n                    })\n\n\n                })\n\n\n\n                //dispatch(setInvestigationRedux(newArray))\n                dispatch({\n                    type: UPDATE_INVESTIGATION_TABLE_DATA,\n                    payload: newArray\n                });\n            }\n\n            //Medicine table population\n            if (preloadPrescription?.consultationDetails?.medicine && preloadPrescription?.consultationDetails?.medicine.length > 0) {\n\n                let newArray = []\n\n                preloadPrescription?.consultationDetails?.medicine.map((element, key) => {\n\n                    newArray.push({\n                        id: key,\n                        type: element.type,\n                        name: element.name,\n                        when: element.medtakeMethod,\n                        freequancy: element.displayTablet,\n                        quantity: element.quandity,\n                        unit: element.measurement,\n                        date: element.StartVal,\n                        days: element.totalDays,\n                        instructions: element.mediComment\n                    })\n\n                })\n\n                //dispatch(setMedicinesRedux(newArray))\n                dispatch({\n                    type: UPDATE_MEDICINE_TABLE_DATA,\n                    payload: newArray\n                });\n\n            }\n\n            if (preloadPrescription?.consultationDetails?.instruction) { onChangeSubmissiondata(\"additionalInstruction\", preloadPrescription?.consultationDetails?.instruction) }\n\n\n\n\n        }\n\n\n\n    }\n\n\n\n    let clearPrepopulateddate = () => {\n\n        dispatch({ type: CLEAR_PRESCRIPTION })\n        setSelectedDepartmentName(null)\n        setTemplateName(\"\")\n\n\n    }\n\n\n\n    let loadDepartments = () => {\n\n        dispatch(getDepartments()).then((res) => {\n\n            console.log(res);\n            setDepartmentsArray(res)\n\n        })\n\n    }\n\n    let loadDoctors = (_id, selected) => {\n\n        dispatch(getDoctors({ department_id: _id })).then((res) => {\n\n            console.log(res);\n\n            dispatch({\n                type: SET_SELECTED_DOCTORS,\n                payload: selected ? selected : doctorObjectToArray(res)\n            });\n\n\n            dispatch({\n                type: SET_DOCTORS,\n                payload: res\n            });\n\n            setDoctors(res)\n\n        })\n\n    }\n\n\n    let departmentObjectToArray = (obj) => {\n\n        let result = []\n\n        if (obj) {\n            obj.map((element) => {\n\n                result.push(element.departmentName)\n\n            })\n        }\n\n        return result\n\n\n    }\n\n    let doctorObjectToArray = (obj) => {\n\n        let result = []\n\n        if (obj) {\n            obj.map((element) => {\n\n                result.push(element.doctorId)\n\n            })\n        }\n\n        return result\n\n\n    }\n\n\n\n    let handleDepartmentOnChange = (data) => {\n\n        console.log();\n\n        if (data.data) {\n\n            let dep_id = departmentsArray.filter((element) => element.departmentName == data.data)\n\n            dispatch({\n                type: SET_SELECTED_DEPARTMENT,\n                payload: dep_id[0]\n            });\n\n            setSelectedDepartmentName(dep_id[0].departmentName)\n\n            loadDoctors(dep_id[0].departmentId)\n\n        }\n        else {\n            console.log(\"Empty speciality..........\");\n\n            dispatch({\n                type: SET_SELECTED_DEPARTMENT,\n                payload: null\n            });\n\n            setSelectedDepartmentName(null)\n\n            dispatch({\n                type: SET_SELECTED_DOCTORS,\n                payload: []\n            });\n\n\n            dispatch({\n                type: SET_DOCTORS,\n                payload: []\n            });\n        }\n\n\n\n\n    }\n\n\n    let createPrescription = () => {\n\n\n        let submitStatus = validateForm()\n\n        setReadyToValidate({\n            templateName: true,\n            doctos: true,\n            department: true\n        })\n\n\n        if (submitStatus) {\n            setLoading(true)\n\n            let _selectlabtest = []\n\n            investigationData.map(savedLabTest => {\n                if (savedLabTest.name != null) {\n                    _selectlabtest.push({\n                        testType: savedLabTest.name,\n                        testNames: \"\",\n                        testComment: savedLabTest.comment != null ? savedLabTest.comment : \"\"\n                    })\n                }\n            })\n\n\n            let _selectmedicine = []\n\n            medicinesData.map((obj, key) => {\n\n                if (obj.name != null) {\n                    _selectmedicine.push({\n                        StartVal: obj.date !== null ? obj.date : \"\",\n                        StrengthVal: '',\n                        displayTablet: obj.freequancy != null ? obj.freequancy : \"\",\n                        isPermitted: false,\n                        measurement: obj.unit != null ? obj.unit : \"\",\n                        mediComment: obj.instructions != null ? obj.instructions : \"\",\n                        medtakeMethod: obj.when != null ? obj.when : \"\",\n                        name: obj.name,\n                        quandity: obj.quantity != null ? obj.quantity : \"\",\n                        totalDays: obj.days != null ? obj.days : \"\",\n                        type: \"DRUGS\"\n                    })\n                }\n            });\n\n\n\n            let dataToSubmit = {\n                data: {\n                    prescriptionDetails: {\n                        \"attachementArrs\": [],\n                        \"consultationDetails\": {\n                            \"doctor_suggestion\": \"\",\n                            chiefcomplaints: submissionData.chiefComplaints != null ? submissionData.chiefComplaints : \"\",\n                            diagnosis: submissionData.diagnosis != null ? submissionData.diagnosis : \"\",\n                            investigation: submissionData.examination != null ? submissionData.examination : \"\",\n                            notes: submissionData.releventPoint != null ? submissionData.releventPoint : \"\",\n                            instruction: submissionData.additionalInstruction != null ? submissionData.additionalInstruction : \"\",\n                            share: true,\n                            privateMessage: \"\",\n                            //weight: submissionData.weight.value != null ? submissionData.weight.value + \" \" + submissionData.weight.unit : \"\",\n                            //height: submissionData.height.value != null ? submissionData.height.value + \" \" + submissionData.height.unit : \"\",\n                            lmp: submissionData.lmp != null ? submissionData.lmp : \"\",\n                            labTest: _selectlabtest,\n                            medicine: _selectmedicine\n                        },\n                        basicinfo: {\n                            \"departmentId\": selectedDepartment?.departmentId,\n                            \"doctorIds\": selectedDoctors.toString(),\n                            \"templateName\": templateName\n                        }\n                    },\n                    \"browserTimeZone\": \"\"\n                },\n                \"browserTimeZone\": \"\",\n                // \"version\":\"2\",\n                \"requestType\": preloadData ? 1066 : 1061\n            }\n\n            if (preloadData) {\n                dataToSubmit.data.prescriptionDetails.basicinfo.templateId = preloadData.tempId\n\n            }\n\n            try {\n                axios.post(`https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/${preloadData ? \"updatetemplate\" : \"createtemplate\"}`, dataToSubmit)\n                    //  { headers: authHeader() })\n                    .then((result) => {\n\n                        console.log(result);\n\n                        setLoading(false)\n                        setSuccessMessage(result.data.data.info)\n                        setSuccess(true)\n\n                        setReadyToValidate({\n                            templateName: false,\n                            doctos: false,\n                            department: false\n                        })\n\n\n\n\n                    })\n\n\n\n\n            } catch (error) {\n\n                console.log(error);\n\n                setSuccess(true)\n            }\n\n\n        }\n        else {\n\n            ScrollElement.current.scrollTop = 0\n        }\n\n\n\n    }\n\n\n    let handleDoctorChange = (e) => {\n\n        console.log(e);\n\n        if (e) {\n            setDr(e)\n        }\n\n\n    }\n\n\n\n\n    let validateForm = () => {\n\n\n        let _validationError = {\n            department: null,\n            doctors: null,\n            templateName: null\n        }\n\n        //validate departmentName......................................\n        if (!selectedDepartmentName) {\n            _validationError.department = \"* Please select department.\"\n        }\n        else {\n\n            _validationError.department = null\n\n        }\n\n\n        //validate templateName......................................\n        if (!templateName) {\n\n            _validationError.templateName = \"* Template name can't be empty.\"\n        }\n        else {\n            _validationError.templateName = null\n        }\n\n\n        //validate doctors................................................\n        if (selectedDoctors.length <= 0) {\n\n            _validationError.doctors = \"*Please select doctors.\"\n        }\n        else {\n\n            _validationError.doctors = null\n        }\n\n\n\n        setvalidatoinError(_validationError)\n\n        if (_validationError.department || _validationError.doctors || _validationError.templateName) {\n            return false\n        }\n        else {\n            return true\n        }\n\n\n    }\n\n\n\n    useEffect(() => {\n\n        if (isreadyToValidate.templateName) {\n            if (!templateName) {\n\n                setvalidatoinError({ ...validationError, templateName: \"* Template name can't be empty.\" })\n                // _validationError.templateName = \"* Template name can't be empty.\"\n            }\n            else {\n                setvalidatoinError({ ...validationError, templateName: null })\n            }\n        }\n\n    }, [templateName])\n\n\n    useEffect(() => {\n\n        if (isreadyToValidate.templateName) {\n            if (selectedDoctors.length <= 0) {\n\n                setvalidatoinError({ ...validationError, doctors: \"*Please select doctors.\" })\n                // _validationError.templateName = \"* Template name can't be empty.\"\n            }\n            else {\n                setvalidatoinError({ ...validationError, doctors: null })\n            }\n        }\n\n    }, [selectedDoctors.length])\n\n    useEffect(() => {\n\n        if (isreadyToValidate.templateName) {\n            if (!selectedDepartmentName) {\n\n                setvalidatoinError({ ...validationError, department: \"* Please select department.\" })\n                // _validationError.templateName = \"* Template name can't be empty.\"\n            }\n            else {\n                setvalidatoinError({ ...validationError, department: null })\n            }\n        }\n\n    }, [selectedDepartmentName])\n\n\n\n\n\n\n    let EmptySpace = () => {\n        return (\n            <span>&nbsp;&nbsp;</span>\n        )\n    }\n\n    let getDepartmentNameFromId = (_id, searchArray) => {\n\n        let obj = searchArray.filter((element) => element.departmentId == _id)\n\n        setSelectedDepartmentName(obj[0]?.departmentName)\n\n\n\n    }\n\n    let getElementArray = (data, key) => {\n\n        let newArray = []\n\n        if (data) {\n            data.map((element) => {\n\n                newArray.push(element[key])\n\n            })\n\n            return newArray\n\n        }\n\n    }\n\n    let handleTemplateNameChange = (e) => {\n\n        setTemplateName(e.target.value)\n\n\n    }\n\n\n    console.log(preloadPrescription);\n\n    return (\n        <div className=\"prescription-form-main-container\">\n\n\n            <div className='prescription-form-container' style={{ width: \"100%\" }}>\n\n\n\n\n                <div className=\"prescription-form-content-container\">\n                    <div\n                        // onScroll={(e) => { setScrollAmount(e.target.scrollTop) }}\n                        className=\"prescription-form-content\" ref={ScrollElement}>\n\n\n\n\n\n                        <div className=\"container\">\n\n                        </div>\n\n                        <div style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"flex-start\",\n                            width: \"100%\",\n                            padding: \"1rem\",\n\n                            position: \"relative\",\n                            minWidth: \"100%\",\n                            flexWrap: \"wrap\"\n                        }}>\n\n\n\n                            <div></div>\n\n                            {/* Old name and other details......................................................................... */}\n\n                            {/* <ul onClick={() => { setActiveLeft(leftMenus[0].name) }} className='details-list'>\n\n                                <li>\n                                    <span className='form-caption'>PATIENT NAME</span>\n                                    <span className='form-small-tittle' >{params ? params.patientname : <span>&nbsp;</span>}</span>\n                                </li>\n\n                                <li>\n                                    <span className='form-caption'>AGE</span>\n                                    <span className='form-small-tittle'>{params ? params.age : <span>&nbsp;</span>} yrs</span>\n                                </li>\n\n                                <li>\n                                    <span className='form-caption'>GENDER</span>\n                                    <span className='form-small-tittle'>{params ? params.gender : <span>&nbsp;</span>}</span>\n                                </li>\n\n                                <li>\n                                    <span className='form-caption'>PATIENT NUMBER</span>\n                                    <span className='form-small-tittle'>{params ? params.patientno : <span>&nbsp;</span>}</span>\n                                </li>\n                            </ul> */}\n\n                            {/* Newly added dropdowns......................................................................... */}\n\n                            <ul className='report-list shadow-underline'>\n                                <li>\n                                    <div>\n                                        <span className='form-small-tittle' >Choose Speciality <span style={{ color: \"red\" }}>*</span> </span>\n                                        <span className='form-caption'></span>\n                                    </div>\n\n                                    <Tooltip getPopupContainer={trigger => trigger.parentNode} title={selectedDepartmentName}>\n                                        <div className={`form-light-background ${validationError.department ? \"form-error\" : null}`}>\n\n\n                                            <MuiAutoComplete\n                                                placeholder=\"Select speciality\"\n                                                // id={key}\n                                                isSpeciality\n                                                value={selectedDepartmentName}\n                                                data={departmentsArray.length > 0 ? departmentObjectToArray(departmentsArray) : []}\n                                                onChange={handleDepartmentOnChange}\n                                                name='name' />\n\n\n                                        </div>\n                                    </Tooltip>\n                                    <span className='prescription-form-error'>\n                                        {validationError.department ? validationError.department : <EmptySpace />}\n                                    </span>\n\n                                </li>\n\n                                <li>\n                                    <div>\n                                        <span className='form-small-tittle' >Choose Doctor <span style={{ color: \"red\" }}>*</span></span>\n                                        <span className='form-caption' ></span>\n                                    </div>\n\n                                    <div className={`form-light-background ${validationError.doctors ? \"form-error\" : null}`}>\n\n\n                                        {/* <MuiDropdown\n                                            style={{ width: \"227px\" }}\n                                            // value={submissionData.weight?.unit}\n                                            placeholder=\"Select doctor\"\n                                            data={['Data 1', 'Data 2', 'Data 3']}\n                                            name=\"\"\n                                        //onChange={onChangeSubmissiondataHeightWidthUnit}\n                                        /> */}\n                                        <AutoCompleteWithCheckbox\n                                            data={doctorsArray.length > 0 ? doctorObjectToArray(doctorsArray) : []}\n                                            setSelected={handleDoctorChange}\n                                        />\n\n\n                                    </div>\n\n                                    <span className='prescription-form-error'>\n                                        {validationError.doctors ? validationError.doctors : <EmptySpace />}\n                                    </span>\n\n\n\n                                </li>\n\n                                <li>\n                                    <div>\n                                        <span className='form-small-tittle' >Template Name <span style={{ color: \"red\" }}>*</span></span>\n                                        <span className='form-caption' ></span>\n                                    </div>\n\n                                    <div className={`form-light-background ${validationError.templateName ? \"form-error\" : \"form-ok\"}`}>\n                                        <input\n                                            value={templateName}\n                                            onChange={(e) => { handleTemplateNameChange(e) }}\n                                            type=\"text\"\n                                            className='form-input-text'\n                                            placeholder='Enter template name'\n                                            style={{ width: \"300px\" }}\n                                        />\n\n\n\n                                    </div>\n\n\n                                    <span className='prescription-form-error'>\n                                        {validationError.templateName ? validationError.templateName : <EmptySpace />}\n                                    </span>\n\n\n\n                                </li>\n\n\n\n\n\n                            </ul>\n\n\n\n                            <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Patient Reports</span>\n\n\n                            <div onClick={() => { setActiveLeft(leftMenus[0].name) }} className='report-list-container'>\n\n\n\n\n\n                                <div style={{ padding: \"0rem\", display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", marginTop: \"1rem\", width: \"100%\", justifyContent: \"space-between\" }}>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\" }}>\n                                        <span className='form-small-tittle' >Chief Complaints</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea\n                                                id=\"chiefComplaints\"\n                                                value={submissionData.chiefComplaints ? submissionData.chiefComplaints : \"\"}\n                                                className='form-input-text-area'\n                                                name=\"chiefcomplaints\"\n                                                placeholder=\"Type here\"\n                                                rows={4}\n                                                onChange={(e) => {\n                                                    // setPrescriptioninfo({ ...presciptioninfor, cheifcomplaints: e.target.value })\n                                                    onChangeSubmissiondata(e.target.id, e.target.value)\n                                                }} />\n                                        </div>\n                                    </div>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\", marginLeft: \"1rem\" }}>\n                                        <span className='form-small-tittle' >Relevant points from history</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea id=\"releventPoint\"\n                                                value={submissionData.releventPoint ? submissionData.releventPoint : \"\"}\n                                                className='form-input-text-area'\n                                                rows={4} placeholder=\"Type here\"\n                                                onChange={(e) => {\n                                                    // setPrescriptioninfo({ ...presciptioninfor, relevantpointfromhistory: e.target.value })\n                                                    onChangeSubmissiondata(e.target.id, e.target.value)\n                                                }} />\n                                        </div>\n                                    </div>\n\n                                </div>\n\n\n                                <div style={{ padding: \".0rem\", display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", marginTop: \"1rem\", width: \"100%\", justifyContent: \"space-between\" }}>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\" }}>\n                                        <span className='form-small-tittle' >Diagnosis or Provisional Diagnosis</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea value={submissionData.diagnosis ? submissionData.diagnosis : \"\"} id=\"diagnosis\" className='form-input-text-area' rows={4} placeholder=\"Type here\" onChange={(e) => {\n                                                // setPrescriptioninfo({ ...presciptioninfor, diagnosis: e.target.value })\n                                                onChangeSubmissiondata(e.target.id, e.target.value)\n                                            }} />\n                                        </div>\n                                    </div>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\", marginLeft: \"1rem\" }}>\n                                        <span className='form-small-tittle' >Examination/Lab Findings</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea id=\"examination\" value={submissionData.examination ? submissionData.examination : \"\"} className='form-input-text-area' rows={4} placeholder=\"Type here\" onChange={(e) => {\n                                                // setPrescriptioninfo({ ...presciptioninfor, examinationlabfindings: e.target.value })\n\n                                                onChangeSubmissiondata(e.target.id, e.target.value)\n                                            }} />\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                            </div>\n\n\n                            <div className=\"separator\"></div>\n\n                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\", width: \"99%\", }}>\n                                <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Investigations</span>\n\n                                {\n                                    isReadyToAddInvestigation ?\n\n\n                                        <button className={isReadyToAddInvestigation ? \"add-investigation-btn\" : \"add-investigation-btn-disabled\"} onClick={() => { addInvestigation() }}>\n                                            <AddIcon_Prescription /> {getAddInvestigationButtonText(investigationData.length)}\n                                        </button>\n\n\n                                        :\n\n                                        <Popover getPopupContainer={trigger => trigger.parentNode} trigger=\"click\" content={isReadyToAddInvestigation ? null : noInvestigationPopOver}>\n\n                                            <button className={isReadyToAddInvestigation ? \"add-investigation-btn\" : \"add-investigation-btn-disabled\"} onClick={() => { addInvestigation() }}>\n                                                <AddIcon_Prescription /> {getAddInvestigationButtonText(investigationData.length)}\n                                            </button>\n\n                                        </Popover>\n\n                                }\n\n                            </div>\n\n\n\n                            {finalInvestigations.length > 0 ?\n\n\n                                <table onClick={() => { setActiveLeft(leftMenus[1].name) }} ref={InvestigationElement} className='investigations-table'>\n\n                                    <tr>\n                                        <th><div>#</div></th>\n                                        <th><div>Investigation Name(s)</div></th>\n                                        <th colSpan=\"2\"><div>Comments/Instructions</div></th>\n\n                                    </tr>\n\n\n                                    {\n\n\n                                        finalInvestigations.map((obj, key) => {\n\n\n\n\n                                            return (\n\n                                                <tr>\n                                                    <td>{key + 1}</td>\n                                                    <td>\n                                                        <Select\n\n                                                            getPopupContainer={trigger => trigger.parentNode}\n                                                            style={{ position: \"absolute\" }}\n\n\n                                                            value={obj.name}\n\n\n                                                            optionFilterProp=\"children\"\n                                                            showSearch\n\n                                                            filterOption={(input, option) =>\n                                                                option.children.toLowerCase().startsWith(input.toLowerCase()) ? true : false\n                                                            }\n\n                                                            filterSort={(optionA, optionB) =>\n                                                                optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                                            }\n\n\n                                                            placeholder=\"Select investigation\"\n\n\n                                                            onChange={(e) => {\n\n                                                                // InvestigationNameOnChange({ data: e, id: obj.id })\n                                                                // setLabtest([...labtest, {\n                                                                //     testType: \"\",\n                                                                //     testNames: e,\n                                                                //     comment: \"\",\n                                                                //     id: key + 1\n                                                                // }])\n                                                                updateInvestigationTable({ data: e, id: key, key: \"name\", state: investigationData })\n\n\n                                                            }} >\n                                                            {\n                                                                test ? test.map((obj2, key) => {\n\n                                                                    return (\n                                                                        <Option value={obj2}>{obj2}</Option>\n                                                                    )\n\n\n                                                                }) : null\n                                                            }\n\n\n                                                        </Select>\n\n\n                                                        {/* <MuiAutoComplete\n                                                            placeholder=\"Select investigation\"\n                                                            id={key}\n                                                            value={obj.name}\n                                                            data={test ? test : []}\n                                                            onChange={test && updateInvestigationTable}\n                                                            name='name' /> */}\n                                                    </td>\n                                                    <td>\n\n\n\n                                                        <textarea\n\n                                                            rows={1}\n                                                            value={obj.comment ? obj.comment : \"\"}\n                                                            placeholder='Type here'\n                                                            className='investigations-input-text-area'\n                                                            onChange={(e) => { updateInvestigationTable({ data: e.target.value, id: key, key: \"comment\", state: investigationData }) }}\n                                                        //  onBlur={(e) => { InvestigationTextAreaOnChange({ data: e.target.value, id: obj.id }) }}\n                                                        />\n\n\n\n                                                    </td>\n\n                                                    <td>\n                                                        <div style={{ cursor: \"pointer\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent: \"center\" }} onClick={() => { removeInvestigation(key) }}> <DeleteIcon_Prescription /></div></td>\n                                                </tr>\n\n                                            )\n                                        })\n\n\n                                    }\n\n                                </table>\n\n                                :\n\n                                <div className=\"no-table-data\" ref={InvestigationElement}>\n                                    ( No Investigations found )\n                                </div>\n\n                            }\n\n                            <div className=\"separator\"></div>\n\n                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\", width: \"99%\", }}>\n\n                                <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Medicines</span>\n\n\n                                {\n                                    isReadtToAddMedicine.status ?\n\n\n                                        <button className={isReadtToAddMedicine.status ? 'add-investigation-btn' : 'add-investigation-btn-disabled'} onClick={addMedicine}> <AddIcon_Prescription />  Add Medicines</button>\n\n                                        :\n\n                                        <Popover getPopupContainer={trigger => trigger.parentNode} trigger=\"click\" content={noMedicinePopOver}>\n                                            <button className={isReadtToAddMedicine.status ? 'add-investigation-btn' : 'add-investigation-btn-disabled'} > <AddIcon_Prescription />  Add Medicines</button>\n                                        </Popover>\n\n\n                                }\n\n\n\n\n                            </div>\n\n\n                            {\n                                finalMedicinesdata.length > 0 ?\n\n                                    <div onClick={() => { setActiveLeft(leftMenus[2].name) }} ref={MedicineElement} className='medicine-table-container'>\n\n\n\n                                        <table\n                                            className='medicine-table'>\n\n                                            <tr>\n                                                <th><div>#</div></th>\n                                                {/* <th><div>Medicine Type</div></th> */}\n                                                <th><div>Name of Medicine</div></th>\n                                                <th><div>When to have</div></th>\n                                                <th><div>Frequency</div></th>\n                                                <th><div>Quantity</div></th>\n                                                <th><div>Unit</div></th>\n                                                <th><div>Starting Date</div></th>\n                                                <th><div>No.of Days</div></th>\n                                                <th colspan=\"2\"><div>Instructions</div></th>\n\n                                            </tr>\n\n\n\n                                            {\n\n\n                                                finalMedicinesdata.map((obj, key) => {\n\n                                                    return (\n\n                                                        <tr>\n                                                            <td>{key + 1}</td>\n                                                            {/* <td>\n\n                                                                DRUGS\n\n                                                            </td> */}\n                                                            <td>\n\n                                                                {\n\n                                                                    <Select\n\n                                                                        getPopupContainer={trigger => trigger.parentNode}\n                                                                        value={obj.name}\n\n\n                                                                        optionFilterProp=\"children\"\n                                                                        showSearch\n\n                                                                        filterOption={(input, option) =>\n                                                                            option.children.toLowerCase().startsWith(input.toLowerCase()) ? true : false\n                                                                        }\n\n                                                                        filterSort={(optionA, optionB) =>\n                                                                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                                                        }\n\n\n                                                                        placeholder=\"Select medicine\"\n                                                                        onChange={(e) => { updateMedicineTable({ data: e, id: key, key: \"name\", state: medicinesData }) }}\n                                                                        name='name'\n\n\n                                                                    // onChange={(e) => {\n\n                                                                    //     // InvestigationNameOnChange({ data: e, id: obj.id })\n                                                                    //     // setLabtest([...labtest, {\n                                                                    //     //     testType: \"\",\n                                                                    //     //     testNames: e,\n                                                                    //     //     comment: \"\",\n                                                                    //     //     id: key + 1\n                                                                    //     // }])\n                                                                    //     updateInvestigationTable({ data: e, id: key, key: \"name\", state: investigationData })\n\n\n                                                                    // }}\n                                                                    >\n                                                                        {\n                                                                            medicine ? medicine.map((obj2, key) => {\n\n                                                                                return (\n                                                                                    <Option value={obj2}>{obj2}</Option>\n                                                                                )\n\n                                                                            }) : null\n                                                                        }\n\n\n                                                                    </Select>\n\n\n\n                                                                    // <MuiAutoComplete\n                                                                    //     placeholder=\"Select medicine\"\n                                                                    //     id={key}\n                                                                    //     value={obj.name}\n                                                                    //     data={medicine ? medicine : []}\n                                                                    //     onChange={updateMedicineTable}\n                                                                    //     name='name' />\n\n\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                {\n\n                                                                    <Select\n\n                                                                        getPopupContainer={trigger => trigger.parentNode}\n\n                                                                        value={obj.when}\n\n                                                                        optionFilterProp=\"children\"\n\n                                                                        placeholder=\"When to have\"\n\n                                                                        onChange={(e) => { updateMedicineTable({ data: e, id: key, key: \"when\", state: medicinesData }) }}\n                                                                        name='name'\n\n                                                                    >\n                                                                        {\n                                                                            ['Before Food', 'After Food', 'SOS'].map((obj2, key) => {\n\n                                                                                return (\n                                                                                    <Option value={obj2}>{obj2}</Option>\n                                                                                )\n\n                                                                            })\n                                                                        }\n\n\n                                                                    </Select>\n\n                                                                    // <MuiDropdown\n                                                                    //     placeholder=\"When to have\"\n                                                                    //     id={key}\n                                                                    //     data={['Before Food', 'After Food', 'SOS']}\n                                                                    //     name=\"when\"\n                                                                    //     value={obj.when}\n                                                                    //     onChange={updateMedicineTable}\n                                                                    //     isMedTable\n                                                                    // />\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                {\n\n                                                                    <Select\n\n                                                                        getPopupContainer={trigger => trigger.parentNode}\n                                                                        value={obj.freequancy}\n\n\n                                                                        optionFilterProp=\"children\"\n                                                                        showSearch\n\n                                                                        filterOption={(input, option) =>\n                                                                            option.children.toLowerCase().startsWith(input.toLowerCase()) ? true : false\n                                                                        }\n\n                                                                        filterSort={(optionA, optionB) =>\n                                                                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                                                        }\n\n\n                                                                        placeholder=\"Select frequency\"\n                                                                        onChange={(e) => { updateMedicineTable({ data: e, id: key, key: \"freequancy\", state: medicinesData }) }}\n                                                                        name='name'\n\n\n                                                                    // onChange={(e) => {\n\n                                                                    //     // InvestigationNameOnChange({ data: e, id: obj.id })\n                                                                    //     // setLabtest([...labtest, {\n                                                                    //     //     testType: \"\",\n                                                                    //     //     testNames: e,\n                                                                    //     //     comment: \"\",\n                                                                    //     //     id: key + 1\n                                                                    //     // }])\n                                                                    //     updateInvestigationTable({ data: e, id: key, key: \"name\", state: investigationData })\n\n\n                                                                    // }}\n                                                                    >\n                                                                        {\n                                                                            frequecny ? frequecny.map((obj2, key) => {\n\n                                                                                return (\n                                                                                    <Option value={obj2}>{obj2}</Option>\n                                                                                )\n\n                                                                            }) : null\n                                                                        }\n\n\n                                                                    </Select>\n\n\n                                                                    // <MuiDropdown\n                                                                    //     value={obj.freequancy}\n                                                                    //     placeholder=\"Select frequency\"\n                                                                    //     id={key}\n                                                                    //     data={frequecny ? frequecny : []}\n                                                                    //     name=\"freequancy\"\n                                                                    //     onChange={updateMedicineTable}\n                                                                    //     isMedTable\n                                                                    // />\n\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                <input\n                                                                    value={obj.quantity ? obj.quantity : \"\"}\n                                                                    onKeyPress={validateNumberOnKeyPress}\n                                                                    placeholder='Enter quantity'\n                                                                    type=\"text\"\n                                                                    className='investigations-input-text-input'\n                                                                    onChange={(e) => updateMedicineTable({ data: e.target.value, id: key, key: \"quantity\" })} />\n\n\n                                                            </td>\n\n                                                            <td>\n\n                                                                {/* \n                                                                <MuiDropdown\n                                                                    value={obj.unit}\n                                                                    placeholder=\"Select unit\"\n                                                                    id={key}\n                                                                    data={units ? units : []}\n                                                                    name=\"unit\"\n                                                                    onChange={updateMedicineTable}\n                                                                    isMedTable\n                                                                /> */}\n\n                                                                <Select\n\n                                                                    getPopupContainer={trigger => trigger.parentNode}\n                                                                    value={obj.unit}\n\n\n                                                                    optionFilterProp=\"children\"\n                                                                    showSearch\n\n                                                                    filterOption={(input, option) =>\n                                                                        option.children.toLowerCase().startsWith(input.toLowerCase()) ? true : false\n                                                                    }\n\n                                                                    filterSort={(optionA, optionB) =>\n                                                                        optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                                                    }\n\n\n                                                                    placeholder=\"Select unit\"\n                                                                    onChange={(e) => { updateMedicineTable({ data: e, id: key, key: \"unit\", state: medicinesData }) }}\n                                                                    name='name'\n\n\n                                                                // onChange={(e) => {\n\n                                                                //     // InvestigationNameOnChange({ data: e, id: obj.id })\n                                                                //     // setLabtest([...labtest, {\n                                                                //     //     testType: \"\",\n                                                                //     //     testNames: e,\n                                                                //     //     comment: \"\",\n                                                                //     //     id: key + 1\n                                                                //     // }])\n                                                                //     updateInvestigationTable({ data: e, id: key, key: \"name\", state: investigationData })\n\n\n                                                                // }}\n                                                                >\n                                                                    {\n                                                                     units ? units.map((obj2, key) => {\n\n                                                                            return (\n                                                                                <Option value={obj2}>{obj2}</Option>\n                                                                            )\n\n                                                                        }) : null\n                                                                    }\n\n\n                                                                </Select>\n\n\n                                                            </td>\n                                                            <td>\n\n\n                                                                <MuiDatePicker\n\n                                                                    placeholder=\"Select date\"\n                                                                    minDate={new Date()}\n                                                                    id={key}\n                                                                    name=\"date\"\n                                                                    _value={obj.date}\n                                                                    onChange={updateMedicineTable}\n                                                                    isMedTable\n                                                                />\n                                                            </td>\n                                                            <td>\n                                                                {\n\n                                                                    // <MuiDropdown\n                                                                    //     value={obj.days}\n                                                                    //     placeholder=\"Select days\"\n                                                                    //     id={key}\n                                                                    //     data={getNumberOfDays(120)}\n                                                                    //     name=\"days\"\n                                                                    //     onChange={updateMedicineTable}\n                                                                    //     isMedTable\n                                                                    // />\n\n                                                                    <Select\n\n                                                                    getPopupContainer={trigger => trigger.parentNode}\n                                                                    value={obj.days}\n\n\n                                                                    optionFilterProp=\"children\"\n                                                                    showSearch\n\n\n\n                                                                    placeholder=\"Select days\"\n                                                                    onChange={(e) => { updateMedicineTable({ data: e, id: key, key: \"days\", state: medicinesData }) }}\n                                                                    name='days'\n\n\n                                                                // onChange={(e) => {\n\n                                                                //     // InvestigationNameOnChange({ data: e, id: obj.id })\n                                                                //     // setLabtest([...labtest, {\n                                                                //     //     testType: \"\",\n                                                                //     //     testNames: e,\n                                                                //     //     comment: \"\",\n                                                                //     //     id: key + 1\n                                                                //     // }])\n                                                                //     updateInvestigationTable({ data: e, id: key, key: \"name\", state: investigationData })\n\n\n                                                                // }}\n                                                                >\n                                                                    {\n                                                                        \n                                                                        daysCount&&daysCount.length>0?daysCount.map((obj2, key) => {\n\n                                                                            return (\n                                                                                <Option value={obj2}>{obj2}</Option>\n                                                                            )\n\n                                                                        }) :null\n                                                                    }\n\n\n                                                                </Select>\n\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                <textarea\n                                                                    value={obj.instructions ? obj.instructions : \"\"}\n                                                                    defaultValue={obj.instructions} className='medicine-table-input-text-area' rows={1} placeholder='Type here' onChange={(e) => {\n                                                                        updateMedicineTable({ data: e.target.value, id: key, key: \"instructions\" })\n                                                                    }} />\n                                                            </td>\n                                                            <td><div style={{ cursor: \"pointer\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent: \"center\" }} onClick={() => { removeMedicine(obj.id) }}><DeleteIcon_Prescription /></div></td>\n\n                                                        </tr>\n\n                                                    )\n                                                })\n\n\n\n\n                                            }\n\n\n\n\n\n                                        </table>\n\n                                    </div>\n\n                                    : <div className=\"no-table-data\" ref={MedicineElement}>\n                                        ( No Medicines found )\n                                    </div>\n                            }\n\n\n\n\n\n\n\n\n\n                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\", width: \"99%\", }}>\n\n                                <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Additional Instructions</span>\n\n                            </div>\n\n                            <div onClick={() => { setActiveLeft(leftMenus[3].name) }} className='form-light-background' style={{ width: \"45%\" }}>\n                                <textarea value={submissionData.additionalInstruction ? submissionData.additionalInstruction : \"\"} ref={AddInstructionElement} className='form-input-text-area' rows={3} placeholder='Type here' style={{ width: \"100%\" }} onChange={(e) => {\n                                    onChangeSubmissiondata(\"additionalInstruction\", e.target.value)\n                                }} />\n                            </div>\n\n\n\n                            {/* <input className='focusPoint' ref={AddInstructionElement} type=\"text\" name=\"\" id=\"\" /> */}\n\n\n\n\n                            <br></br>\n                            <br></br>\n                            <br></br>\n                            <br></br>\n                            <br></br>\n\n                            <div> &nbsp;</div>\n\n\n\n\n\n\n                        </div>\n                    </div>\n\n\n                </div>\n\n\n            </div>\n            <Modal deletingFrom={deletingFrom} state={isConfirmDelete} setState={setConfirmDelete} data={investigationData} removeIndex={deleteIndex} />\n            <Modal deletingFrom={deletingFrom} state={isConfirmDeleteMedicine} setState={setConfirmDeleteMedicine} data={medicinesData} removeIndex={deleteIndexMedicine} />\n            <SuccessModal clearData={clearPrepopulateddate} isPreload={preloadData} setEditMode={setEditMode} state={isSuccess} setState={setSuccess} successMessage={successMessage} />\n            <FailiureModal state={isFailed} setState={setFailed} />\n            <LoaderModel state={isLoading} />\n            {/* <NetworkErrorModal state={isNetworkError} setState={setNetworkError} refresh={refreshPage} /> */}\n\n            {\n                isReadyToSubmit ?\n\n                    <div className=\"button-container\">\n                        <button disabled={isLoading} onClick={() => { createPrescription() }} className={isLoading ? 'save-rescription-btn-disabled' : 'save-rescription-btn'} > <LabelIcon_Prescription />  {preloadData ? \"UPDATE\" : \"SAVE\"} TEMPLATE</button>\n                    </div> : null\n            }\n        </div >\n    )\n}\n\nexport default PriscriptionForm\n","import { Pagination, Popover, Tooltip } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DatePicker, Space } from 'antd';\nimport './prescriptiontemplatelist.css'\n// import { FETCH_MIS_REPORT, GET_DASHBOARD_MORE } from '../../Redux/Slice/DetailedReportSlice';\nimport { INTERBRANCH_MODAL } from '../../actions/type';\nimport { FETCH_ADMIN_DASHBOARD_REPORT, FETCH_DASHBOARD_MORE } from '../../actions/InterbranchAdminActions';\nimport { separaetdateAndTime } from '../../Helpers/dateFunctions';\nimport { BackArrow, EditIcon, ViewIcon } from '../../assets/Logos/Icons';\nimport { getDepartments, getTemplateList } from '../../actions/PrescriptionFormActions';\nimport PrescriptionForm from '../PrescriptionForm/PriscriptionForm'\nimport { useHistory, useLocation } from 'react-router-dom';\nimport EmptyTableData from '../Common/EmptyTableData/EmptyTableData';\n\n\nconst { RangePicker } = DatePicker;\n\nfunction TemplateList() {\n\n    const dispatch = useDispatch()\n    const dateRef = useRef(null)\n\n    let dashboardData = useSelector(state => state.interbranchAdmin.dashboardTable)\n\n\n    let [isOpen, setOpen] = useState(false)\n    let [pagination, setPagination] = useState(0)\n\n\n\n\n\n\n\n\n    //Version 2 ...................................................................................\n\n    let [templateList, setTemplateList] = useState([])\n    let [templateTotalPage, setTemplateTotalPage] = useState(0)\n    let [isEditMode, setEditMode] = useState(false)\n\n    let [searchKey, setSearchKey] = useState(null)\n    let [filterData, setFilterData] = useState([])\n\n    let history = useHistory()\n    const location = useLocation();\n\n\n    useEffect(() => {\n\n        dispatch(getTemplateList({ offset: 0 })).then((res) => {\n\n            setTemplateList(res.data)\n            setTemplateTotalPage(res.total)\n        })\n\n    }, [])\n\n\n    useEffect(() => {\n\n        dispatch(getTemplateList({ offset: pagination })).then((res) => {\n\n            setTemplateList(res.data)\n            setTemplateTotalPage(res.total)\n        })\n\n    }, [isEditMode])\n\n\n    let handlePaginationChange = (e, s) => {\n\n        dispatch(getTemplateList({ offset: e - 1 })).then((res) => {\n\n            setTemplateList(res.data)\n            setTemplateTotalPage(res.total)\n            setPagination(e - 1)\n\n        })\n\n        // dispatch(FETCH_ADMIN_DASHBOARD_REPORT({ offset: e - 1 }))\n\n        // if (pagination < dashboardData.length) {\n        //     setPagination(pagination + 10)\n        // }\n\n    }\n\n\n    let handleEditOnClick = (rowData, element) => {\n\n        setEditMode({ ...rowData,templateName:element?.tempName, tempId: element.tempId, departmentName: element.assignedDepartments, doctors: element.Doctors, department: element.Departments[0] })\n        //console.log(rowData);\n\n    }\n\n    let handleViewOnClick = (rowData, tempId) => {\n\n\n        let url = `viewprescription/${rowData.basicinfo.templateId}`\n\n        console.log(url);\n        console.log(rowData);\n\n        window.open(url, \"_blank\")\n        // history.push({\n        //     pathname:`viewprescription/:${rowData.basicinfo.templateName}`,\n        //     state:{rowData,tempId}\n        // })\n    }\n\n    let convertToArray = (data) => {\n\n        if (data) {\n            return data.split(\",\")\n        }\n\n    }\n\n    let convertStringWithSpace = (data) => {\n\n        let array = data.split(\",\")\n        let newArray = []\n\n\n        array.map((element) => {\n            newArray.push(`${element}  `)\n        })\n\n        return newArray.toString()\n    }\n\n    useEffect(() => {\n        setFilterData(templateList)\n    }, [templateList])\n\n    useEffect(() => {\n\n        handleSearch(searchKey ? searchKey : null)\n\n    }, [searchKey])\n\n    let handleSearch = (value) => {\n\n        let oldData = templateList\n\n        if (value && value != \"\") {\n\n\n            let filteredData = oldData.filter((element) => {\n\n                if (element.tempId.includes(value.toString())) {\n                    return true\n                }\n\n                if (element.tempName.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n\n                if (element.Departments[0].Name.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n\n                if (element.createdDate.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n\n                if (element.updatedDate.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n                // if (element.doctorname.toLowerCase().includes(value.toString().toLowerCase())) {\n                //     return true\n                // }\n            })\n\n            setFilterData(filteredData)\n        }\n        else {\n            console.log(\"No search key...\");\n            setFilterData(templateList ? templateList : [])\n        }\n\n    }\n\n\n\n\n\n    const Content = ({ data }) => {\n\n\n        return (\n            <div className='view-prescription-doctor-list-container-small'>\n\n                <ul>\n                {\n                    data.split(\",\")?.length > 0 ?\n\n                        data.split(\",\").map((element, key) => {\n                            return (\n                                <>\n                                    <li>{element}{key > data.split(\",\").length - 2 ? \"\" : \"\"} </li>\n                                </>\n\n                            )\n                        })\n\n                        : null\n                }\n                </ul>\n                \n            </div>\n        )\n    }\n\n\n    let [isLoading, setIsLoading] = useState(false)\n\n    useEffect(() => {\n\n        console.log(\"Start loading....................\");\n        setIsLoading(true)\n\n    }, [])\n\n    useEffect(() => {\n\n        if (filterData.length > 0) {\n\n            console.log(\"Stop loading....................\");\n            setIsLoading(false)\n        }\n        if (filterData.length < 0) {\n\n            console.log(\"Stop loading....................\");\n            setIsLoading(false)\n        }\n\n    }, [filterData])\n\n\n    return (\n        <div className='appontment-history-container'>\n\n            {/* {\n                !isEditMode ?\n\n                    <div className=\"search-container\">\n                        <input value={searchKey} onChange={(e) => { setSearchKey(e.target.value) }} type=\"text\" name=\"\" id=\"\" placeholder='Search' />\n                    </div> : null\n            } */}\n\n            {\n                isEditMode ?\n\n                    <div style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        width: \"100%\"\n                    }}>\n                        <div style={{ marginBottom: \".8rem\", marginTop: \".8rem\", cursor: \"pointer\", width: \"fit-content\" }} onClick={() => { setEditMode(null) }}>\n                            <BackArrow size={14} />\n                            <b style={{ marginLeft: \".5rem\" }}>Back</b>\n                        </div>\n\n                        <PrescriptionForm\n                            setEditMode={setEditMode}\n                            preloadData={isEditMode} />\n                    </div>\n\n\n                    :\n                    <div className=\"todays_report_table_container\">\n\n                        <table className='appoinment-table' >\n                            <thead>\n                                <tr>\n                                    <th>Template ID</th>\n                                    <th>Template Name</th>\n                                    <th>Speciality</th>\n                                    <th>Created On</th>\n                                    <th><div className='center'>Last Updated On</div></th>\n                                    {/* <th>Template Files</th> */}\n                                    <th>Assigned To</th>\n                                    {/* \n                        <th>Fees Paid</th>\n                        <th>Consultation Status</th>\n                        <th>Next Steps</th> */}\n                                    <th><div className='center'>Edit</div></th>\n                                    <th><div className='center'>View</div></th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n\n                                {\n\n                                    filterData.length > 0 ? filterData.map((element, key) => {\n\n                                        return (\n\n                                            <tr>\n                                                <td>{element.tempId}</td>\n                                                <td>{element.tempName}</td>\n                                                <td>{element.Departments[0]?.Name}</td>\n                                                <td>{element.createdDate}</td>\n                                                <td><div className='center'>{element.updatedDate ? element.updatedDate : \"No Data Available\"}</div></td>\n                                                <td>{element.assignedDoctors ?\n                                                    convertToArray(element.assignedDoctors).length > 1 ?\n\n                                                        <Popover content={<Content data={element?.assignedDoctors} />} title={`Doctors list (${element?.assignedDoctors.split(\",\").length})`}>\n                                                            {convertToArray(element.assignedDoctors)[0]}, +{convertToArray(element.assignedDoctors).length - 1}\n                                                        </Popover>\n                                                        : convertStringWithSpace(element.assignedDoctors)\n                                                    : \"No Data Available\"}</td>\n                                                <td><div className=\"edit-btn center\" onClick={(() => { handleEditOnClick(element.tempData, element) })}><EditIcon /></div></td>\n                                                {/* <td><div className=\"edit-btn\" onClick={() => { handleViewOnClick(element.tempData, element.tempId) }}><ViewIcon /></div></td> */}\n                                                <td><a className='center' href={\"viewprescription/\" + element.tempId} target=\"_blank\"><ViewIcon /></a></td>\n                                            </tr>\n\n                                        )\n\n                                    })\n                                        : <tr>\n                                            <td colSpan={7}>\n                                                <EmptyTableData isLoading={isLoading} />\n                                            </td>\n                                        </tr>\n                                }\n\n\n\n\n                                {/* {\n                            dashboardData ?\n                                dashboardData.length > 0 ?\n\n                                    dashboardData.map((eachRow, key) => {\n\n                                        if (key <= 10) {\n                                            return (\n\n                                                <tr>\n                                                    <td>{eachRow.appointmentId}</td>\n                                                    <td>{separaetdateAndTime(eachRow.appointmentdate)?.date}</td>\n                                                    <td>{separaetdateAndTime(eachRow.appointmentdate)?.time} GMT+05:30</td>\n                                                    <td>{eachRow.patientname}</td>\n                                                    <td>{eachRow.doctorname}</td>\n                                                    <td>{eachRow.fees}</td>\n                                                    <td>{eachRow.appointmentStatus}</td>\n                                                    <td>{eachRow.followupdetails}</td>\n                                                    <td ><button onClick={() => { handleTableClick(eachRow.appointmentId) }} className='more-btn' >More</button></td>\n\n                                                </tr>\n\n                                            )\n\n                                        }\n\n\n\n\n\n                                    })\n\n                                    : null\n                                : null */}\n                                {/* } */}\n\n\n                            </tbody>\n                        </table>\n\n                    </div>\n            }\n\n\n            <div className=\"pagination-container-mis-report\">\n                &nbsp;\n                <Pagination onChange={handlePaginationChange} defaultCurrent={1} total={templateTotalPage ? templateTotalPage * 10 : 0} />\n            </div>\n\n        </div>\n    )\n}\n\nexport default TemplateList\n","import React from 'react'\nimport { CompletedGreen } from '../../../../assets/Logos/Icons'\nimport './syncsuccessmodal.css'\n\nfunction SyncSuccessModal({ state, setState, onOk }) {\n\n    let handleOk = () => {\n\n        onOk&&onOk()\n        setState(false) \n        \n    }\n\n\n    return (\n\n        <>\n            {state ?\n\n                <div className=\"modal-loader syncsuccessmodal\" >\n                    <div className=\"modal-body-prescription body\">\n\n                        <div className=\"modal-content-prescription content\">\n                            <CompletedGreen />\n                            <span className='syncsuccessmodal-message'>Data updated successfully</span>\n                        </div>\n\n                        <div onClick={handleOk} className=\"syncsuccessmodal-footer\">\n                            OK\n                        </div>\n\n\n                    </div>\n\n\n\n\n                </div> : null}\n        </>\n\n    )\n}\n\nexport default SyncSuccessModal\n","import { DatePicker, Modal, Pagination, Popover, Tooltip } from 'antd';\nimport React, { useRef, useState, useEffect } from 'react'\nimport moment from \"moment\"\nimport './prescriptiondashboard.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport StatusBadge from '../Badges/StatusBadge/StatusBadge';\nimport { FETCH_ADMIN_DASHBOARD_REPORT, FETCH_ADMIN_DETAILED_REPORT, FETCH_DASHBOARD_MORE, FETCH_DETAILED_MORE, updateMisReportComment } from '../../actions/InterbranchAdminActions';\nimport { INTERBRANCH_MODAL } from '../../actions/type';\nimport { convertDateToString } from '../../Helpers/dateFunctions';\nimport { FETCH_PR_ADMIN_DASHBOARD_REPORT, pushToHisCall, syncLabAndMedicine } from '../../actions/PrescriptionFormActions';\nimport CustomeModal from '../CustomeModal/CustomeModal';\nimport SyncSuccessModal from '../PrescriptionForm/Components/SyncSuccessModal/SyncSuccessModal';\nimport EmptyTableData from '../Common/EmptyTableData/EmptyTableData';\n\n\nconst { RangePicker } = DatePicker;\n\nfunction PrescriptionDashboard() {\n\n    const dateRef = useRef(null)\n    const { crDashboard, crDashboardTotal, isLoading, isFresh } = useSelector((state) => state.presctiptionFormReducer)\n\n    let [isOpen, setOpen] = useState(false)\n    let [searchKey, setSearchKey] = useState(null)\n    let [filterData, setFilterData] = useState([])\n    let [isSyncing, setSyncing] = useState(false)\n    let [syncSuccess, setSyncSuccess] = useState(false)\n\n    let [_isSyncing, _setSyncing] = useState(false)\n    let [_syncSuccess, _setSyncSuccess] = useState(false)\n    let [individualSync, setIndividualSync] = useState(null)\n\n    let [pagination, setPagination] = useState(0)\n    let [dateRange, setDaterange] = useState({ fromDate: \"\", toDate: \"\" })\n    let [selectedRange, setSelectedrange] = useState(null)\n\n    let [isInitialLoading, setInitialLoading] = useState(true)\n\n\n    useEffect(() => {\n\n        if (isFresh) {\n            setSelectedrange(null)\n        }\n\n    }, [isFresh])\n\n\n\n\n    const dispatch = useDispatch()\n\n    let handleTableClick = (_id) => {\n\n        dispatch(FETCH_DETAILED_MORE(_id))\n\n        dispatch({\n            type: INTERBRANCH_MODAL,\n            payload: {\n                name: \"misReportModal\",\n                value: true\n            }\n        });\n\n\n\n    }\n\n    let filterOnClick = () => {\n\n        setOpen(!isOpen)\n\n    }\n\n    let handledateChange = (e) => {\n\n\n        setSelectedrange(e)\n\n        if (e) {\n            let [startDate, endDate] = e\n\n            let prevDate = moment().subtract(3, 'months')\n\n            console.log(convertDateToString(prevDate));\n\n            console.log({ fromDate: startDate, toDate: endDate });\n\n            setDaterange({ fromDate: startDate, toDate: endDate })\n\n            dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({ fromDate: startDate, toDate: endDate }))\n\n            // if (startDate < prevDate) {\n\n            //     Modal.confirm({\n            //         title: 'Confirm',\n            //         // icon: <ExclamationCircleOutlined />,\n            //         content: 'You can only view report within a 3 month span. Do you want to download the report before 3 months?',\n            //         okText: 'Download Report',\n            //         cancelText: 'cancel',\n            //         onOk() {\n            //             downloadReport(startDate, endDate)\n            //         },\n            //     });\n            // }\n            // else {\n\n            //     // dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({ fromDate: startDate, toDate: endDate }))\n\n            //     // dispatch(FETCH_ADMIN_DETAILED_REPORT({ fromDate: startDate, toDate: endDate }))\n            //     //downloadReport(startDate, endDate)\n            // }\n\n        }\n        else {\n            dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT())\n\n        }\n\n        // pp dashboards\n    }\n\n    let downloadReport = (startDate, endDate) => {\n\n        console.log(\"Ready to download report................\");\n\n    }\n\n\n    //dashboard\n    useEffect(() => {\n        setFilterData(crDashboard?.prescriptionlist ? crDashboard?.prescriptionlist : [])\n    }, [crDashboard])\n\n\n    useEffect(() => {\n\n        if (crDashboard?.prescriptionlist) {\n            handleSearch(searchKey ? searchKey : null)\n        }\n\n\n    }, [searchKey])\n\n\n    let handleSearch = (value) => {\n\n        let oldData = crDashboard?.prescriptionlist\n\n        if (value && value != \"\") {\n            console.log(\"Have search key...\", value.length);\n\n            let filteredData = oldData.filter((element) => {\n\n                if (element.appointmentID.includes(value.toString())) {\n                    return true\n                }\n\n                if (element.patientName.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n                if (element.doctorname.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n            })\n\n            setFilterData(filteredData)\n        }\n        else {\n            console.log(\"No search key...\");\n            setFilterData(crDashboard.prescriptionlist ? crDashboard.prescriptionlist : [])\n        }\n\n    }\n\n    let handleDownloadClick = (link) => {\n\n        if (link) {\n            window.open(link, \"_blank\")\n        }\n\n    }\n\n    let syncTM = () => {\n\n        if (!isSyncing) {\n\n            console.log(\"Start sync\");\n            setSyncing(true)\n\n            dispatch(syncLabAndMedicine()).then((res) => {\n\n                setSyncing(false)\n                console.log(res);\n                setSyncSuccess(true)\n\n            })\n\n\n        }\n\n    }\n\n\n    let pushToHis = (_id) => {\n\n        if (!_isSyncing) {\n\n            setIndividualSync(_id)\n            console.log(\"Start sync individual\");\n            _setSyncing(true)\n\n            dispatch(pushToHisCall(_id)).then((res) => {\n\n                _setSyncing(false)\n                console.log(res);\n                setSyncSuccess(true)\n\n            })\n\n\n        }\n\n    }\n\n    let reloadData = () => {\n\n        dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({ ...dateRange, offset: pagination }))\n\n    }\n\n    let handlePaginationChange = (e, s) => {\n\n        dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({ ...dateRange, offset: e - 1 })).then((res) => {\n\n            setPagination(e - 1)\n\n        })\n\n        // dispatch(FETCH_ADMIN_DASHBOARD_REPORT({ offset: e - 1 }))\n\n        // if (pagination < dashboardData.length) {\n        //     setPagination(pagination + 10)\n        // }\n\n    }\n\n\n    useEffect(() => {\n\n        // console.log(\"dashboard loading..........................\");\n        dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT())\n\n    }, [])\n\n\n    let HisPushPopup = ({ sendTime, receiveTime }) => {\n\n        return (\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <span><b>Sent Time :</b> {sendTime ? sendTime : \"-\"}</span>\n                <span><b>Received Time :</b> {receiveTime != \" \" ? receiveTime : \"HIS has not received this file\"}</span>\n            </div>\n        )\n\n    }\n\n\n\n    return (\n        <div className='mis_report_container'>\n\n            <div className=\"header\">\n\n                <button className='header_button' onClick={syncTM}>\n\n                    <div className={`icon ${isSyncing ? \"rotate\" : \"\"}`}><i class=\"far fa-sync\"></i></div>{isSyncing ? \"Syncing...\" : \"Sync Lab Test & Medicine\"}</button>\n\n                <div className=\"filter-button\" >\n\n                    <div className=\"icon\" onClick={filterOnClick}><i class=\"far fa-calendar-alt\"></i></div>\n\n\n                    <RangePicker\n                        value={selectedRange}\n                        style={{ width: \"250px\" }}\n                        // open={isOpen}\n                        getPopupContainer={trigger => trigger.parentElement}\n                        inputReadOnly\n                        format=\"DD-MMM-YYYY\"\n                        ref={dateRef}\n                        bordered={false}\n                        className=\"date-picker\"\n                        suffixIcon={null}\n                        // disabledDate={(current) => {\n                        //     return moment().add(-3, 'month') >= current\n                        //     // ||\n                        //     //  moment().add(1, 'month')  <= current;\n                        // }}\n                        onChange={handledateChange} />\n                </div>\n\n\n            </div>\n\n\n            <div className='mis_report_table_container'>\n\n                {/* <div className=\"search-container\">\n                    <input value={searchKey} onChange={(e) => { setSearchKey(e.target.value) }} type=\"text\" name=\"\" id=\"\" placeholder='Search' />\n                </div> */}\n\n\n                <table className='appoinment-table clinic-dashboard-table'>\n                    <tr>\n                        <th>App Id</th>\n                        <th className='patient-name-head'>Patient</th>\n                        <th>Doctor</th>\n                        <th>App Date & Time</th>\n                        {/* <th>Appointment Time</th> */}\n                        <th>Prescription</th>\n                        {/* <th>Send Time</th>\n                        <th>Received Time</th> */}\n                        <th>Sync Status</th>\n                        {/* <th>Consultation Status</th>\n                        <th>Payment Status</th>\n                        <th>Notes</th> */}\n\n                    </tr>\n\n                    <tbody>\n\n                        {\n\n\n\n\n                            filterData.length > 0 ? filterData.map((element, key) => {\n\n                                return (\n\n                                    <tr>\n                                        <td>\n                                            {element.appointmentID}\n\n                                        </td>\n                                        <td >{element.patientName}</td>\n                                        <td>{element.doctorname}</td>\n                                        <td>{`${element.appointmentDate}, ${element.appointmentTime}`}</td>\n                                        <td>\n                                            <div onClick={() => { handleDownloadClick(element.prescriptionFile) }} className=\"link-style\">Download</div>\n                                        </td>\n                                        <td >\n                                            <Popover content={<HisPushPopup sendTime={element.createdat} receiveTime={element.Responsetime} />}>\n                                                <div style={{\n                                                    display: \"flex\",\n                                                    flexDirection: \"row\",\n                                                    alignItems: \"center\"\n                                                }}>\n                                                    <div className=\"prescription_sync_status_indicator \">\n                                                        <div className={`${element.pushstatus === \"true\" ? \"completed\" : \"pending\"}`}></div>\n                                                    </div>\n\n                                                    &nbsp; &nbsp;\n\n                                                    {\n                                                        element.pushstatus == \"true\" ? \"\" :\n\n                                                            individualSync == element.id && _isSyncing ?\n                                                                <div className={`icon rotate`}><i class=\"far fa-sync\"></i></div> :\n                                                                <span onClick={() => { pushToHis(element.id) }} className=\"link-style\">Push to HIS</span>\n                                                    }\n                                                </div>\n                                            </Popover>\n                                        </td>\n                                    </tr>\n\n                                )\n\n                            })\n\n\n                                : <tr>\n                                    <td colSpan={6}>\n                                        <EmptyTableData marginTop={200} isLoading={isLoading} />\n                                    </td>\n                                </tr>\n                        }\n\n\n\n                    </tbody>\n                </table>\n\n            </div>\n\n\n            <div className=\"pagination-container-mis-report\">\n\n                &nbsp;\n                <Pagination showSizeChanger={false} onChange={handlePaginationChange} defaultCurrent={1} total={crDashboardTotal ? crDashboardTotal * 10 : 0} />\n            </div>\n\n\n\n            <SyncSuccessModal onOk={reloadData} state={syncSuccess} setState={setSyncSuccess} />\n\n        </div>\n    )\n}\n\nexport default PrescriptionDashboard","import ConsolidatedReport from \"../../components/ConsolidatedReport/ConsolidatedReport\";\n//import Misreport from \"../../components/MisReport/Misreport\";\n import PrescriptionDashboard from \"../../components/PrescriptionDashboard/prescriptionDashboard\";\nimport PriscriptionForm from \"../../components/PrescriptionForm/PriscriptionForm\";\n//import TodaysReport from \"../../components/TodaysReport/TodaysReport\";\nimport TemplateList from \"../../components/PrescriptionTemplateList/prescriptionTemplateList\";\nimport TodaysReport from \"../../components/TodaysReport/TodaysReport\";\n\nexport const prescriptionAdminSideMenu=[\n    // {\n    //     tittle:\"Dashboard\",\n    //     options:[\n    //         {\n    //             name:\"Dashboard\",\n    //             ico:<i class=\"fal fa-book-medical\"></i>,\n            \n    //             component:<prescriptionTemplateList/>,\n    //             date:\"10, February, 2021 - Wednesday\"\n    //         },\n           \n            \n    //     ]\n    // },\n    {\n        tittle:\" Template\",\n        options:[\n            // {\n            //     name:\"Today's Report\",\n            //     ico:<i class=\"fal fa-book-medical\"></i>,\n            //     component:<TodaysReport/>,\n            //     date:\"10, February, 2021 - Wednesday\"\n            // },\n            {\n                name:\"Create Template\",\n                ico:<i class=\"far fa-file-alt\"></i>,\n                component:<PriscriptionForm/>\n\n            },\n            {\n                name:\"Edit / View\",\n                ico:<i class=\"far fa-calendar-alt\"></i>,\n                component:<TemplateList/>\n\n            },\n           \n            \n        ]\n    },\n    \n    \n]\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from \"react-router\";\nimport { FETCH_ADMIN_DASHBOARD_REPORT, FETCH_ADMIN_DETAILED_REPORT, FETCH_CONSOLIDATED_REPORTS } from '../../actions/InterbranchAdminActions'\nimport CustomeModal from '../../components/CustomeModal/CustomeModal'\nimport MisReportModalContent from '../../components/MisReportModal/MisReportModalContent'\n//import TodaysReport from '../../components/TodaysReport/TodaysReport'\nimport TodaysReportModalContent from '../../components/TodaysReportModalContent/TodaysReportModalContent'\nimport TemplateList from \"../../components/PrescriptionTemplateList/prescriptionTemplateList\";\nimport PrescriptionDashboard from \"../../components/PrescriptionDashboard/prescriptionDashboard\";\nimport { TittleCard } from '../../components/Styled/TittleCard'\nimport { logoutAction } from \"../../actions/LoginAction\";\nimport { prescriptionAdminSideMenu } from './constants'\nimport '../InterbranchAdmin/interbranchadminhome.css'\nimport { SET_CR_DASHBOARD } from '../../actions/type';\nimport { FETCH_PR_ADMIN_DASHBOARD_REPORT } from '../../actions/PrescriptionFormActions';\nimport { LogoutSVG } from '../../assets/Logos/Icons';\n\nfunction Index() {\n\n    //Declerations..............................................................................\n    let dispatch = useDispatch()\n    let history = useHistory()\n\n//.............\n\n\n    //States....................................................................................\n    let [activeLeft, setActiveleft] = useState({ menu: \"dashboard\", option: 0 })\n\n    const { ApointmentHistoryModal, ViewFileModal, deleteFileModel, commonDeleteModal, PatientDetailsModal, todaysReportModal, misReportModal } = useSelector((state) => state.interbranchModal)\n\n\n\n\n    //Refs......................................................................................\n    const ref = useRef(null)\n\n    const userData = useSelector(\n        (state) => state.login.user\n    );\n    //Functions................................................................................\n\n    useEffect(() => {\n\n        dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT())\n\n    }, [])\n\n    let logoutFunction = () => {\n\n        dispatch(\n            logoutAction(userData)\n        );\n\n        history.push(\"home\")\n\n    }\n\n\n    return (\n        <div className='interbranch-container'>\n            <div className=\"left-container\" >\n\n                <div className=\"letf-top\">\n                    <div className=\"header-card\" style={{ marginBottom: \"2.5rem\" }}>\n                        <TittleCard className=\"d-flex flex-column justify-content-center align-items-center mt-2\" style={{ \n                            width: \"100%\",\n                             height: \"79.14px\",\n                             color:\"rgba(0, 0, 0, 0.85)\"\n                            \n                              }}>\n\n                            <div className=\"dr-name-home text-center w-100\" style={{ fontWeight: \"500\" }} >{userData ? userData.profileName : \"---\"}</div>\n                            <div className=\"dr-id-home text-center w-100\" style={{ fontWeight: \"500\" }}>ID: {userData ? userData.profileId : \"---\"}</div>\n                        </TittleCard>\n                    </div>\n\n                    <div className=\"tittle\" onClick={() => { \n                         dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT())\n                        setActiveleft({ menu: \"dashboard\", option: 0 }) }} style={{ fontWeight: activeLeft.menu == \"dashboard\" ? \"bold\" : \"normal\", cursor: \"pointer\" }} >Dashboard</div>\n\n\n                    {\n                        prescriptionAdminSideMenu.map((object, menuKey) => {\n\n                            if (object.tittle !== \"Dashboard\") {\n                                return (\n\n                                    <React.Fragment key={menuKey}>\n\n                                        <div className=\"list-tittle\">{object.tittle}</div>\n\n                                        <ul className='side-nav'>\n\n                                            {\n                                                object.options.map((element, optionKey) => {\n                                                    return (\n                                                        <li key={optionKey} className={activeLeft.menu === menuKey && activeLeft.option === optionKey ? \"active\" : null} onClick={() => {\n                                                            setActiveleft({ menu: menuKey, option: optionKey })\n                                                            // dispatch(setSelectedAppointmentRedux(null))\n\n                                                        }}>\n                                                            <div className=\"icon\">\n                                                                {element.ico}\n                                                            </div>\n                                                            <div className=\"text\">{element.name}</div>\n                                                        </li>\n                                                    )\n                                                })\n                                            }\n\n\n                                        </ul>\n\n\n                                    </React.Fragment>\n\n                                )\n                            }\n\n                        })\n                    }\n\n                    <div className=\"header-card logout\" style={{ marginTop: \"2.5rem\", coursor: \"pointer !important\" }} onClick={logoutFunction}>\n                        <div className=\"icon\"><LogoutSVG/></div>\n                        SIGN OUT\n                    </div>\n\n                    {/* <div className=\"tittle list-tittle\" onClick={() => { setActiveleft({ menu: \"consolidated\", option: 0 }) }} style={{ fontWeight: activeLeft.menu == \"consolidated\" ? \"500\" : \"normal\", cursor: \"pointer\" }} >Consolidate Report</div> */}\n                </div>\n\n\n\n\n\n\n            </div>\n\n            <div className=\"right-container\" ref={ref}>\n                <div className=\"header-card\">\n                    <span>\n                        {\n                            activeLeft.menu == \"dashboard\" ? \"Dashboard\" : activeLeft.menu == \"consolidated\" ? \"Consolidated\"\n                                : prescriptionAdminSideMenu[activeLeft.menu].options[activeLeft.option].name\n                        }\n                    </span>\n\n                    <span className='caption'>\n                        {/* {getTodayDateStringForHeader()} */}\n                        &nbsp;\n                    </span>\n                </div>\n\n\n\n                <div className=\"right-menu-container\">\n\n                    <CustomeModal\n                        width={700}\n                        state={todaysReportModal}\n                        modalName=\"todaysReportModal\"\n                        component={<TodaysReportModalContent />}\n                        isRight\n                    />\n\n\n\n                    <CustomeModal\n                        width={700}\n                        state={misReportModal}\n                        modalName=\"misReportModal\"\n                        component={<MisReportModalContent />}\n                        isRight\n                    />\n\n                    {/* <CustomeModal\n                        state={ApointmentHistoryModal}\n                        modalName=\"ApointmentHistoryModal\"\n                        component={<AppointmentHistoryModalContent />}\n                        isRight\n                    />\n\n                   \n\n                    <CustomeModal\n                        width={700}\n                        state={misReportModal}\n                        modalName=\"misReportModal\"\n                        component={<MisReportModalContent />}\n                        isRight\n                    />\n\n\n                    <CustomeModal\n                        state={PatientDetailsModal}\n                        modalName={PATIENT_DETAILS_MODAL_NAME}\n                        component={<PatientDetailsModalContent />}\n                        isRight\n                    />\n\n                    <CustomeModal\n\n                        state={ViewFileModal}\n                        modalName=\"ViewFileModal\"\n                        component={<ViewFileModalComponent name=\"ViewFileModal\" />}\n\n\n                    />\n\n                    <CustomeModal\n                        state={deleteFileModel}\n                        modalName=\"deleteFileModel\"\n                        component={<DeleteFileModelComponent name=\"ViewFileModal\" />}\n                    />\n\n                    <CustomeModal\n                        state={commonDeleteModal}\n                        modalName=\"commonDeleteModal\"\n                        component={<CommonDeleteModalBody />}\n                    /> */}\n\n                    <div className=\"container_interbranch\">\n\n                        {\n\n                            activeLeft.menu == \"dashboard\" ? <PrescriptionDashboard /> :\n                                //  activeLeft.menu == \"consolidated\" ? <ConsolidatedReport /> :\n\n                                prescriptionAdminSideMenu[activeLeft.menu].options[activeLeft.option].component ?\n                                    prescriptionAdminSideMenu[activeLeft.menu].options[activeLeft.option].component : null\n\n\n\n                        }\n\n\n\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default Index"],"names":["getFromLocalStorage","key","localStorage","getItem","TittleCard","styled","USER_DATA","ADMIN_USER","CLINIC_ADMIN_USER","INVESTIGATION_HEAD","MEDICINE_HEAD","state","setState","data","removeIndex","setData","deletingFrom","useSelector","presctiptionFormReducer","investigationData","medicinesData","dispatch","useDispatch","className","onClick","newResult","filter","element","console","log","type","UPDATE_INVESTIGATION_TABLE_DATA","payload","id","UPDATE_MEDICINE_TABLE_DATA","removeData","successMessage","isPreload","setEditMode","clearData","style","width","display","flexDirection","justifyContent","includes","validateNumberOnKeyPress","event","which","target","value","length","preventDefault","validateInvestigationTable","table_data","result","status","error","name","comment","validateMedicinetable","when","freequancy","quantity","unit","date","days","instructions","getAddInvestigationButtonText","PuffLoader","color","loading","size","InputBase","theme","marginTop","spacing","borderRadius","position","backgroundColor","palette","background","paper","border","fontSize","textAlign","padding","transition","transitions","create","fontFamily","join","borderColor","useStyles","makeStyles","textOverflow","root","transform","inputRoot","paddingLeft","margin","noBorder","customTextField","opacity","whiteSpace","overflow","onChange","placeholder","isSpeciality","classes","selected","React","filterOptions","createFilterOptions","matchFrom","stringify","option","useEffect","Autocomplete","popoverProps","minWidth","e","values","options","renderInput","params","TextField","InputProps","input","minHeight","cursor","isMedTable","maxDate","minDate","_value","setValue","menu","convertDate","para_date","dateObj","Date","month","getMonth","String","getDate","padStart","getFullYear","M","utils","DateFnsUtils","overlay","trigger","helperText","autoOk","disableUnderline","variant","moment","newValue","disableToolbar","format","props","other","setSelected","Select","useState","selectedDoctors","doctorsList","para_data","_options","i","push","label","doctorName","doctorId","createOptionObject","SET_SELECTED_DOCTORS","getPopupContainer","parentNode","mode","maxTagCount","quantityRoot","outline","selectRoot","icon","selectPaper","Option","preloadData","backAction","useHistory","finalInvestigations","setFinalInvestigation","finalMedicinesdata","setFinalMedicinesdata","JSON","parse","setParams","templateName","doctos","department","isreadyToValidate","setReadyToValidate","submissionData","selectedDataInvestigation","selectedDataMedicines","selectedDepartment","leftMenus","UserOutlined","FileSearchOutlined","MedicineBoxOutlined","PlusCircleOutlined","setNetworkError","_params","setActiveLeft","isConfirmDelete","setConfirmDelete","deleteIndex","setDeleteIndex","isConfirmDeleteMedicine","setConfirmDeleteMedicine","deleteIndexMedicine","setDeleteIndexMedicine","setDeletingFrom","isSuccess","setSuccess","setSuccessMessage","isFailed","setFailed","test","settest","medicine","setMedicine","height","weight","lmp","cheifcomplaints","relevantpointfromhistory","diagnosis","examinationlabfindings","additionalinstrunction","doctorname","registrationnumber","qualification","patientname","gender","age","appointmentdate","appointmenttime","patientNO","patientno","doctorcode","appointmentID","labTest","presciptioninfor","isReadyToSubmit","setRedyToSubmit","isReadtToAddMedicine","setReadytoAddMedicine","isReadyToAddInvestigation","setReadytoAddInvestigation","isLoading","setLoading","setSelectedLmp","preloadPrescription","departmentsArray","setDepartmentsArray","selectedDepartmentName","setSelectedDepartmentName","doctorsArray","setDoctors","setDr","setTemplateName","doctors","validationError","setvalidatoinError","max","getNumberOfDays","daysCount","axios","token","clinicId","basicinfo","requestType","then","description","map","obj2","medicines","Set","isFromMobile","tests","testname","catch","err","loadDepartments","populatePreloadData","clearPrepopulateddate","process","validateMedicineTableForAddNewRow","validateInvestigationtableForAddNewRow","units","frequecny","testType","testNames","addInvestigation","newArray","validateForSubmitButton","reports","investigationtableData","medicineTableData","chiefComplaints","releventPoint","additionalInstruction","examination","validateFormData","MedicineElement","useRef","InvestigationElement","AddInstructionElement","ScrollElement","onChangeSubmissiondata","pointToSection","SET_SUBMISSION_DATA_PRESCRIPTION","onChangeSubmissiondataHeightWidth","updateInvestigationTable","updateMedicineTable","toDate","current","scrollLeft","noInvestigationPopOver","noMedicinePopOver","Name","SET_SELECTED_DEPARTMENT","Id","loadDoctors","getElementArray","consultationDetails","chiefcomplaints","notes","investigation","testComment","medtakeMethod","displayTablet","quandity","measurement","StartVal","totalDays","mediComment","instruction","CLEAR_PRESCRIPTION","getDepartments","res","_id","getDoctors","department_id","doctorObjectToArray","SET_DOCTORS","obj","validateForm","_validationError","EmptySpace","ref","alignItems","flexWrap","title","departmentName","departmentObjectToArray","dep_id","departmentId","handleTemplateNameChange","rows","marginLeft","content","colSpan","optionFilterProp","showSearch","filterOption","children","toLowerCase","startsWith","filterSort","optionA","optionB","localeCompare","notification","message","placement","colspan","onKeyPress","defaultValue","disabled","submitStatus","_selectlabtest","savedLabTest","_selectmedicine","StrengthVal","isPermitted","dataToSubmit","prescriptionDetails","share","privateMessage","toString","templateId","tempId","info","scrollTop","createPrescription","DatePicker","interbranchAdmin","dashboardTable","pagination","setPagination","templateList","setTemplateList","templateTotalPage","setTemplateTotalPage","isEditMode","searchKey","filterData","setFilterData","useLocation","getTemplateList","offset","total","convertToArray","split","convertStringWithSpace","array","handleSearch","filteredData","tempName","Departments","createdDate","updatedDate","Content","setIsLoading","marginBottom","assignedDoctors","rowData","assignedDepartments","Doctors","handleEditOnClick","tempData","href","EmptyTableData","s","defaultCurrent","onOk","RangePicker","dateRef","crDashboard","crDashboardTotal","isFresh","isOpen","setOpen","isSyncing","setSyncing","syncSuccess","setSyncSuccess","_isSyncing","_setSyncing","individualSync","setIndividualSync","fromDate","dateRange","setDaterange","selectedRange","setSelectedrange","prescriptionlist","oldData","patientName","FETCH_PR_ADMIN_DASHBOARD_REPORT","HisPushPopup","sendTime","receiveTime","syncLabAndMedicine","class","parentElement","inputReadOnly","bordered","suffixIcon","startDate","endDate","prevDate","subtract","convertDateToString","appointmentDate","appointmentTime","link","prescriptionFile","window","open","createdat","Responsetime","pushstatus","pushToHisCall","showSizeChanger","prescriptionAdminSideMenu","tittle","ico","component","history","activeLeft","setActiveleft","interbranchModal","todaysReportModal","ApointmentHistoryModal","ViewFileModal","deleteFileModel","commonDeleteModal","PatientDetailsModal","misReportModal","userData","login","user","fontWeight","profileName","profileId","object","menuKey","optionKey","coursor","logoutAction","CustomeModal","modalName","TodaysReportModalContent","isRight","MisReportModalContent"],"sourceRoot":""}