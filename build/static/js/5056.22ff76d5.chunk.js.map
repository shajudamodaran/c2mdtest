{"version":3,"file":"static/js/5056.22ff76d5.chunk.js","mappings":"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","sources":["Helpers/localStorageHelper.js","actions/LoginAction.js","actions/auth-header.js","actions/PrescriptionFormActions.js","components/Styled/TittleCard.jsx","constants/const.js","components/PrescriptionForm/Helpers/Constants.js","components/PrescriptionForm/Components/Modal/Modal.jsx","components/PrescriptionForm/Components/SuccessModel/SuccessModal.jsx","components/PrescriptionForm/Helpers/helperFunctions.js","components/PrescriptionForm/Components/LoaderModel/LoaderModel.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiSelect.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiAutoComplete.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiDropdown.jsx","components/PrescriptionForm/Components/CustomeComponents/MuiDatePicker.jsx","components/PrescriptionForm/Components/FailiureModal/FailiureModal.jsx","components/PrescriptionForm/Components/CustomeComponents/AutoCompleteWithCheckbox.jsx","components/PrescriptionForm/PriscriptionForm.jsx","components/PrescriptionTemplateList/prescriptionTemplateList.jsx","components/PrescriptionForm/Components/SyncSuccessModal/SyncSuccessModal.jsx","components/PrescriptionDashboard/prescriptionDashboard.jsx","pages/PriscriptionCr/constants.js","pages/PriscriptionCr/Index.jsx"],"sourcesContent":["\nexport const getFromLocalStorage = async (key) =>{\n\n   return localStorage.getItem(key);\n\n}","import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport axios from \"axios\";\nimport { LOGIN_SUCCESS_ACTION, LOG_OUT_ACTION, UPDATE_LOGIN } from \"./type\";\nimport { ADMIN_USER, BETHANY_CLINIC_ID } from \"../constants/const\";\nimport { CLINIC_ADMIN_USER } from \"../constants/const\";\nconst qs = require('qs')\nconst FormData = require('form-data');\n\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nconst { detect } = require(\"detect-browser\");\nconst browser = detect();\n\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nexport const loginAction =\n  ({\n    loginType,\n    userName,\n    accessCountry,\n    password,\n    history,\n    backupData,\n    setDrSign,\n  }) =>\n  async (dispatch) => {\n    let resp = await loginedApi.post(\"getcountrycode\", {\n      token: \"token\",\n      version: \"2.0\",\n      data: { browserTimeZone: `GMT${formatTime}` },\n      requestType: 1058,\n    });\n    const doctorscountrycode = resp.data.data;\n\n    console.log(backupData);\n    var hash = CryptoJS.SHA512(\"C2MD|\" + password);\n    // var hash = CryptoJS.SHA512(password);\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        clinicId: \"20\",\n        deviceId: \"\",\n        appname: \"C2MD Patient\",\n        hashPassword: hash.toString(CryptoJS.enc.Base64),\n        password: hash.toString(),\n        loginType: loginType,\n        userName: userName,\n        browserTimeZone: `GMT${formatTime}`,\n        Ipaddress: doctorscountrycode.Ipaddress,\n        useragent: userAgent,\n        Browser: browser.name + \" \" + browser.version,\n        Os: platform,\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n      },\n      requestType: 3,\n    });\n\n    if (res?.data?.data?.info) {\n      return res.data.data;\n    } else {\n      dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n     \n      if (res.data?.data?.userType == \"Patient\") {\n        console.log(backupData);\n        if (backupData && backupData?.redirection) {\n          history.push(backupData?.redirection);\n        } else if (history?.location?.state?.redirection) {\n          history.push(history?.location?.state?.redirection);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      }\n      else if ( res.data?.data?.userType == ADMIN_USER ) {\n        history.push(\"/dashboard\");\n      }\n      else if ( res.data?.data?.userType == CLINIC_ADMIN_USER ) {\n\n        if(res.data?.data?.clinicId==BETHANY_CLINIC_ID)\n        {\n          history.push(\"/admindashboard\");\n        }\n        else{\n          history.push(\"/dashboard\");\n\n        }\n        \n      }\n      // else if ( res.data?.data?.userType == CLINIC_ADMIN_USER) {\n      //   history.push(\"/admindashboard\");\n      // }\n      \n      else {\n       // history.push(\"/dashboard\");\n        // setDrSign(true)\n\n       \n      let login = {\n        isFromMobile: true,\n              Ipaddress: IP,\n              clinicId: \"20\",\n              deviceId: \"\",\n              browserTimeZone: `GMT${formatTime}`,\n              appname: \"C2MD Patient\",\n              Os: platform,\n              hashPassword: \"\",\n              useragent: userAgent,\n              password: \"\",\n              accessCountry: accessCountry,\n              loginType: loginType,\n              userName: userName,\n              isotpverified: true,\n              Browser: browser.name + \" \" + browser.version,\n      };\n\n        axios({\n          method: 'post',\n          url: 'https://uat.c2mdr.com/demo/Connect2MyDoctorRequest',\n          data: {\n            requestType: 3,\n            loginDetails: JSON.stringify(login)\n        },\n          \n          headers: {\n            'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n          }\n        }).then(response => {\n          console.log(response)\n      })\n      .catch(err => {\n          throw err;\n      });\n\n      \n    \n      \n  \n      \n      }\n    }\n    return res.data.data;\n  };\n\nexport const checkUser =\n  ({ type, searchkey }) =>\n  async (dispatch) => {\n    const response = await loginedApi.post(\"loginwithotp\", {\n      requestType: 15,\n      token: \"C2MDVerificationToken\",\n      data: { type: type, searchKey: searchkey },\n    });\n\n    if (response.status === 200) {\n      return response.data && response.data;\n    }\n  };\n\nexport const logoutAction = () => async (dispatch) => {\n  dispatch({ type: LOG_OUT_ACTION });\n  localStorage.removeItem(\"userData\");\n};\n\nexport const loginwithotp =\n  ({ loginType, userName, accessCountry, history, appoinment_form }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: accessCountry,\n        loginType: loginType,\n        userName: userName,\n        isotpverified: true,\n        Browser: browser.name + \" \" + browser.version,\n      },\n      requestType: 3,\n    });\n\n    console.log(res);\n\n    if (res.data.data.info) {\n      toast.error(\"Invalid username or password !\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    } else {\n      dispatch({\n        type: LOGIN_SUCCESS_ACTION,\n        payload: res.data.data,\n      });\n\n      //await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n      console.log(res.data?.data?.userType);\n      if (res.data?.data?.userType == \"Patient\") {\n        if (appoinment_form?.routing) {\n          let doctrId = localStorage.getItem(\"doctrID\");\n\n          history.push(`/BookAppointment/${doctrId}`);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      } else {\n        let requestOptions = {\n          headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n          }\n      };\n  \n      let body = {\n        token: \"token\",\n        data: {\n          isFromMobile: true,\n          Ipaddress: IP,\n          clinicId: \"20\",\n          deviceId: \"\",\n          browserTimeZone: `GMT${formatTime}`,\n          appname: \"C2MD Patient\",\n          Os: platform,\n          hashPassword: \"\",\n          useragent: userAgent,\n          password: \"\",\n          accessCountry: accessCountry,\n          loginType: loginType,\n          userName: userName,\n          isotpverified: true,\n          Browser: browser.name + \" \" + browser.version,\n        },\n        requestType: 3,\n      };\n  \n      return axios.post('https://uat.c2mdr.com/demo/Connect2MyDoctorRequest', JSON.stringify(body), requestOptions)\n          .then(response => {\n              return response;\n          })\n          .catch(err => {\n              throw err;\n          });\n        //history.push(\"/dashboard\");\n      }\n    }\n  };\n\nexport const loginWithGoogle =\n  ({ Data, history }) =>\n  async (dispatch) => {\n    \n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: \"IN\",\n        loginType: \"email\",\n        userName: Data?.email,\n        isotpverified: true,\n        Browser: browser.name + \" \" + browser.version,\n      },\n      requestType: 3,\n    });\n\n    if (res.data.data.info) {\n      return res.data.data;\n    } else {\n      dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n      history.push(\"/DoctorListing\");\n    }\n    return res.data.data;\n  };\n\nexport const updateLoginDetails = (data) => async (dispatch) => {\n  dispatch({ type: UPDATE_LOGIN, payload: data });\n};\n","export default function authHeader() {\r\n    const user = JSON.parse(localStorage.getItem('userData'));\r\n    if (user && user.token) {\r\n      return { Authorization: 'Bearer ' + user.token };\r\n    } else {\r\n      return {};\r\n    }\r\n  }","import loginedApi from \"../apis\";\nimport authHeader from './auth-header';\nimport { convertDateToString } from \"../Helpers/dateFunctions\";\nimport { INTERBRANCH_ADMIN_DASHBOARD, REDUX_LOADING, SET_CR_DASHBOARD, UPDATE_REDUX_PRESCRIPTION } from \"./type\";\n\n\nexport const getDepartments = () => async dispatch => {\n\n    // let userToken = await getFromLocalStorage(USER_TOKEN)\n\n    // dispatch({\n    //     type: UPDATE_REDUX_PRESCRIPTION,\n    //     payload: {\n    //         data: responce.data.data,\n    //         totalPages: responce.data.totalNumberOfPages\n    //     }\n    // });\n\n\n    let params = {\n        requestType: \"1062\",\n        browserTimeZone: \"\",\n        \"version\":\"2\",\n        data: {\n            type: \"department\"\n        },\n    };\n\n\n    const response = await loginedApi.post(\"getdepartments\", params,{ headers: authHeader() });\n\n   \n    if (response.status == \"200\") {\n\n      \n        if (response.data.errorType!=\"FAILURE\" && response.data?.data) {\n\n            return response.data.data\n          }\n          else\n          {\n            //dispatch({ type: LOG_OUT_ACTION });\n      \n            localStorage.clear();\n            localStorage.removeItem(\"userData\");\n            window.location.href = '/home'; \n          }\n    }\n\n\n}\n\nexport const getDoctors = ({ department_id }) => async dispatch => {\n\n    // let userToken = await getFromLocalStorage(USER_TOKEN)\n\n    // dispatch({\n    //     type: UPDATE_REDUX_PRESCRIPTION,\n    //     payload: {\n    //         data: responce.data.data,\n    //         totalPages: responce.data.totalNumberOfPages\n    //     }\n    // });\n\n\n    let params = {\n        requestType: \"1063\",\n        browserTimeZone: \"\",\n        \"version\":\"2\",\n        data: {\n            \"type\": \"doctor\",\n            \"departmentId\": department_id\n        },\n    };\n\n\n    const response = await loginedApi.post(\"getdoctors\", params,{ headers: authHeader() });\n\n    if (response.status == \"200\") {\n\n        if (response.data.errorType!=\"FAILURE\" && response.data?.data) {\n\n            return response.data.data\n          }\n          else\n          {\n            //dispatch({ type: LOG_OUT_ACTION });\n      \n            localStorage.clear();\n            localStorage.removeItem(\"userData\");\n            window.location.href = '/home'; \n          }\n    }\n\n\n}\n\nexport const getTemplateList = ({ offset }) => async dispatch => {\n\n    // let userToken = await getFromLocalStorage(USER_TOKEN)\n\n    // dispatch({\n    //     type: UPDATE_REDUX_PRESCRIPTION,\n    //     payload: {\n    //         data: responce.data.data,\n    //         totalPages: responce.data.totalNumberOfPages\n    //     }\n    // });\n\n\n    let params = {\n        requestType: \"1070\",\n        browserTimeZone: \"\",\n        \"version\":\"2\",\n        data: {\n            type: \"templatelist\",\n            offset: offset ? offset : 0\n        },\n    };\n\n\n    const response = await loginedApi.post(\"gettemplates\", params,{ headers: authHeader() });\n\n    if (response.status == \"200\") {\n\n        console.log(response);\n\n        if (response.data.errorType!=\"FAILURE\" && response.data?.data) {\n\n            return {\n                data: response.data.data.data,\n                total: response.data.data.totalNumberOfPages\n            }\n          }\n          else\n          {\n            //dispatch({ type: LOG_OUT_ACTION });\n      \n            localStorage.clear();\n            localStorage.removeItem(\"userData\");\n            window.location.href = '/home'; \n          }\n        /*if (response.data?.data?.data) {\n            return {\n                data: response.data.data.data,\n                total: response.data.data.totalNumberOfPages\n            }\n        }*/\n    }\n\n\n}\n\nexport const viewTemplate = (par_tempId) => async dispatch => {\n\n    // let userToken = await getFromLocalStorage(USER_TOKEN)\n\n    // dispatch({\n    //     type: UPDATE_REDUX_PRESCRIPTION,\n    //     payload: {\n    //         data: responce.data.data,\n    //         totalPages: responce.data.totalNumberOfPages\n    //     }\n    // });\n\n\n    let params = { \"data\": { \"templateId\": par_tempId }, \"browserTimeZone\": \"\", \"requestType\": 1068,\"version\":\"2\" };\n\n\n    const response = await loginedApi.post(\"viewtemplate\", params,{ headers: authHeader() });\n\n    if (response.status == \"200\") {\n\n        /*if (response.data?.data) {\n            return response.data.data\n        }*/\n        if (response.data.errorType!=\"FAILURE\" && response.data?.data) {\n\n            return response.data.data\n          }\n          else\n          {\n            //dispatch({ type: LOG_OUT_ACTION });\n      \n            localStorage.clear();\n            localStorage.removeItem(\"userData\");\n            window.location.href = '/home'; \n          }\n    }\n\n\n}\n\nexport const FETCH_PR_ADMIN_DASHBOARD_REPORT = (_para) => async dispatch => {\n\n    // let userToken = await getFromLocalStorage(USER_TOKEN)\n\n    dispatch({\n        type: REDUX_LOADING,\n        payload: true\n    });\n\n    let fromDate = _para?.fromDate ? convertDateToString(_para.fromDate) : null\n    let toDate = _para?.toDate ? convertDateToString(_para.toDate) : null\n\n    let todayDate=convertDateToString(new Date())\n\n    let params={\n        \"data\": {\n            \"userID\": 98278532,\n            \"operation\": \"find\",\n            \"startDate\": fromDate?fromDate:todayDate,\n            \"endDate\": toDate?toDate:todayDate,\n            \"browserTimeZone\": \"GMT+05:30\",\n            offset:_para?.offset?_para.offset:\"0\"\n        },\n        \"browserTimeZone\": \"\",\n        \"version\":\"2\",\n        \"requestType\": 236\n    }\n   \n\n   \n\n    let responce = await loginedApi.post(\"getbethanyprescriptions\", params,{ headers: authHeader() })\n\n    console.log(\"getbethanyprescriptionlist responce ->\", responce);\n\n    if (responce.status == 200) {\n\n        console.log();\n\n        if (responce.data.errorType!=\"FAILURE\" && responce.data?.data) {\n\n            dispatch({\n                type: SET_CR_DASHBOARD,\n                payload: {\n                    data: responce.data.data,\n                    total: responce.data.data.totalNumberOfPages\n                }\n            });\n    \n             dispatch({\n            type: REDUX_LOADING,\n            payload: false\n        });\n          }\n          else\n          {\n            //dispatch({ type: LOG_OUT_ACTION });\n      \n            localStorage.clear();\n            localStorage.removeItem(\"userData\");\n            window.location.href = '/home'; \n          }\n       \n\n\n  }\n}\n\nexport const syncLabAndMedicine = () => async dispatch => {\n\n    // let userToken = await getFromLocalStorage(USER_TOKEN)\n\n    // dispatch({\n    //     type: UPDATE_REDUX_PRESCRIPTION,\n    //     payload: {\n    //         data: responce.data.data,\n    //         totalPages: responce.data.totalNumberOfPages\n    //     }\n    // });\n\n\n    let params = {\"data\":{\"userID\":\"98278532\",\"browserTimeZone\":\"GMT+05:30\"},\"browserTimeZone\":\"\",\"requestType\":238,\"version\":\"2\"}\n\n\n    const response = await loginedApi.post(\"bethanysynclabmedicine\", params,{ headers: authHeader() });\n\n    if (response.status == \"200\") {\n\n        if (response.data.errorType!=\"FAILURE\" && response.data?.data) {\n\n            return response.data.data\n          }\n          else\n          {\n            //dispatch({ type: LOG_OUT_ACTION });\n      \n            localStorage.clear();\n            localStorage.removeItem(\"userData\");\n            window.location.href = '/home'; \n          }\n          //  return response.data.data\n    }\n\n\n\n}\n\n\nexport const pushToHisCall = (_id) => async dispatch => {\n\n    // let userToken = await getFromLocalStorage(USER_TOKEN)\n\n    // dispatch({\n    //     type: UPDATE_REDUX_PRESCRIPTION,\n    //     payload: {\n    //         data: responce.data.data,\n    //         totalPages: responce.data.totalNumberOfPages\n    //     }\n    // });\n\n\n    let params = {\"data\":{\"userID\":\"98278532\",\"listid\":_id},\"browserTimeZone\":\"\",\"requestType\":237,\"version\":\"2\"}\n\n    const response = await loginedApi.post(\"bethanysynclabmedicine\", params,{ headers: authHeader() });\n\n    if (response.status == \"200\") {\n\n        console.log(response);\n        if (response.data.errorType!=\"FAILURE\" && response.data?.data) {\n\n            return response.data.data\n          }\n          else\n          {\n            //dispatch({ type: LOG_OUT_ACTION });\n      \n            localStorage.clear();\n            localStorage.removeItem(\"userData\");\n            window.location.href = '/home'; \n          }\n         //   return response.data.data\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import styled from 'styled-components'\n\nexport const TittleCard = styled.div`\n\npadding:10px 10px;\nbackground-color:white;\ndisplay:\"flex\";\nborder-radius:5px;\nbox-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n  \n`\n\n","\nexport const USER_TYPE=\"c2mdUserUserType\"\nexport const USER_DATA=\"userData\"\nexport const ADMIN_USER=\"C2MDAdmin\"\nexport const CLINIC_ADMIN_USER=\"ClinicAdmin\"\nexport const USER_TOKEN=\"c2mdUserToken\"\nexport const BETHANY_CLINIC_ID=\"14\"\n","export const INVESTIGATION_HEAD = \"Investigation\"\nexport const MEDICINE_HEAD = \"Medicine\"\n\n//common\nexport const DELETE_FLAG = \"Delete\"\n\n//investigation table\nexport const INVESTIGATION_TABLE_HEADING_NAME = \"InvestigationName\"\nexport const INVESTIGATION_TABLE_HEADING_COMMENTS = \"Instructions\"\n\n//Medicine Table\nexport const MEDICINE_TABLE_HEADING_MEDICINE_TYPE= \"MedicineType\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_NAME= \"MedicineName\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_WHEN= \"Whentohave\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_FREEQUANCY= \"Frequency\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_QUALITY= \"Quantity\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_UNIT= \"Unit\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_START_DATE= \"StartingDate\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_DAYS= \"Noofdays\"\nexport const MEDICINE_TABLE_HEADING_MEDICINE_INSTRUCTIONS= \"Instructions\"\n\n\n\n\nexport const getNumberOfDays = (max) => {\n\n    let result=[]\n\n\n    for (let i = 1; i <= max; i++) \n    {\n       result.push(i)\n    }\n\n    return result\n\n}\n\n\n\n\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { UPDATE_INVESTIGATION_TABLE_DATA, UPDATE_MEDICINE_TABLE_DATA, UPDATE_REDUX_PRESCRIPTION } from '../../../../actions/type'\nimport { DELETE_FLAG, INVESTIGATION_HEAD } from '../../Helpers/Constants'\n// import { setInvestigationRedux, setMedicinesRedux, updateReduxData } from '../../Redux/Slice/SelectedDataSlice'\nimport './modal.css'\n\nfunction Modal({ state, setState, data, setData, removeIndex, deletingFrom }) {\n\n   const { investigationData, medicinesData } = useSelector((state) =>  state?.presctiptionFormReducer)\n\n  \n\n\n    const dispatch = useDispatch()\n\n    let removeData = () => {\n\n        //console.log(deletingFrom,investigationData);\n\n\n        if (data) {\n\n            if (deletingFrom===INVESTIGATION_HEAD) {\n\n                let newResult = investigationData.filter((element,key) => { return (key !== removeIndex) })\n                console.log(\"New removed array==>\", newResult);\n                dispatch({\n                    type: UPDATE_INVESTIGATION_TABLE_DATA,\n                    payload: newResult\n                });\n            }\n            else {\n\n                let newResult = medicinesData.filter((element) => { return (element.id !== removeIndex) })\n                console.log(\"New removed array==>\", newResult);\n                dispatch({\n                    type: UPDATE_MEDICINE_TABLE_DATA,\n                    payload: newResult\n                });\n            }\n\n\n\n        }\n\n        setState(false)\n\n\n\n\n    }\n\n\n    let updateReduxSelect = ({ head, id, tittle, value }) => {\n\n        dispatch(UPDATE_REDUX_PRESCRIPTION({ head, id, tittle, value }))\n\n    }\n\n\n\n\n\n    return (\n        <>\n            {\n                state ?\n\n                    <div className=\"modal-prescription\" >\n                        <div className=\"modal-body-prescription\">\n                            <div className=\"modal-content-prescription\">\n                                Do you want to delete this ?\n                            </div>\n\n                            <div className=\"modal-buttons-prescription\">\n                                <button className='modal-cancel-btn-prescription' onClick={() => { setState(false) }}>No</button>\n                                <button className='modal-ok-btn-prescription' onClick={() => { removeData() }}>Yes</button>\n                            </div>\n                        </div>\n                    </div> : null\n            }\n        </>\n    )\n}\n\nexport default Modal\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { CLEAR_PRESCRIPTION } from '../../../../actions/type'\n\nfunction SuccessModal({ state,setState,successMessage, isPreload, setEditMode, clearData }) {\n\n    let dispatch=useDispatch()\n\n\n    let handleOkClick =()=>{\n\n        setState(false)\n\n        if(isPreload)\n        {\n            setEditMode(false)\n        }\n        else{\n\n             if(successMessage.includes(\"successfully\")){\n\n                    clearData()\n    \n                }\n          \n\n           \n\n           \n        }\n\n       \n    }\n\n    console.log(successMessage);\n\n    return (\n\n        <>\n            {state ?\n\n                <div className=\"modal-loader\" >\n                    <div className=\"modal-body-prescription\">\n                        <div className=\"modal-content-prescription\">\n                           {successMessage?successMessage:\"Success\"}\n                        </div>\n\n                        <div className=\"modal-buttons-prescription\" style={{width:\"100%\",display:\"flex\", flexDirection:\"row\", justifyContent:\"center\"}}>\n                            <button className='modal-ok-btn-prescription' onClick={handleOkClick}>Ok</button>\n                        </div>\n                    </div>\n                </div> : null}\n        </>\n\n    )\n}\n\nexport default SuccessModal\n","export const validateNumberOnKeyPress = (event) => {\n\n\n    if (event.which == 46 || event.which == 8) {\n        //do nothing\n    }\n    else if (event.which < 48 || event.which > 57) {\n        event.preventDefault();\n    }\n    else if (event.target.value.length > 9) {\n\n        event.preventDefault();\n    }\n\n\n}\n\n\nlet gerErrorMessage = (type, name) => {\n\n    let errorMessageText = `${name} can't empty. please enter the ${name}!!!`\n    let errorMessageSelect = `${name} can't empty. please select the ${name}!!!`\n\n\n    if (type == 'select') {\n        return { status: false, error: errorMessageSelect }\n    }\n    else {\n        return { status: false, error: errorMessageText }\n    }\n\n}\n\n\nexport const validateFormData = (reports, investigationtableData, medicineTableData) => {\n\n\n\n  \n    if (reports.height.value ||\n        reports.height.unit ||\n        reports.weight.value ||\n        reports.weight.unit ||\n        reports.lmp ||\n        reports.chiefComplaints ||\n        reports.releventPoint ||\n        reports.diagnosis ||\n        reports.additionalInstruction||\n        reports.examination || validateInvestigationTable(investigationtableData).status===true || validateMedicinetable(medicineTableData).status===true ) \n         {\n\n\n        return { status: true, error: validateMedicinetable(medicineTableData) };\n    }\n\n   \n}\n\nexport const validateInvestigationTable = (table_data) => {\n\n    let result = { status: false, error: \"message\" }\n\n\n    for (const element of table_data) {\n\n        if (element.name) \n        {\n           result= { status: true, error: \"message\" }\n            break\n\n        }\n        else if (element.comment) {\n            result= { status: true, error: \"message\" }\n            break\n\n        }\n\n    }\n\n\n    return result\n\n}\n\n\nexport const validateMedicinetable = (table_data) => {\n\n   \n\n    let result = { status: false, error: \"initial\" }\n    let process = null\n\n\n    for (const element of table_data) {\n\n        if (element.type) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.name) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.when) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.freequancy) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.quantity) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.unit) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.date) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.days) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n        else if (element.instructions) {\n            result = { status: true, error: \"\" }\n            break\n\n        }\n\n\n    }\n\n\n    return result\n\n}\n\n\n\nexport const validateMedicineTableForAddNewRow =(table_data)=>{\n\n    let result = { status: true, error: \"message\" }\n    let process = null\n\n\n    for (const element of table_data) {\n\n     \n         if (!element.name) {\n            process = { id: element.id, element: \"Name of Medicine\" }\n            break\n\n        }\n        \n\n    }\n\n    result = process ? { status: false, error: `\"${process.element}\"  of ${process.id + 1}${process.id + 1 == 1 ? \"st\" : process.id + 1 == 2 ? \"nd\" : process.id + 1 == 3 ? \"rd\" : \"th\"} medicine on the Medicines table is missing` } : { status: true, error: \"message\" }\n\n\n    return result\n\n\n\n}\n\n\nexport const validateInvestigationtableForAddNewRow=(table_data)=>{\n\n    let result = { status: true, error: \"message\" }\n\n\n    for (const element of table_data) {\n\n        if (!element.name) \n        {\n           result= { status: false, error: \"Name missing\" }\n            break\n\n        }\n        \n\n    }\n\n\n    return result\n\n}\n\n\nexport const getAddInvestigationButtonText=(length)=>{\n\n    if(length==0)\n    {\n        return (\"Add investigation\")\n    }\n    else if(length>0)\n    {\n        return (\"Add Investigations\")\n    }\n\n}\n\n","import React from 'react'\nimport { PuffLoader, SyncLoader } from 'react-spinners';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport '../Modal/modal.css'\n\nfunction LoaderModel({ state, setState }) {\n\n\n\n    return (\n        <>\n            {state ?\n\n                <div className=\"modal-loader\" >\n                    <div className=\"modal-body-prescription\">\n                        <div className=\"modal-content-prescription\">\n                            {/* when loader starts, cant able to call the API again even again clicks on the SAVE button */}\n                            Saving prescription. Please wait ...\n\n                            \n                        </div>\n\n                        <div className=\"modal-buttons\" style={{ width: \"100%\", display: \"flex\", flexDirection: \"row\", justifyContent: \"center\" }}>\n\n                            <PuffLoader color={\"black\"} loading={true} size={50} />\n\n                        </div>\n                    </div>\n                </div> : null}\n        </>\n    )\n}\n\nexport default LoaderModel\n","import React from 'react'\nimport InputBase from '@mui/material/InputBase';\nimport { styled } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\nimport { useTheme } from '@emotion/react';\n\nfunction MuiSelect() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst names = [\n  'Oliver Hansen',\n  'Van Henry',\n  'April Tucker',\n  'Ralph Hubbard',\n  'Omar Alexander',\n  'Carlos Abbott',\n  'Miriam Wagner',\n  'Bradley Wilkerson',\n  'Virginia Andrews',\n  'Kelly Snyder',\n];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\n\n\n\nexport const BootstrapInput = styled(InputBase)(({ theme }) => ({\n   'minWidth':\"110px\",\n   'width':\"100%\",\n    'label + &': {\n      marginTop: theme.spacing(5),\n    },\n  \n    '& .MuiInputBase-input': {\n      borderRadius: 4,\n      position: 'relative',\n      backgroundColor: theme.palette.background.paper,\n      border: '0px solid #ced4da',\n      fontSize: '14px !important',\n      textAlign:\"start\",\n      padding: '.75rem .6rem',\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\n      // Use the system font instead of the default Roboto font.\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n      '&:focus': {\n        borderRadius: 4,\n        borderColor: '#ffffff',\n        backgroundColor:\"white\"\n       \n      },\n    },\n  }));\n  \n\nexport default MuiSelect\n","import React, { useEffect } from 'react'\nimport TextField from '@mui/material/TextField';\nimport Autocomplete,{ createFilterOptions }  from '@mui/material/Autocomplete';\nimport { FormControl, InputLabel } from '@mui/material';\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { BootstrapInput } from './MuiSelect';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n  'input': {\n    '&::placeholder': {\n      textOverflow: 'ellipsis !important',\n      color: 'blue !important',\n      color: 'rgb(119, 119, 119)!important',\n      opacity: '1 !important',\n      fontSize: \"14px !important\"\n    }\n  },\n\n  root: {\n\n    \"& .css-16awh2u-MuiAutocomplete-root\": {\n      width: \"200px\"\n\n    },\n    \"& .MuiInputLabel-outlined:not(.MuiInputLabel-shrink)\": {\n      // Default transform is \"translate(14px, 20px) scale(1)\"\"\n      // This lines up the label with the initial cursor position in the input\n      // after changing its padding-left.\n      transform: \"translate(34px, 20px) scale(1);\",\n\n    }\n  },\n  inputRoot: {\n    color: \"purple\",\n    backgroundColor: \"white\",\n    padding: '0px',\n    fontSize: \"14px\",\n\n\n\n    // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n    '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n      // Default left padding is 6px\n      paddingLeft: 0,\n\n      margin: \"0px\",\n      padding: 0,\n      fontSize: \"14px\"\n\n\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"green\",\n      border: 0,\n    },\n    \"&:hover .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"red\",\n      border: 0,\n    },\n    \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"purple\",\n      border: 0,\n    }\n\n  }\n}));\n\n\nconst usePlaceholderStyles = makeStyles(theme => ({\n\n  '.MuiAutocomplete-root': {\n    borderRadius: 4,\n    backgroundColor: 'red'\n\n  },\n\n  noBorder: {\n    border: \"none\",\n  },\n  customTextField: {\n    \"& input::placeholder\": {\n      fontSize: \"20px !important\",\n      opacity: 1\n    }\n  },\n  'input-label': {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    width: '100%',\n    color: 'red',\n  },\n\n  'input': {\n    '&::placeholder': {\n      textOverflow: 'ellipsis !important',\n      color: 'blue'\n    }\n  }\n\n}));\n\nconst Placeholder = ({ children }) => {\n  const classes = usePlaceholderStyles();\n  return <div className={classes.placeholder}>{children}</div>;\n};\n\n\nfunction MuiAutoComplete({ value, data, name, onChange, id, placeholder,isSpeciality, selected,style }) {\n\n  const classes = useStyles();\n  const [answer, setAnswer] = React.useState(\"\");\n\n\n  const Pop = props => {\n    const { className, anchorEl, style, ...rest } = props\n    const bound = anchorEl.getBoundingClientRect()\n    return <div {...rest} style={{\n      position: 'absolute',\n      zIndex: 9999,\n      width: bound.width\n    }} />\n  }\n\n  let handleOnachange = (e, values) => {\n\n   onChange({ data: values, id, key: name }) \n\n  }\n\n  const filterOptions = createFilterOptions({\n    matchFrom: 'start',\n    stringify: (option) => option,\n  });\n\n  // const filterOptions = createFilterOptions({\n  //   // matchFrom: 'start',\n  //   stringify: (option) => option, // make it one for it\n  // });\n\n\n  useEffect(() => {\n\n    if(isSpeciality)\n    {\n      console.log(value);\n\n    }\n   \n  }, [])\n  \n\n  \n\n  return (\n\n    <Autocomplete\n      // classes={{ notchedOutline: classes.input }}\n      popoverProps={{ style: { width: 'auto' } }}\n      style={{\n        minWidth: 300,\n        width: \"100%\"\n      }}\n    \n      value={value}\n      filterOptions={data?filterOptions:null}\n      onChange={handleOnachange}\n      classes={classes}\n      id=\"combo-box-demo\"\n      options={data ? data : null}\n      renderInput={(params) => {\n\n        return (\n          <TextField\n            InputProps={{ classes: { input: classes['input'] } }}\n            {...params}\n            placeholder={placeholder}\n          />\n        )\n      }}\n    />\n\n  )\n}\n\nexport default MuiAutoComplete\n","import React from 'react'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { BootstrapInput } from './MuiSelect';\n\nconst usePlaceholderStyles = makeStyles(theme => ({\n    placeholder: {\n        color: \"#868686\",\n        color: 'rgb(119, 119, 119)!important',\n        fontSize: \"14.5px\",\n        margin: \"0px\"\n    },\n\n    root: {\n        '&.MuiOutlinedInput-root': {\n            backgroundColor: \"red !important\",\n\n        },\n\n        \"& .MuiInputBase-root\": {\n            padding: 0,\n            \"& .MuiButtonBase-root\": {\n                padding: 0,\n                paddingLeft: 0,\n            },\n            \"& .MuiInputBase-input\": {\n                backgroundColor: \"white\",\n                padding: \".8rem .6rem !important\",\n                minHeight: 30,\n                cursor: \"pointer\",\n                backgroundColor: \"red !important\",\n                fontSize: \"14px\",\n\n            }\n        }\n    },\n}));\n\nconst Placeholder = ({ children }) => {\n    const classes = usePlaceholderStyles();\n    return <div className={classes.placeholder}>{children}</div>;\n};\n\n\n\nfunction MuiDropdown({ onChange, name, data, isMedTable, id, placeholder, value, style, isObject, populationName,populationId }) {\n\n    const [answer, setAnswer] = React.useState(\"\");\n\n    let handleOnChange = (e) => {\n        if (isMedTable) {\n            console.log({ data: e.target.value, id: id, key: name });\n            onChange({ data: e.target.value, id: id, key: name });\n            // setAnswer(e.target.value)\n        }\n\n        else {\n            onChange(name, e.target.value);\n            // setAnswer(e.target.value)\n        }\n    }\n\n\n    return (\n        <Select\n            style={style ? style : null}\n            input={<BootstrapInput placeholder={placeholder} />}\n            value={value}\n            onChange={handleOnChange}\n            displayEmpty\n            inputProps={{ style: { fontSize: 20 } }} // font size of input text\n            InputLabelProps={{ style: { fontSize: 20 } }} // font size of input label\n            renderValue={\n                value ? () => <span>{value}</span> : () => <Placeholder>{placeholder}</Placeholder>\n            }\n        >\n            {\n                isObject ?\n\n                    data ?\n\n                        data.map((element, key) => {\n                            return (\n\n                                <MenuItem key={key} value={element[populationId?populationId:id]}>{element[populationName?populationName:name]}</MenuItem>\n\n                            )\n                        })\n\n                        : null\n\n\n                    :\n\n\n                    data ?\n\n                        data.map((element, key) => {\n                            return (\n\n                                <MenuItem key={key} value={element}>{element}</MenuItem>\n\n                            )\n                        })\n\n                        : null\n\n            }\n\n        </Select>\n    )\n}\n\nexport default MuiDropdown\n","import React from 'react'\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport TextField from '@mui/material/TextField';\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport { DatePicker, KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport moment from 'moment'\n\nimport { Menu, Dropdown } from 'antd';\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n\n    root: {\n        '&.MuiOutlinedInput-root': {\n            backgroundColor: \"red !important\"\n        },\n\n        \"& .MuiInputBase-root\": {\n            padding: 0,\n            \"& .MuiButtonBase-root\": {\n                padding: 0,\n                paddingLeft: 0,\n            },\n            \"& .MuiInputBase-input\": {\n                backgroundColor: \"white\",\n                padding: \".5rem .6rem\",\n                fontSize: \"14.8px\",\n                minHeight: 28,\n                cursor: \"pointer\",\n\n            }\n        }\n    },\n    inputRoot: {\n        color: \"purple\",\n        backgroundColor: \"white\",\n        padding: '0px',\n\n        '& .MuiFormControl-root MuiTextField-root': {\n\n            backgroundColor: \"red\"\n\n        },\n\n\n        // This matches the specificity of the default styles at https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui-lab/src/Autocomplete/Autocomplete.js#L90\n        '&[class*=\"MuiOutlinedInput-root\"] .MuiAutocomplete-input:first-child': {\n            // Default left padding is 6px\n            paddingLeft: 0,\n\n            margin: \"0px\",\n            padding: 0\n\n        },\n        \"& .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"green\",\n            border: 0,\n        },\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"red\",\n            border: 0,\n        },\n        \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"purple\",\n            border: 0,\n        }\n\n    }\n\n\n}));\n\n\n\nfunction MuiDatePicker({ onChange, name, isMedTable, id, maxDate, minDate, placeholder,_value }) {\n\n    const [value, setValue] = React.useState(null);\n    const classes = useStyles();\n\n    const menu = (\n        <Menu>\n            <Menu.Item onClick={()=>{setValue(null)}} key=\"1\">Clear date</Menu.Item>\n           \n        </Menu>\n    );\n\n    const handleChange = (newValue) => {\n\n\n        console.log(newValue);\n\n        if (isMedTable) {\n\n            console.log(newValue, id, name);\n\n            onChange({ data: convertDate(newValue), id, key: name })\n            // setState(newValue);\n\n        }\n        else {\n\n            // setState(newValue);\n            onChange(name,convertDate(newValue))\n\n        }\n\n\n    };\n\n\n    let convertDate = (para_date) => {\n        const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        const dateObj = new Date(para_date);\n        const month = monthNames[dateObj.getMonth()];\n        const day = String(dateObj.getDate()).padStart(2, '0');\n        const year = dateObj.getFullYear();\n        const output = day + '-' + month + '-' + year;\n\n        return output\n    }\n\n    return (\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n            <Dropdown overlay={menu} trigger={['contextMenu']}>\n\n                <DatePicker\n                    autoOk\n                    classes={classes}\n                    InputProps={{\n                        disableUnderline: true\n                    }}\n                    maxDate={maxDate}\n                    minDate={minDate}\n                    placeholder={placeholder}\n                    variant=\"inline\"\n                    value={_value?moment(_value):null}\n                    onChange={handleChange}\n                    disableToolbar={false}\n                    format={'dd-MMM-yyyy'}\n\n\n                />\n            </Dropdown>\n\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default MuiDatePicker\n","import React from 'react'\n\nfunction FailiureModal({ state,setState }) {\n    return (\n\n        <>\n            {state ?\n\n                <div className=\"modal\" >\n                    <div className=\"modal-body\">\n                        <div className=\"modal-content\">\n                        Prescription already saved. No changes found\n                        </div>\n\n                        <div className=\"modal-buttons\" style={{width:\"100%\",display:\"flex\", flexDirection:\"row\", justifyContent:\"center\"}}>\n                            <button className='modal-ok-btn' onClick={() => { setState(false) }}>Ok</button>\n                        </div>\n                    </div>\n                </div> : null}\n        </>\n\n    )\n}\n\nexport default FailiureModal\n","\nimport { Select } from 'antd'\n\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SET_SELECTED_DOCTORS, UPDATE_REDUX_PRESCRIPTION } from '../../../../actions/type';\n\nfunction AutoCompleteWithCheckbox(props) {\n\n  let { data, setSelected, ...other } = props\n\n  const { Option } = Select;\n\n  let [_data, setData] = useState(data)\n  let [options, setOptions] = useState([])\n  const [value, setValue] = React.useState([]);\n\n  let dispatch = useDispatch()\n  const { selectedDoctors, doctorsList } = useSelector((state) => state?.presctiptionFormReducer)\n\n\n\n  let createOptionObject = (para_data) => {\n\n    if (para_data.length > 0) {\n\n      let _options = []\n\n      for (let i = 0; i<para_data.length; i++) {\n\n        _options.push({\n          label: `${para_data[i].doctorName}`,\n          value: para_data[i].doctorId,\n        });\n      }\n\n      return(_options);\n\n    }\n\n\n  }\n\n\n\n  const selectProps = {\n    mode: 'multiple',\n    style: {\n      width: '364px',\n    },\n    placeholder: 'Select doctor',\n    maxTagCount: 'responsive',\n  };\n\n\n  let handleOnchange = (newValue) => {\n\n    console.log(newValue);\n\n   \n\n    dispatch({\n      type: SET_SELECTED_DOCTORS,\n      payload: newValue\n    });\n\n    // setValue(newValue);\n\n\n  }\n\n\n\n  return (\n    <Select value={selectedDoctors} options={ createOptionObject(doctorsList)} onChange={(e) => { handleOnchange(e) }} getPopupContainer={trigger => trigger.parentNode} {...other} {...selectProps} />\n  )\n}\n\nexport default AutoCompleteWithCheckbox","import React, { useEffect, useRef, useState } from 'react'\nimport './prescriptionform.css'\nimport axios from \"axios\";\n\nimport { notification, Popover, Tooltip } from 'antd';\nimport { AddIcon_Prescription, DeleteIcon_Prescription, LabelIcon_Prescription } from '../../assets/Logos/Icons';\nimport Modal from './Components/Modal/Modal';\n\nimport { Select } from 'antd';\nimport SuccessModal from './Components/SuccessModel/SuccessModal';\n\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getNumberOfDays, INVESTIGATION_HEAD, INVESTIGATION_TABLE_HEADING_COMMENTS, INVESTIGATION_TABLE_HEADING_NAME, MEDICINE_HEAD, MEDICINE_TABLE_HEADING_MEDICINE_DAYS, MEDICINE_TABLE_HEADING_MEDICINE_FREEQUANCY, MEDICINE_TABLE_HEADING_MEDICINE_INSTRUCTIONS, MEDICINE_TABLE_HEADING_MEDICINE_NAME, MEDICINE_TABLE_HEADING_MEDICINE_QUALITY, MEDICINE_TABLE_HEADING_MEDICINE_START_DATE, MEDICINE_TABLE_HEADING_MEDICINE_TYPE, MEDICINE_TABLE_HEADING_MEDICINE_UNIT, MEDICINE_TABLE_HEADING_MEDICINE_WHEN } from './Helpers/Constants';\n// import { setInvestigationRedux, setMedicinesRedux, setSubmissionData, updateReduxData } from '../../Redux/Slice/SelectedDataSlice';\n\nimport {\n    FileSearchOutlined,\n    MedicineBoxOutlined,\n    PlusCircleOutlined,\n    UserOutlined\n} from '@ant-design/icons';\nimport { getAddInvestigationButtonText, validateFormData, validateInvestigationtableForAddNewRow, validateMedicineTableForAddNewRow, validateNumberOnKeyPress } from './Helpers/helperFunctions';\n\n\nimport LoaderModel from './Components/LoaderModel/LoaderModel';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiAutoComplete from './Components/CustomeComponents/MuiAutoComplete';\nimport MuiDropdown from './Components/CustomeComponents/MuiDropdown';\nimport MuiDatePicker from './Components/CustomeComponents/MuiDatePicker';\nimport LmpdatePicker from './Components/CustomeComponents/LmpdatePicker';\nimport FailiureModal from './Components/FailiureModal/FailiureModal';\nimport { CLEAR_PRESCRIPTION, SET_DOCTORS, SET_SELECTED_DEPARTMENT, SET_SELECTED_DOCTORS, SET_SUBMISSION_DATA_PRESCRIPTION, UPDATE_INVESTIGATION_TABLE_DATA, UPDATE_MEDICINE_TABLE_DATA, UPDATE_REDUX_PRESCRIPTION } from '../../actions/type';\nimport { getDepartments, getDoctors } from '../../actions/PrescriptionFormActions';\nimport AutoCompleteWithCheckbox from './Components/CustomeComponents/AutoCompleteWithCheckbox';\n// import NetworkErrorModal from './Components/NetworkErrorModal/NetworkErrorModal';\n\n\nconst useStyles = makeStyles(theme => ({\n    quantityRoot: {\n        color: \"#FFFFFF\",\n        backgroundColor: \"#ffffff\",\n        opacity: 0.6,\n        borderRadius: \"5px\",\n        outline: \"0px !importanrt\",\n        \"&:hover\": {\n            backgroundColor: \"#ffffff\",\n            borderRadius: \"5px\",\n            opacity: 1,\n            border: \"0px !importanrt\",\n        },\n        \"&:focus-within\": {\n\n            borderRadius: \"5px\",\n            opacity: 1,\n            border: \"0px !importanrt\",\n        },\n        \"& .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ffffff\",\n            border: \"0px !importanrt\",\n\n        },\n        \"&:hover .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ffffff\",\n            border: \"0px !importanrt\",\n        },\n        \"& .Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ffffff\",\n            borderRadius: \"5px 5px 0 0\",\n            border: \"0px !importanrt\",\n        },\n        \"& .Mui-disabled\": {\n            color: \"#FFFFFF\",\n            opacity: 0.6,\n            border: \"0px !importanrt\",\n        },\n        \"& .Mui-disabled .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #ff0000\",\n            border: \"0px !importanrt\",\n        },\n\n    },\n    selectRoot: {\n        color: \"#FFFFFF\",\n        border: 0,\n\n        \"& .Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            border: \"1px solid #484850\",\n            borderRadius: \"5px 5px 0 0\"\n        },\n    },\n    icon: {\n        color: \"#FFFFFF\"\n    },\n    selectPaper: {\n        backgroundColor: \"#ffffff\",\n        border: \"1px solid #ffffff\",\n        borderRadius: \"5px\",\n        color: \"#FFFFFF\",\n        \"& li:hover\": {\n            backgroundColor: \"#ffffff\"\n        }\n    }\n}\n));\n\n\n\nconst { Option } = Select;\n\nfunction PriscriptionForm({ preloadData, backAction, setEditMode }) {\n\n    const dispatch = useDispatch()\n    let history = useHistory()\n\n    let [finalInvestigations, setFinalInvestigation] = useState([])\n    let [finalMedicinesdata, setFinalMedicinesdata] = useState([])\n    let [params, setParams] = useState(JSON.parse(localStorage.getItem(\"basicinfo\")))\n\n    let [isreadyToValidate, setReadyToValidate] = useState({\n        templateName: false,\n        doctos: false,\n        department: false\n    })\n\n\n    const { selectedDataInvestigation, selectedDataMedicines, submissionData, investigationData, medicinesData } = useSelector((state) => state?.presctiptionFormReducer)\n    const { selectedDoctors, selectedDepartment } = useSelector((state) => state?.presctiptionFormReducer)\n    let leftMenus =\n        [\n            { name: \"Patient Reports\", icon: <UserOutlined /> },\n            { name: \"Investigations\", icon: <FileSearchOutlined /> },\n            { name: \"Medicines\", icon: <MedicineBoxOutlined /> },\n            { name: \"Additional Instructions\", icon: <PlusCircleOutlined /> },\n        ]\n\n    let [isNetworkError, setNetworkError] = useState(true)\n\n    useEffect(() => {\n\n        let _params = JSON.parse(localStorage.getItem(\"basicinfo\"));\n\n        if (_params) {\n            setNetworkError(false)\n        }\n        else {\n            setNetworkError(true)\n        }\n\n\n    }, [])\n\n\n    let [activeLeft, setActiveLeft] = useState(leftMenus[0].name)\n\n    let [isConfirmDelete, setConfirmDelete] = useState(false)\n    let [deleteIndex, setDeleteIndex] = useState(null)\n\n    let [isConfirmDeleteMedicine, setConfirmDeleteMedicine] = useState(false)\n    let [deleteIndexMedicine, setDeleteIndexMedicine] = useState(null)\n\n    let [deletingFrom, setDeletingFrom] = useState(null)\n\n    let [isSuccess, setSuccess] = useState(false)\n    let [successMessage, setSuccessMessage] = useState(\"\")\n    let [isFailed, setFailed] = useState(false)\n    let [isdisabled, setDisabled] = useState(false)\n    let [test, settest] = useState(false)\n    let [medicine, setMedicine] = useState(false)\n    const [presciptioninfor, setPrescriptioninfo] = useState({\n        height: \"\",\n        weight: \"\",\n        lmp: \"\",\n        cheifcomplaints: \"\",\n        relevantpointfromhistory: \"\",\n        diagnosis: \"\",\n        examinationlabfindings: \"\",\n        additionalinstrunction: \"\",\n        doctorName: params?.doctorname,\n        registrationnumber: params?.registrationnumber,\n        qualification: params?.qualification,\n        patientname: params?.patientname,\n        gender: params?.gender,\n        age: params?.age,\n        appointmentdate: params?.appointmentdate,\n        appointmenttime: params?.appointmenttime,\n        patientNO: params?.patientno,\n        doctorcode: params?.doctorcode,\n        appointmentID: params?.appointmentID,\n        medicine: [],\n        labTest: []\n    });\n\n    let [isReadyToSubmit, setRedyToSubmit] = useState(false)\n\n    let [isDropDown, setDropDownClass] = useState({ status: false, key: 0 })\n\n    let [isReadtToAddMedicine, setReadytoAddMedicine] = useState({ status: false })\n    let [isReadyToAddInvestigation, setReadytoAddInvestigation] = useState(null)\n    let [isLoading, setLoading] = useState(false)\n\n    let [scrollAmount, setScrollAmount] = useState(0)\n\n    let [selectedLmp, setSelectedLmp] = useState(null)\n\n    let [preloadPrescription, setPreloadPrescription] = useState(preloadData)\n\n    let [departmentsArray, setDepartmentsArray] = useState([])\n\n    let [selectedDepartmentName, setSelectedDepartmentName] = useState(null)\n\n    let [doctorsArray, setDoctors] = useState([])\n    let [selectedDr, setDr] = useState([])\n\n\n    let [templateName, setTemplateName] = useState(null)\n\n    let [validationError, setvalidatoinError] = useState(\n        {\n            department: null,\n            doctors: null,\n            templateName: null\n        }\n    )\n\n\n    let selectedDoctor = []\n\n\n\n\n    useEffect(() => {\n\n        loadmedicine()\n        loadtest()\n        //checkForLastPrescription()\n        loadDepartments()\n\n    }, []);\n\n\n\n    useEffect(() => {\n\n        if (preloadPrescription) {\n\n            populatePreloadData()\n\n        }\n        else {\n            clearPrepopulateddate()\n        }\n\n    }, [preloadPrescription])\n\n\n\n\n    useEffect(() => {\n\n        let result = validateMedicineTableForAddNewRow(medicinesData)\n\n        console.log(result);\n\n        setReadytoAddMedicine(result)\n        setFinalMedicinesdata([])\n        setFinalMedicinesdata(medicinesData)\n\n    }, [medicinesData])\n\n\n\n    useEffect(() => {\n\n        let result = validateInvestigationtableForAddNewRow(investigationData)\n\n        setReadytoAddInvestigation(result.status)\n\n        setFinalInvestigation([])\n        setFinalInvestigation(investigationData)\n\n    }, [investigationData])\n\n\n\n\n\n\n    const tests = [];\n    const medicines = [];\n    const units = [\"GRAMS\", \"MCG\", \"MG\", \"MG/ML\", \"ML\", \"NUM\", \"μm\", \"PERCENTAGE\",];\n    const frequecny = [\"30 Minutes Before Breakfast \", \"30 Minutes Before Dinner\", \"30 Minutes Before Food \", \"30 Minutes Before Lunch \", \"6 hr for fever > 100 f \", \"After Dinner\", \"After Food \", \"After Lunch \", \"As Directed \", \"Before Food \", \"Every fourth hourly \", \"For immediate use\", \"Four Times Daily\", \"Half a Day-Evening \", \"Half a Day-Evening and Noon \", \"Half a Day-Morning \", \"Half a Day-Morning and Evening \", \"Half a Day-Morning and Noon \", \"Half a Day-Noon \", \"Half tablet, thrice daily\", \"Hourly \", \"On Alternate Days\", \"On Empty Stomach\", \"Once Daily - Evening\", \"Once Daily - Morning\", \"Once Daily - Morning and Evening\", \"Once Daily - Night \", \"Once Daily - Noon\", \"Once a Month\", \"Once a Week \", \"SOS \", \"Thrice a Day\", \"Thrice Daily\", \"Thrice Weekly\", \"Twice a Day - Noon and Night\", \"Twice Daily \", \"Twice Daily - Morning and Evening\", \"Twice Daily - Morning and Night \", \"Twice Daily - Morning and Noon \", \"Twice Daily - Noon and Evening \", \"Twice Weekly\", \"Use when required\", \"With First Bite of Food \"]\n\n\n    function loadtest() {\n        axios.post(\"https://uat.c2mdr.com/c2mydrrestdemo/v1/c2mdapi/getbethanylabtest\", {\n            token: \"token\",\n            data: {\n                isFromMobile: true,\n                clinicId: \"Bethany\",\n                basicinfo: {\n                    doctorName: presciptioninfor.doctorName,\n                    registrationnumber: presciptioninfor.registrationnumber,\n                    qualification: presciptioninfor.qualification,\n                    patientname: presciptioninfor.patientname,\n                    gender: presciptioninfor.gender,\n                    age: presciptioninfor.age,\n                    appointmentdate: presciptioninfor.appointmentdate,\n                    appointmenttime: presciptioninfor.appointmenttime,\n                    patientNO: presciptioninfor.patientNO,\n                    doctorcode: presciptioninfor.doctorcode,\n                    appointmentID: presciptioninfor.appointmentID\n\n                }\n\n            },\n            requestType: 234,\n        })\n            .then((result) => {\n\n\n                result.data.data.map((obj2, key) => {\n\n                    tests.push(obj2.testname);\n\n                });\n                settest([...new Set(tests)]);\n\n\n\n            })\n            .catch((err) => {\n                // Do somthing\n            })\n    }\n    function onChange(date, dateString) {\n\n        setPrescriptioninfo({ ...presciptioninfor, lmp: dateString })\n    }\n\n    function loadmedicine() {\n\n        axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/getbethanymedicinelist\", {\n            token: \"token\",\n            data: {\n                type: \"DRUGS\",\n                clinicId: \"Bethany\",\n                basicinfo: {\n                    doctorName: presciptioninfor.doctorName,\n                    registrationnumber: presciptioninfor.registrationnumber,\n                    qualification: presciptioninfor.qualification,\n                    patientname: presciptioninfor.patientname,\n                    gender: presciptioninfor.gender,\n                    age: presciptioninfor.age,\n                    appointmentdate: presciptioninfor.appointmentdate,\n                    appointmenttime: presciptioninfor.appointmenttime,\n                    patientNO: presciptioninfor.patientNO,\n                    doctorcode: presciptioninfor.doctorcode,\n                    appointmentID: presciptioninfor.appointmentID\n\n                }\n\n            },\n            requestType: 233,\n        })\n            .then((result) => {\n\n\n\n\n                result.data.data.description.map((obj2, key) => {\n\n\n                    medicines.push(obj2);\n                });\n\n\n\n                setMedicine([...new Set(medicines)]);\n\n            })\n    }\n\n    const mm = [\"DRUGS\", \"tesdt\"];\n\n    let [labtest, setLabtest] = useState([\n        {\n            testType: \"\",\n            testNames: \"\",\n            comment: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in.\",\n            id: 3\n        }\n    ])\n\n\n\n    let addInvestigation = () => {\n\n        setActiveLeft(leftMenus[1].name)\n\n\n\n        if (investigationData.length <= 0) {\n\n            let newArray = [...investigationData, {\n                name: null,\n                comment: null,\n                id: investigationData.length\n            }]\n\n            dispatch({\n                type: UPDATE_INVESTIGATION_TABLE_DATA,\n                payload: newArray\n            });\n\n\n        }\n\n        else if (investigationData[investigationData.length - 1].name != null) {\n\n\n            let newArray = [...investigationData, {\n                name: null,\n                comment: null,\n                id: investigationData[investigationData.length - 1].id + 1\n            }]\n\n            dispatch({\n                type: UPDATE_INVESTIGATION_TABLE_DATA,\n                payload: newArray\n            });\n\n\n        }\n        else {\n\n            // notification.error({\n            //     message: `Investigation table is incomplete`,\n            //     description:\n            //         'Please fill the all fields in investigation table inorder to add new row.',\n            //     placement: \"bottomRight\",\n            // });\n\n        }\n\n\n    }\n\n\n\n    let removeInvestigation = (id) => {\n\n        setDeleteIndex(id)\n        setConfirmDelete(true)\n        setDeletingFrom(INVESTIGATION_HEAD)\n\n\n    }\n\n\n\n    let addMedicine = () => {\n\n        setActiveLeft(leftMenus[2].name)\n\n\n\n        if (medicinesData.length <= 0) {\n\n            let newArray = [...medicinesData, {\n                id: medicinesData.length,\n                type: null,\n                name: null,\n                when: null,\n                freequancy: null,\n                quantity: null,\n                unit: null,\n                date: null,\n                days: null,\n                instructions: null\n            }]\n\n            dispatch({\n                type: UPDATE_MEDICINE_TABLE_DATA,\n                payload: newArray\n            });\n\n            MedicineElement.current.scrollLeft = 0\n\n\n        }\n\n        else if (medicinesData[medicinesData.length - 1].name != null) {\n\n\n\n            let newArray = [...medicinesData, {\n                id: medicinesData[medicinesData.length - 1].id + 1,\n                type: null,\n                name: null,\n                when: null,\n                freequancy: null,\n                quantity: null,\n                unit: null,\n                date: null,\n                days: null,\n                instructions: null\n            }]\n\n            dispatch({\n                type: UPDATE_MEDICINE_TABLE_DATA,\n                payload: newArray\n            });\n\n            MedicineElement.current.scrollLeft = 0\n\n\n\n\n\n\n        }\n        else {\n\n            notification.error({\n                message: `Medicines table is incomplete`,\n                description:\n                    'Please fill the all fields in Medicines table inorder to add new row.',\n                placement: \"bottomRight\",\n            });\n\n\n        }\n\n\n\n\n    }\n\n    let removeMedicine = (id) => {\n\n        setDeleteIndexMedicine(id)\n        setConfirmDeleteMedicine(true)\n        setDeletingFrom(MEDICINE_HEAD)\n\n\n    }\n\n    var selectmedicine = []\n    var selectlabtest = []\n\n    let validateForSubmitButton = () => {\n\n        let result = validateFormData(submissionData, investigationData, medicinesData)\n        result ? setRedyToSubmit(true) : setRedyToSubmit(false)\n\n    }\n\n    useEffect(() => {\n        validateForSubmitButton()\n    }, [investigationData, medicinesData])\n\n\n\n    async function saveprescription() {\n\n\n        setLoading(true)\n\n        console.log(\"No value is missing. Ready to submit\");\n\n        console.log(\"Other basic informations (Also update included)==>\", submissionData);\n\n        console.log(\"Investigation Table Data (Also update included)==>\", investigationData);\n\n        console.log(\"Medicine Table Data (Also update included)==>\", medicinesData);\n\n\n\n\n        medicinesData.map((obj, key) => {\n\n            if (obj.name != null) {\n                selectmedicine.push({\n                    StartVal: obj.date !== null ? obj.date : \"\",\n                    StrengthVal: '',\n                    displayTablet: obj.freequancy != null ? obj.freequancy : \"\",\n                    isPermitted: false,\n                    measurement: obj.unit != null ? obj.unit : \"\",\n                    mediComment: obj.instructions != null ? obj.instructions : \"\",\n                    medtakeMethod: obj.when != null ? obj.when : \"\",\n                    name: obj.name,\n                    quandity: obj.quantity != null ? obj.quantity : \"\",\n                    totalDays: obj.days != null ? obj.days : \"\",\n                    type: \"DRUGS\"\n                })\n            }\n        });\n\n        investigationData.map(savedLabTest => {\n            if (savedLabTest.name != null) {\n                selectlabtest.push({\n                    testType: savedLabTest.name,\n                    testNames: \"\",\n                    testComment: savedLabTest.comment != null ? savedLabTest.comment : \"\"\n                })\n            }\n        })\n\n        setPrescriptioninfo({ ...presciptioninfor, medicine: selectmedicine })\n        setPrescriptioninfo({ ...presciptioninfor, labTest: selectlabtest })\n\n        let requestdata = {\n            attachementArrs: [],\n            consultationDetails: {\n                doctor_suggestion: \"\",\n                chiefcomplaints: submissionData.chiefComplaints != null ? submissionData.chiefComplaints : \"\",\n                diagnosis: submissionData.diagnosis != null ? submissionData.diagnosis : \"\",\n                investigation: submissionData.examination != null ? submissionData.examination : \"\",\n                notes: submissionData.releventPoint != null ? submissionData.releventPoint : \"\",\n                instruction: submissionData.additionalInstruction != null ? submissionData.additionalInstruction : \"\",\n                share: true,\n                privateMessage: \"\",\n                weight: submissionData.weight.value != null ? submissionData.weight.value + \" \" + submissionData.weight.unit : \"\",\n                height: submissionData.height.value != null ? submissionData.height.value + \" \" + submissionData.height.unit : \"\",\n                lmp: submissionData.lmp != null ? submissionData.lmp : \"\",\n                medicine: selectmedicine,\n                labTest: selectlabtest\n            },\n            basicinfo: {\n                doctorName: presciptioninfor.doctorName,\n                registrationnumber: presciptioninfor.registrationnumber,\n                qualification: presciptioninfor.qualification,\n                patientname: presciptioninfor.patientname,\n                gender: presciptioninfor.gender,\n                age: presciptioninfor.age,\n                appointmentdate: presciptioninfor.appointmentdate,\n                appointmenttime: presciptioninfor.appointmenttime,\n                patientNO: presciptioninfor.patientNO,\n                doctorcode: presciptioninfor.doctorcode,\n                appointmentID: presciptioninfor.appointmentID\n\n            }\n        }\n\n        let dummyParams = { \"token\": \"token\", \"data\": { \"prescriptionDetails\": { \"attachementArrs\": [], \"consultationDetails\": { \"doctor_suggestion\": \"\", \"chiefcomplaints\": \"CAME FOR FITNESS FOR WIDE LOCAL EXCISION OF LEFT BUCCAL MUCOSA\", \"diagnosis\": \"\", \"investigation\": \"BP 130/76 MM HG\\nRS AND CVS NAD\\nCBC 13.7/5500/254000 ESR 10 RBS 108\\nCREAT 0.8 INR 1.19 VM NR\\nECG NOTED HRCT CHEST NAD\\n2D ECHO EF 60%, MILD LVH\", \"notes\": \"HT ON TAZLOC H OD\\nNO H/O COVID\\nALLERGY TO MEDICINE NOT KNOWN\\nNON SMOKER\\nCOVID VACCINATION+\", \"instruction\": \"CAN GO AHEAD WITH SURGERY WITH DUE RISK\", \"share\": true, \"privateMessage\": \"\", \"weight\": \"\", \"height\": \"\", \"lmp\": \"\", \"medicine\": [], \"labTest\": [] }, \"basicinfo\": { \"doctorName\": \"DR. KULDEEP  DALAL\", \"registrationnumber\": \"2003/07/2759\", \"qualification\": \"M.D.(Gen.Med.), F.N.B.(Crit.Care), F.C.C.P.\", \"patientname\": \"MR. AJAY . RAJE\", \"gender\": \"Male\", \"age\": \"59\", \"appointmentdate\": \"21-Mar-2022\", \"appointmenttime\": \"11:45 AM\", \"patientNO\": \"1225133\", \"doctorcode\": \"128\", \"appointmentID\": \"883727\" } }, \"browserTimeZone\": \"\" }, \"browserTimeZone\": \"\", \"requestType\": 235 }\n\n\n        console.log(requestdata);\n\n        // try {\n        //     axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/saveprescription\", requestdata)\n        //         .then((result) => {\n\n        //             console.log(result);\n\n        //             if (result) {\n\n\n        //                 if (result.data.data.info === \"Updated Successfully\") {\n        //                     //   setSuccess(true)\n\n        //                     setLoading(false)\n        //                     // setSuccess(true)\n\n        //                     navigate(\"/success\");\n\n\n        //                     // setTimeout(function () {\n        //                     //     resetPage();\n        //                     // }, 3000);\n\n        //                 }\n        //                 else if(result.data.data.info===\"Prescription already Saved. No changes Found\") {\n\n        //                     //  setSuccess(false)\n        //                     setLoading(false)\n        //                     setFailed(true)\n\n        //                 }\n        //                 // console.log(result)\n        //             }\n        //             else {\n\n        //             }\n\n        //         })\n\n        // } catch (error) {\n\n        //     console.log(error);\n\n        // }\n        //       navigate(\"/c2mydrprescription/success\");\n\n        try {\n            axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/saveprescription\", {\n                token: \"token\",\n                data: {\n\n                    prescriptionDetails: requestdata,\n                    browserTimeZone: '',\n\n                },\n                browserTimeZone: '',\n                requestType: 235,\n            })\n                .then((result) => {\n\n                    console.log(result);\n\n                    if (result) {\n\n                        if (result.data.data.info === \"Updated Successfully\") {\n                            //   setSuccess(true)\n\n                            setLoading(false)\n                            // setSuccess(true)\n\n                            history.push(\"/success\");\n\n\n                            // setTimeout(function () {\n                            //     resetPage();\n                            // }, 3000);\n\n                        }\n                        else if (result.data.data.info === \"Prescription already Saved. No changes Found\") {\n\n                            //  setSuccess(false)\n                            setLoading(false)\n                            setFailed(true)\n\n                        }\n                        // console.log(result)\n                    }\n                    else {\n\n                    }\n\n                })\n\n        } catch (error) {\n\n            console.log(error);\n            setSuccess(true)\n        }\n\n\n\n\n\n\n\n\n\n    }\n\n    function handleChangeWeight(value) {\n        // console.log(`selected ${value}`);\n    }\n\n    let InvestigationTextAreaOnChange = ({ data, id }) => {\n\n        updateReduxSelect({\n            head: INVESTIGATION_HEAD,\n            id,\n            tittle: INVESTIGATION_TABLE_HEADING_COMMENTS,\n            value: data\n        })\n\n    }\n\n    let InvestigationNameOnChange = ({ data, id }) => {\n\n        updateReduxSelect({\n            head: INVESTIGATION_HEAD,\n            id,\n            tittle: INVESTIGATION_TABLE_HEADING_NAME,\n            value: data\n        })\n\n        // console.log(data, id);\n\n    }\n\n    let MedicineOnChange = ({ data, id, tittle }) => {\n\n        // console.log(data);\n\n        updateReduxSelect({\n            head: MEDICINE_HEAD,\n            id,\n            tittle,\n            value: data\n        })\n\n        console.log(data, id, tittle);\n\n    }\n\n\n    let updateReduxSelect = ({ head, id, tittle, value }) => {\n\n        //dispatch(UPDATE_REDUX_PRESCRIPTION({ head, id, tittle, value }))\n\n        dispatch({\n            type: UPDATE_REDUX_PRESCRIPTION,\n            payload: { head, id, tittle, value }\n        });\n\n\n    }\n\n\n    const MedicineElement = useRef();\n    const InvestigationElement = useRef();\n    const AddInstructionElement = useRef();\n    const ScrollElement = useRef();\n\n\n    let focusElement = (para_element) => {\n\n        console.log(InvestigationElement);\n\n        switch (para_element) {\n\n            case leftMenus[0].name:\n                ScrollElement.current.scrollTop = 0\n                break;\n\n            case leftMenus[1].name:\n                ScrollElement.current.scrollTop = InvestigationElement.current.offsetTop\n                break;\n\n            case leftMenus[2].name:\n                ScrollElement.current.scrollTop = MedicineElement.current.offsetTop\n                break;\n\n            case leftMenus[3].name:\n                AddInstructionElement.current.focus()\n                ScrollElement.current.scrollTop = 3000\n                break;\n\n            default:\n                break;\n        }\n\n    }\n\n\n    let onChangeSubmissiondata = (key, value) => {\n\n\n\n        if (key === \"additionalInstruction\") {\n            pointToSection(3)\n        }\n        else {\n            pointToSection(0)\n        }\n\n        dispatch({\n            type: SET_SUBMISSION_DATA_PRESCRIPTION,\n            payload: { [key]: value }\n        });\n\n        validateForSubmitButton()\n\n\n        //dispatch(setSubmissionData({ [key]: value }))\n\n    }\n\n    let onChangeSubmissiondataHeightWidth = (key, value) => {\n\n        pointToSection(0)\n\n        dispatch({\n            type: SET_SUBMISSION_DATA_PRESCRIPTION,\n            payload: { [key]: { ...submissionData[key], value } }\n        });\n\n\n        //dispatch(setSubmissionData({ [key]: { ...submissionData[key], value } }))\n\n    }\n\n    let onChangeSubmissiondataHeightWidthUnit = (key, unit) => {\n\n\n        // console.log(key, unit);\n        pointToSection(0)\n\n        dispatch({\n            type: SET_SUBMISSION_DATA_PRESCRIPTION,\n            payload: { [key]: { ...submissionData[key], unit } }\n        });\n        //dispatch(setSubmissionData({ [key]: { ...submissionData[key], unit } }))\n\n    }\n\n\n    let updateInvestigationTable = ({ id, data, key, state }) => {\n\n        pointToSection(1)\n        let newArray = JSON.parse(JSON.stringify(investigationData));\n        newArray[id][key] = data ? data : null\n        //dispatch(setInvestigationRedux(newArray))\n        dispatch({\n            type: UPDATE_INVESTIGATION_TABLE_DATA,\n            payload: newArray\n        });\n\n        validateForSubmitButton()\n\n    }\n\n    let updateMedicineTable = ({ id, data, key }) => {\n\n        // let newArray = medicinesList\n        // newArray[id].assign({ [key]: data })\n        // setMedicinesList(newArray)\n\n        pointToSection(2)\n        console.log(id, key, moment.isMoment(data) ? data.toDate() : data);\n\n\n        let newArray = JSON.parse(JSON.stringify(medicinesData));\n        console.log(newArray)\n        newArray[id][key] = data ? data : null\n\n        dispatch({\n            type: UPDATE_MEDICINE_TABLE_DATA,\n            payload: newArray\n        });\n        //dispatch(setMedicinesRedux(newArray))\n        validateForSubmitButton()\n\n\n\n    }\n\n\n    let resetPage = () => {\n\n        window.location.reload();\n\n\n    }\n\n    useEffect(() => {\n\n        if (medicinesData.length <= 1) {\n            MedicineElement.current.scrollLeft = 0\n        }\n\n    }, [medicinesData])\n\n\n    let pointToSection = (id) => {\n\n        setActiveLeft(leftMenus[id ? id : 0].name)\n    }\n\n    const classes = useStyles();\n\n\n    const noInvestigationPopOver = (\n        <div>\n            <div>Complete investigation table to add new row</div>\n        </div>\n    );\n\n\n    const noMedicinePopOver = (\n        <div>\n            <div>Complete medicines table to add new row</div>\n        </div>\n    );\n\n\n    let refreshPage = () => {\n        window.location.reload(true);\n    }\n\n\n    // LOAD LAST PRESCRIPTION Functionalities............................................................\n\n    let checkForLastPrescription = () => {\n\n        let params =\n        {\n            \"requestType\": \"1054\",\n            \"version\": 1,\n            \"data\": {\n                \"AppId\": \"89\",\n                \"doctorcode\": \"176\",\n                \"patientNO\": \"1003944\"\n            }\n        }\n\n        axios.post(\"https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/preloadprescription\", params)\n            .then((result) => {\n\n                setPreloadPrescription(result.data.data?.prescriptionDetails)\n\n                console.log(result.data.data?.prescriptionDetails);\n\n\n            })\n\n    }\n\n    let populatePreloadData = () => {\n\n        console.log(preloadPrescription);\n\n        if (preloadPrescription) {\n\n            let dep_id = null\n\n            setSelectedDepartmentName(preloadPrescription?.department.Name)\n\n            dispatch({\n                type: SET_SELECTED_DEPARTMENT,\n                payload: preloadPrescription.department.Id\n            });\n\n\n            loadDoctors(preloadPrescription.department.Id)\n\n            dispatch({\n                type: SET_SELECTED_DOCTORS,\n                payload: getElementArray(preloadPrescription?.doctors, \"Id\")\n            });\n\n            setTemplateName(preloadPrescription.basicinfo.templateName)\n\n\n            setParams(\n                {\n                    ...params,\n                    patientname: preloadPrescription?.basicinfo?.patientname,\n                    age: preloadPrescription?.basicinfo?.age,\n                    gender: preloadPrescription?.basicinfo?.gender,\n                    patientno: preloadPrescription?.basicinfo?.patientNO\n                }\n            )\n\n            onChangeSubmissiondataHeightWidth(\"height\", preloadPrescription?.consultationDetails?.height)\n            onChangeSubmissiondataHeightWidth(\"weight\", preloadPrescription?.consultationDetails?.weight)\n\n            if (preloadPrescription?.consultationDetails?.lmp) { setSelectedLmp(preloadPrescription?.consultationDetails?.lmp) }\n\n            if (preloadPrescription?.consultationDetails?.chiefcomplaints) { onChangeSubmissiondata(\"chiefComplaints\", preloadPrescription?.consultationDetails?.chiefcomplaints) }\n\n            if (preloadPrescription?.consultationDetails?.notes) { onChangeSubmissiondata(\"releventPoint\", preloadPrescription?.consultationDetails?.notes) }\n\n            if (preloadPrescription?.consultationDetails?.diagnosis) { onChangeSubmissiondata(\"diagnosis\", preloadPrescription?.consultationDetails?.diagnosis) }\n\n            if (preloadPrescription?.consultationDetails?.investigation) { onChangeSubmissiondata(\"examination\", preloadPrescription?.consultationDetails?.investigation) }\n\n            //Investigation table population\n            if (preloadPrescription?.consultationDetails?.labTest && preloadPrescription?.consultationDetails?.labTest.length > 0) {\n\n\n                let newArray = []\n\n                preloadPrescription.consultationDetails.labTest.map((element, key) => {\n\n                    newArray.push({\n                        name: element.testType,\n                        comment: element.testComment,\n                        id: key\n                    })\n\n\n                })\n\n\n\n                //dispatch(setInvestigationRedux(newArray))\n                dispatch({\n                    type: UPDATE_INVESTIGATION_TABLE_DATA,\n                    payload: newArray\n                });\n            }\n\n            //Medicine table population\n            if (preloadPrescription?.consultationDetails?.medicine && preloadPrescription?.consultationDetails?.medicine.length > 0) {\n\n                let newArray = []\n\n                preloadPrescription?.consultationDetails?.medicine.map((element, key) => {\n\n                    newArray.push({\n                        id: key,\n                        type: element.type,\n                        name: element.name,\n                        when: element.medtakeMethod,\n                        freequancy: element.displayTablet,\n                        quantity: element.quandity,\n                        unit: element.measurement,\n                        date: element.StartVal,\n                        days: element.totalDays,\n                        instructions: element.mediComment\n                    })\n\n                })\n\n                //dispatch(setMedicinesRedux(newArray))\n                dispatch({\n                    type: UPDATE_MEDICINE_TABLE_DATA,\n                    payload: newArray\n                });\n\n            }\n\n            if (preloadPrescription?.consultationDetails?.instruction) { onChangeSubmissiondata(\"additionalInstruction\", preloadPrescription?.consultationDetails?.instruction) }\n\n\n\n\n        }\n\n\n\n    }\n\n\n\n    let clearPrepopulateddate = () => {\n\n        dispatch({ type: CLEAR_PRESCRIPTION })\n        setSelectedDepartmentName(null)\n        setTemplateName(\"\")\n\n\n    }\n\n\n\n    let loadDepartments = () => {\n\n        dispatch(getDepartments()).then((res) => {\n\n            console.log(res);\n            setDepartmentsArray(res)\n\n        })\n\n    }\n\n    let loadDoctors = (_id) => {\n\n        dispatch(getDoctors({ department_id: _id })).then((res) => {\n\n            console.log(res);\n\n            dispatch({\n                type: SET_SELECTED_DOCTORS,\n                payload: doctorObjectToArray(res)\n            });\n\n\n            dispatch({\n                type: SET_DOCTORS,\n                payload: res\n            });\n\n            setDoctors(res)\n\n        })\n\n    }\n\n\n    let departmentObjectToArray = (obj) => {\n\n        let result = []\n\n        if (obj) {\n            obj.map((element) => {\n\n                result.push(element.departmentName)\n\n            })\n        }\n\n        return result\n\n\n    }\n\n    let doctorObjectToArray = (obj) => {\n\n        let result = []\n\n        if (obj) {\n            obj.map((element) => {\n\n                result.push(element.doctorId)\n\n            })\n        }\n\n        return result\n\n\n    }\n\n\n\n    let handleDepartmentOnChange = (data) => {\n        console.log(data.data);\n\n        let dep_id = departmentsArray.filter((element) => element.departmentName == data.data)\n\n        dispatch({\n            type: SET_SELECTED_DEPARTMENT,\n            payload: dep_id[0]\n        });\n        setSelectedDepartmentName(dep_id[0].departmentName)\n\n        loadDoctors(dep_id[0].departmentId)\n\n\n    }\n\n\n    let createPrescription = () => {\n\n\n        let submitStatus = validateForm()\n\n        setReadyToValidate({\n            templateName: true,\n            doctos: true,\n            department: true\n        })\n\n\n        if (submitStatus) {\n            setLoading(true)\n\n            let _selectlabtest = []\n\n            investigationData.map(savedLabTest => {\n                if (savedLabTest.name != null) {\n                    _selectlabtest.push({\n                        testType: savedLabTest.name,\n                        testNames: \"\",\n                        testComment: savedLabTest.comment != null ? savedLabTest.comment : \"\"\n                    })\n                }\n            })\n\n\n            let _selectmedicine = []\n\n            medicinesData.map((obj, key) => {\n\n                if (obj.name != null) {\n                    _selectmedicine.push({\n                        StartVal: obj.date !== null ? obj.date : \"\",\n                        StrengthVal: '',\n                        displayTablet: obj.freequancy != null ? obj.freequancy : \"\",\n                        isPermitted: false,\n                        measurement: obj.unit != null ? obj.unit : \"\",\n                        mediComment: obj.instructions != null ? obj.instructions : \"\",\n                        medtakeMethod: obj.when != null ? obj.when : \"\",\n                        name: obj.name,\n                        quandity: obj.quantity != null ? obj.quantity : \"\",\n                        totalDays: obj.days != null ? obj.days : \"\",\n                        type: \"DRUGS\"\n                    })\n                }\n            });\n\n\n\n            let dataToSubmit = {\n                data: {\n                    prescriptionDetails: {\n                        \"attachementArrs\": [],\n                        \"consultationDetails\": {\n                            \"doctor_suggestion\": \"\",\n                            chiefcomplaints: submissionData.chiefComplaints != null ? submissionData.chiefComplaints : \"\",\n                            diagnosis: submissionData.diagnosis != null ? submissionData.diagnosis : \"\",\n                            investigation: submissionData.examination != null ? submissionData.examination : \"\",\n                            notes: submissionData.releventPoint != null ? submissionData.releventPoint : \"\",\n                            instruction: submissionData.additionalInstruction != null ? submissionData.additionalInstruction : \"\",\n                            share: true,\n                            privateMessage: \"\",\n                            //weight: submissionData.weight.value != null ? submissionData.weight.value + \" \" + submissionData.weight.unit : \"\",\n                            //height: submissionData.height.value != null ? submissionData.height.value + \" \" + submissionData.height.unit : \"\",\n                            lmp: submissionData.lmp != null ? submissionData.lmp : \"\",\n                            labTest: _selectlabtest,\n                            medicine: _selectmedicine\n                        },\n                        basicinfo: {\n                            \"departmentId\": selectedDepartment?.departmentId,\n                            \"doctorIds\": selectedDoctors.toString(),\n                            \"templateName\": templateName\n                        }\n                    },\n                    \"browserTimeZone\": \"\"\n                },\n                \"browserTimeZone\": \"\",\n                \"requestType\": preloadData ? 1066 : 1061\n            }\n\n            if (preloadData) {\n                dataToSubmit.data.prescriptionDetails.basicinfo.templateId = preloadData.tempId\n\n            }\n\n            try {\n                axios.post(`https://uat.c2mdr.com/c2mydrrestuat/v1/c2mdapi/${preloadData ? \"updatetemplate\" : \"createtemplate\"}`, dataToSubmit)\n                    .then((result) => {\n\n                        console.log(result);\n\n                        setLoading(false)\n                        setSuccessMessage(result.data.data.info)\n                        setSuccess(true)\n\n                        setReadyToValidate({\n                            templateName: false,\n                            doctos: false,\n                            department: false\n                        })\n\n\n\n\n                    })\n\n\n\n\n            } catch (error) {\n\n                console.log(error);\n\n                setSuccess(true)\n            }\n\n\n        }\n        else {\n\n            ScrollElement.current.scrollTop = 0\n        }\n\n\n\n    }\n\n\n    let handleDoctorChange = (e) => {\n\n        console.log(e);\n\n        if (e) {\n            setDr(e)\n        }\n\n\n    }\n\n\n\n\n    let validateForm = () => {\n\n\n        let _validationError = {\n            department: null,\n            doctors: null,\n            templateName: null\n        }\n\n        //validate departmentName......................................\n        if (!selectedDepartmentName) {\n            _validationError.department = \"* Please select department.\"\n        }\n        else {\n\n            _validationError.department = null\n\n        }\n\n\n        //validate templateName......................................\n        if (!templateName) {\n\n            _validationError.templateName = \"* Template name can't be empty.\"\n        }\n        else {\n            _validationError.templateName = null\n        }\n\n\n        //validate doctors................................................\n        if (selectedDoctors.length <= 0) {\n\n            _validationError.doctors = \"*Please select doctors.\"\n        }\n        else {\n\n            _validationError.doctors = null\n        }\n\n\n\n        setvalidatoinError(_validationError)\n\n        if (_validationError.department || _validationError.doctors || _validationError.templateName) {\n            return false\n        }\n        else {\n            return true\n        }\n\n\n    }\n\n\n\n    useEffect(() => {\n\n        if (isreadyToValidate.templateName) {\n            if (!templateName) {\n\n                setvalidatoinError({ ...validationError, templateName: \"* Template name can't be empty.\" })\n                // _validationError.templateName = \"* Template name can't be empty.\"\n            }\n            else {\n                setvalidatoinError({ ...validationError, templateName: null })\n            }\n        }\n\n    }, [templateName])\n\n\n    useEffect(() => {\n\n        if (isreadyToValidate.templateName) {\n            if (selectedDoctors.length <= 0) {\n\n                setvalidatoinError({ ...validationError, doctors: \"*Please select doctors.\" })\n                // _validationError.templateName = \"* Template name can't be empty.\"\n            }\n            else {\n                setvalidatoinError({ ...validationError, doctors: null })\n            }\n        }\n\n    }, [selectedDoctors.length])\n\n    useEffect(() => {\n\n        if (isreadyToValidate.templateName) {\n            if (!selectedDepartmentName) {\n\n                setvalidatoinError({ ...validationError, department: \"* Please select department.\" })\n                // _validationError.templateName = \"* Template name can't be empty.\"\n            }\n            else {\n                setvalidatoinError({ ...validationError, department: null })\n            }\n        }\n\n    }, [selectedDepartmentName])\n\n\n\n\n\n\n    let EmptySpace = () => {\n        return (\n            <span>&nbsp;&nbsp;</span>\n        )\n    }\n\n    let getDepartmentNameFromId = (_id, searchArray) => {\n\n        let obj = searchArray.filter((element) => element.departmentId == _id)\n\n        setSelectedDepartmentName(obj[0]?.departmentName)\n\n\n\n    }\n\n    let getElementArray = (data, key) => {\n\n        let newArray = []\n\n        if (data) {\n            data.map((element) => {\n\n                newArray.push(element[key])\n\n            })\n\n            return newArray\n\n        }\n\n    }\n\n    let handleTemplateNameChange = (e) => {\n\n        setTemplateName(e.target.value)\n\n\n    }\n\n\n    console.log(selectedDoctors.length, selectedDepartmentName);\n\n    return (\n        <div className=\"prescription-form-main-container\">\n\n\n            <div className='prescription-form-container' style={{ width: \"100%\" }}>\n\n\n\n\n                <div className=\"prescription-form-content-container\">\n                    <div\n                        // onScroll={(e) => { setScrollAmount(e.target.scrollTop) }}\n                        className=\"prescription-form-content\" ref={ScrollElement}>\n\n\n\n\n\n                        <div className=\"container\">\n\n                        </div>\n\n                        <div style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"flex-start\",\n                            width: \"100%\",\n                            padding: \"1rem\",\n\n                            position: \"relative\",\n                            minWidth: \"100%\",\n                            flexWrap: \"wrap\"\n                        }}>\n\n\n\n                            <div></div>\n\n                            {/* Old name and other details......................................................................... */}\n\n                            {/* <ul onClick={() => { setActiveLeft(leftMenus[0].name) }} className='details-list'>\n\n                                <li>\n                                    <span className='form-caption'>PATIENT NAME</span>\n                                    <span className='form-small-tittle' >{params ? params.patientname : <span>&nbsp;</span>}</span>\n                                </li>\n\n                                <li>\n                                    <span className='form-caption'>AGE</span>\n                                    <span className='form-small-tittle'>{params ? params.age : <span>&nbsp;</span>} yrs</span>\n                                </li>\n\n                                <li>\n                                    <span className='form-caption'>GENDER</span>\n                                    <span className='form-small-tittle'>{params ? params.gender : <span>&nbsp;</span>}</span>\n                                </li>\n\n                                <li>\n                                    <span className='form-caption'>PATIENT NUMBER</span>\n                                    <span className='form-small-tittle'>{params ? params.patientno : <span>&nbsp;</span>}</span>\n                                </li>\n                            </ul> */}\n\n                            {/* Newly added dropdowns......................................................................... */}\n\n                            <ul className='report-list shadow-underline'>\n                                <li>\n                                    <div>\n                                        <span className='form-small-tittle' >Choose Speciality <span style={{ color: \"red\" }}>*</span> </span>\n                                        <span className='form-caption'></span>\n                                    </div>\n\n                                    <Tooltip title={selectedDepartmentName}>\n                                        <div className={`form-light-background ${validationError.department ? \"form-error\" : null}`}>\n\n\n                                            <MuiAutoComplete\n                                                placeholder=\"Select speciality\"\n                                                // id={key}\n                                                isSpeciality\n                                                value={selectedDepartmentName}\n                                                data={departmentsArray.length > 0 ? departmentObjectToArray(departmentsArray) : []}\n                                                onChange={handleDepartmentOnChange}\n                                                name='name' />\n\n\n                                        </div>\n                                    </Tooltip>\n                                    <span className='prescription-form-error'>\n                                        {validationError.department ? validationError.department : <EmptySpace />}\n                                    </span>\n\n                                </li>\n\n                                <li>\n                                    <div>\n                                        <span className='form-small-tittle' >Choose Doctor <span style={{ color: \"red\" }}>*</span></span>\n                                        <span className='form-caption' ></span>\n                                    </div>\n\n                                    <div className={`form-light-background ${validationError.doctors ? \"form-error\" : null}`}>\n\n\n                                        {/* <MuiDropdown\n                                            style={{ width: \"227px\" }}\n                                            // value={submissionData.weight?.unit}\n                                            placeholder=\"Select doctor\"\n                                            data={['Data 1', 'Data 2', 'Data 3']}\n                                            name=\"\"\n                                        //onChange={onChangeSubmissiondataHeightWidthUnit} \n                                        /> */}\n                                        <AutoCompleteWithCheckbox\n                                            data={doctorsArray.length > 0 ? doctorObjectToArray(doctorsArray) : []}\n                                            setSelected={handleDoctorChange}\n                                        />\n\n\n                                    </div>\n\n                                    <span className='prescription-form-error'>\n                                        {validationError.doctors ? validationError.doctors : <EmptySpace />}\n                                    </span>\n\n\n\n                                </li>\n\n                                <li>\n                                    <div>\n                                        <span className='form-small-tittle' >Template Name <span style={{ color: \"red\" }}>*</span></span>\n                                        <span className='form-caption' ></span>\n                                    </div>\n\n                                    <div className={`form-light-background ${validationError.templateName ? \"form-error\" : \"form-ok\"}`}>\n                                        <input\n                                            value={templateName}\n                                            onChange={(e) => { handleTemplateNameChange(e) }}\n                                            type=\"text\"\n                                            className='form-input-text'\n                                            placeholder='Enter template name'\n                                            style={{ width: \"364px\" }}\n                                        />\n\n\n\n                                    </div>\n\n\n                                    <span className='prescription-form-error'>\n                                        {validationError.templateName ? validationError.templateName : <EmptySpace />}\n                                    </span>\n\n\n\n                                </li>\n\n\n\n\n\n                            </ul>\n\n\n\n                            <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Patient Reports</span>\n\n\n                            <div onClick={() => { setActiveLeft(leftMenus[0].name) }} className='report-list-container'>\n\n\n\n\n\n                                <div style={{ padding: \"0rem\", display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", marginTop: \"1rem\", width: \"100%\", justifyContent: \"space-between\" }}>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\" }}>\n                                        <span className='form-small-tittle' >Chief Complaints</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea\n                                                id=\"chiefComplaints\"\n                                                value={submissionData.chiefComplaints ? submissionData.chiefComplaints : \"\"}\n                                                className='form-input-text-area'\n                                                name=\"chiefcomplaints\"\n                                                placeholder=\"Type here\"\n                                                rows={4}\n                                                onChange={(e) => {\n                                                    // setPrescriptioninfo({ ...presciptioninfor, cheifcomplaints: e.target.value })\n                                                    onChangeSubmissiondata(e.target.id, e.target.value)\n                                                }} />\n                                        </div>\n                                    </div>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\", marginLeft: \"1rem\" }}>\n                                        <span className='form-small-tittle' >Relevant points from history</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea id=\"releventPoint\"\n                                                value={submissionData.releventPoint ? submissionData.releventPoint : \"\"}\n                                                className='form-input-text-area'\n                                                rows={4} placeholder=\"Type here\"\n                                                onChange={(e) => {\n                                                    // setPrescriptioninfo({ ...presciptioninfor, relevantpointfromhistory: e.target.value })\n                                                    onChangeSubmissiondata(e.target.id, e.target.value)\n                                                }} />\n                                        </div>\n                                    </div>\n\n                                </div>\n\n\n                                <div style={{ padding: \".0rem\", display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", marginTop: \"1rem\", width: \"100%\", justifyContent: \"space-between\" }}>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\" }}>\n                                        <span className='form-small-tittle' >Diagnosis or Provisional Diagnosis</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea value={submissionData.diagnosis ? submissionData.diagnosis : \"\"} id=\"diagnosis\" className='form-input-text-area' rows={4} placeholder=\"Type here\" onChange={(e) => {\n                                                // setPrescriptioninfo({ ...presciptioninfor, diagnosis: e.target.value })\n                                                onChangeSubmissiondata(e.target.id, e.target.value)\n                                            }} />\n                                        </div>\n                                    </div>\n\n                                    <div style={{ display: \"fex\", flexDirection: \"column\", marginLeft: \"1rem\" }}>\n                                        <span className='form-small-tittle' >Examination/Lab Findings</span>\n\n                                        <div className='form-light-background-big'>\n                                            <textarea id=\"examination\" value={submissionData.examination ? submissionData.examination : \"\"} className='form-input-text-area' rows={4} placeholder=\"Type here\" onChange={(e) => {\n                                                // setPrescriptioninfo({ ...presciptioninfor, examinationlabfindings: e.target.value })\n\n                                                onChangeSubmissiondata(e.target.id, e.target.value)\n                                            }} />\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                            </div>\n\n\n                            <div className=\"separator\"></div>\n\n                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\", width: \"99%\", }}>\n                                <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Investigations</span>\n\n                                {\n                                    isReadyToAddInvestigation ?\n\n\n                                        <button className={isReadyToAddInvestigation ? \"add-investigation-btn\" : \"add-investigation-btn-disabled\"} onClick={() => { addInvestigation() }}>\n                                            <AddIcon_Prescription /> {getAddInvestigationButtonText(investigationData.length)}\n                                        </button>\n\n\n                                        :\n\n                                        <Popover trigger=\"click\" content={isReadyToAddInvestigation ? null : noInvestigationPopOver}>\n\n                                            <button className={isReadyToAddInvestigation ? \"add-investigation-btn\" : \"add-investigation-btn-disabled\"} onClick={() => { addInvestigation() }}>\n                                                <AddIcon_Prescription /> {getAddInvestigationButtonText(investigationData.length)}\n                                            </button>\n\n                                        </Popover>\n\n                                }\n\n                            </div>\n\n\n\n                            {finalInvestigations.length > 0 ?\n\n\n                                <table onClick={() => { setActiveLeft(leftMenus[1].name) }} ref={InvestigationElement} className='investigations-table'>\n\n                                    <tr>\n                                        <th><div>#</div></th>\n                                        <th><div>Investigation Name(s)</div></th>\n                                        <th colSpan=\"2\"><div>Comments/Instructions</div></th>\n\n                                    </tr>\n\n\n                                    {\n\n\n                                        finalInvestigations.map((obj, key) => {\n\n\n\n\n                                            return (\n\n                                                <tr>\n                                                    <td>{key + 1}</td>\n                                                    <td>\n                                                        {/* <Select\n\n\n\n                                                            getPopupContainer={trigger => trigger.parentNode}\n                                                            style={{ position: \"absolute\" }}\n\n\n                                                            value={obj.name}\n\n\n                                                            optionFilterProp=\"children\"\n                                                            showSearch\n\n                                                            filterOption={(input, option) =>\n                                                                option.children.toLowerCase().startsWith(input.toLowerCase()) ? true : false\n                                                            }\n\n                                                            filterSort={(optionA, optionB) =>\n                                                                optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                                            }\n\n\n                                                            placeholder=\"Select investigation\" style={{ width: \"100%\" }}\n\n\n                                                            onChange={(e) => {\n\n                                                                // InvestigationNameOnChange({ data: e, id: obj.id })\n                                                                // setLabtest([...labtest, {\n                                                                //     testType: \"\",\n                                                                //     testNames: e,\n                                                                //     comment: \"\",\n                                                                //     id: key + 1\n                                                                // }])\n                                                                updateInvestigationTable({ data: e, id: key, key: \"name\", state: investigationData })\n\n\n                                                            }} >\n                                                            {\n                                                                test ? test.map((obj2, key) => {\n\n                                                                    return (\n                                                                        <Option value={obj2}>{obj2}</Option>\n                                                                    )\n\n\n                                                                }) : null\n                                                            }\n\n\n                                                        </Select> */}\n\n\n                                                        <MuiAutoComplete\n                                                            placeholder=\"Select investigation\"\n                                                            id={key}\n                                                            value={obj.name}\n                                                            data={test ? test : []}\n                                                            onChange={test && updateInvestigationTable}\n                                                            name='name' />\n                                                    </td>\n                                                    <td>\n\n\n\n                                                        <textarea\n\n                                                            rows={1}\n                                                            value={obj.comment ? obj.comment : \"\"}\n                                                            placeholder='Type here'\n                                                            className='investigations-input-text-area'\n                                                            onChange={(e) => { updateInvestigationTable({ data: e.target.value, id: key, key: \"comment\", state: investigationData }) }}\n                                                        //  onBlur={(e) => { InvestigationTextAreaOnChange({ data: e.target.value, id: obj.id }) }}\n                                                        />\n\n\n\n                                                    </td>\n\n                                                    <td>\n                                                        <div style={{ cursor: \"pointer\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent: \"center\" }} onClick={() => { removeInvestigation(key) }}> <DeleteIcon_Prescription /></div></td>\n                                                </tr>\n\n                                            )\n                                        })\n\n\n                                    }\n\n                                </table>\n\n                                :\n\n                                <div className=\"no-table-data\" ref={InvestigationElement}>\n                                    ( No Investigations found )\n                                </div>\n\n                            }\n\n                            <div className=\"separator\"></div>\n\n                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\", width: \"99%\", }}>\n\n                                <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Medicines</span>\n\n\n                                {\n                                    isReadtToAddMedicine.status ?\n\n\n                                        <button className={isReadtToAddMedicine.status ? 'add-investigation-btn' : 'add-investigation-btn-disabled'} onClick={addMedicine}> <AddIcon_Prescription />  Add Medicines</button>\n\n                                        :\n\n                                        <Popover trigger=\"click\" content={noMedicinePopOver}>\n                                            <button className={isReadtToAddMedicine.status ? 'add-investigation-btn' : 'add-investigation-btn-disabled'} > <AddIcon_Prescription />  Add Medicines</button>\n                                        </Popover>\n\n\n                                }\n\n\n\n\n                            </div>\n\n\n                            {\n                                finalMedicinesdata.length > 0 ?\n\n                                    <div onClick={() => { setActiveLeft(leftMenus[2].name) }} ref={MedicineElement} className='medicine-table-container'>\n\n\n\n                                        <table\n                                            className='medicine-table'>\n\n                                            <tr>\n                                                <th><div>#</div></th>\n                                                {/* <th><div>Medicine Type</div></th> */}\n                                                <th><div>Name of Medicine</div></th>\n                                                <th><div>When to have</div></th>\n                                                <th><div>Frequency</div></th>\n                                                <th><div>Quantity</div></th>\n                                                <th><div>Unit</div></th>\n                                                <th><div>Starting Date</div></th>\n                                                <th><div>No.of Days</div></th>\n                                                <th colspan=\"2\"><div>Instructions</div></th>\n\n                                            </tr>\n\n\n\n                                            {\n\n\n                                                finalMedicinesdata.map((obj, key) => {\n\n                                                    return (\n\n                                                        <tr>\n                                                            <td>{key + 1}</td>\n                                                            {/* <td>\n\n                                                                DRUGS\n\n                                                            </td> */}\n                                                            <td>\n\n                                                                {\n\n\n\n                                                                    <MuiAutoComplete\n                                                                        placeholder=\"Select medicine\"\n                                                                        id={key}\n                                                                        value={obj.name}\n                                                                        data={medicine ? medicine : []}\n                                                                        onChange={updateMedicineTable}\n                                                                        name='name' />\n\n\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                {\n\n                                                                    <MuiDropdown\n                                                                        placeholder=\"When to have\"\n                                                                        id={key}\n                                                                        data={['Before Food', 'After Food', 'SOS']}\n                                                                        name=\"when\"\n                                                                        value={obj.when}\n                                                                        onChange={updateMedicineTable}\n                                                                        isMedTable\n                                                                    />\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                {\n\n\n                                                                    <MuiDropdown\n                                                                        value={obj.freequancy}\n                                                                        placeholder=\"Select frequency\"\n                                                                        id={key}\n                                                                        data={frequecny ? frequecny : []}\n                                                                        name=\"freequancy\"\n                                                                        onChange={updateMedicineTable}\n                                                                        isMedTable\n                                                                    />\n\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                <input\n                                                                    value={obj.quantity ? obj.quantity : \"\"}\n                                                                    onKeyPress={validateNumberOnKeyPress}\n                                                                    placeholder='Enter quantity'\n                                                                    type=\"text\"\n                                                                    className='investigations-input-text-input'\n                                                                    onChange={(e) => updateMedicineTable({ data: e.target.value, id: key, key: \"quantity\" })} />\n\n\n                                                            </td>\n\n                                                            <td>\n\n\n                                                                <MuiDropdown\n                                                                    value={obj.unit}\n                                                                    placeholder=\"Select unit\"\n                                                                    id={key}\n                                                                    data={units ? units : []}\n                                                                    name=\"unit\"\n                                                                    onChange={updateMedicineTable}\n                                                                    isMedTable\n                                                                />\n\n\n                                                            </td>\n                                                            <td>\n\n\n                                                                <MuiDatePicker\n\n                                                                    placeholder=\"Select date\"\n                                                                    minDate={new Date()}\n                                                                    id={key}\n                                                                    name=\"date\"\n                                                                    _value={obj.date}\n                                                                    onChange={updateMedicineTable}\n                                                                    isMedTable\n                                                                />\n                                                            </td>\n                                                            <td>\n                                                                {\n\n                                                                    <MuiDropdown\n                                                                        value={obj.days}\n                                                                        placeholder=\"Select days\"\n                                                                        id={key}\n                                                                        data={getNumberOfDays(120)}\n                                                                        name=\"days\"\n                                                                        onChange={updateMedicineTable}\n                                                                        isMedTable\n                                                                    />\n\n\n                                                                }\n                                                            </td>\n                                                            <td>\n                                                                <textarea\n                                                                    value={obj.instructions ? obj.instructions : \"\"}\n                                                                    defaultValue={obj.instructions} className='medicine-table-input-text-area' rows={1} placeholder='Type here' onChange={(e) => {\n                                                                        updateMedicineTable({ data: e.target.value, id: key, key: \"instructions\" })\n                                                                    }} />\n                                                            </td>\n                                                            <td><div style={{ cursor: \"pointer\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\", justifyContent: \"center\" }} onClick={() => { removeMedicine(obj.id) }}><DeleteIcon_Prescription /></div></td>\n\n                                                        </tr>\n\n                                                    )\n                                                })\n\n\n\n\n                                            }\n\n\n\n\n\n                                        </table>\n\n                                    </div>\n\n                                    : <div className=\"no-table-data\" ref={MedicineElement}>\n                                        ( No Medicines found )\n                                    </div>\n                            }\n\n\n\n\n\n\n\n\n\n                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\", width: \"99%\", }}>\n\n                                <span className='form-heading-2' style={{ marginTop: \"1rem\" }}>Additional Instructions</span>\n\n                            </div>\n\n                            <div onClick={() => { setActiveLeft(leftMenus[3].name) }} className='form-light-background' style={{ width: \"45%\" }}>\n                                <textarea value={submissionData.additionalInstruction ? submissionData.additionalInstruction : \"\"} ref={AddInstructionElement} className='form-input-text-area' rows={3} placeholder='Type here' style={{ width: \"100%\" }} onChange={(e) => {\n                                    onChangeSubmissiondata(\"additionalInstruction\", e.target.value)\n                                }} />\n                            </div>\n\n\n\n                            {/* <input className='focusPoint' ref={AddInstructionElement} type=\"text\" name=\"\" id=\"\" /> */}\n\n\n\n\n                            <br></br>\n                            <br></br>\n                            <br></br>\n                            <br></br>\n                            <br></br>\n\n                            <div> &nbsp;</div>\n\n\n\n\n\n\n                        </div>\n                    </div>\n\n\n                </div>\n\n\n            </div>\n            <Modal deletingFrom={deletingFrom} state={isConfirmDelete} setState={setConfirmDelete} data={investigationData} removeIndex={deleteIndex} />\n            <Modal deletingFrom={deletingFrom} state={isConfirmDeleteMedicine} setState={setConfirmDeleteMedicine} data={medicinesData} removeIndex={deleteIndexMedicine} />\n            <SuccessModal clearData={clearPrepopulateddate} isPreload={preloadData} setEditMode={setEditMode} state={isSuccess} setState={setSuccess} successMessage={successMessage} />\n            <FailiureModal state={isFailed} setState={setFailed} />\n            <LoaderModel state={isLoading} />\n            {/* <NetworkErrorModal state={isNetworkError} setState={setNetworkError} refresh={refreshPage} /> */}\n\n            {\n                isReadyToSubmit ?\n\n                    <div className=\"button-container\">\n                        <button disabled={isLoading} onClick={() => { createPrescription() }} className={isLoading ? 'save-rescription-btn-disabled' : 'save-rescription-btn'} > <LabelIcon_Prescription />  {preloadData ? \"UPDATE\" : \"SAVE\"} TEMPLATE</button>\n                    </div> : null\n            }\n        </div >\n    )\n}\n\nexport default PriscriptionForm\n","import { Pagination, Popover, Tooltip } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DatePicker, Space } from 'antd';\nimport './prescriptiontemplatelist.css'\n// import { FETCH_MIS_REPORT, GET_DASHBOARD_MORE } from '../../Redux/Slice/DetailedReportSlice';\nimport { INTERBRANCH_MODAL } from '../../actions/type';\nimport { FETCH_ADMIN_DASHBOARD_REPORT, FETCH_DASHBOARD_MORE } from '../../actions/InterbranchAdminActions';\nimport { separaetdateAndTime } from '../../Helpers/dateFunctions';\nimport { BackArrow, EditIcon, ViewIcon } from '../../assets/Logos/Icons';\nimport { getDepartments, getTemplateList } from '../../actions/PrescriptionFormActions';\nimport PrescriptionForm from '../PrescriptionForm/PriscriptionForm'\nimport { useHistory, useLocation } from 'react-router-dom';\nimport EmptyTableData from '../Common/EmptyTableData/EmptyTableData';\n\n\nconst { RangePicker } = DatePicker;\n\nfunction TemplateList() {\n\n    const dispatch = useDispatch()\n    const dateRef = useRef(null)\n\n    let dashboardData = useSelector(state => state.interbranchAdmin.dashboardTable)\n\n\n    let [isOpen, setOpen] = useState(false)\n    let [pagination, setPagination] = useState(0)\n\n\n\n\n\n\n\n\n    //Version 2 ...................................................................................\n\n    let [templateList, setTemplateList] = useState([])\n    let [templateTotalPage, setTemplateTotalPage] = useState(0)\n    let [isEditMode, setEditMode] = useState(false)\n\n    let [searchKey, setSearchKey] = useState(null)\n    let [filterData, setFilterData] = useState([])\n\n    let history = useHistory()\n    const location = useLocation();\n\n\n    useEffect(() => {\n\n        dispatch(getTemplateList({ offset: 0 })).then((res) => {\n\n            setTemplateList(res.data)\n            setTemplateTotalPage(res.total)\n        })\n\n    }, [])\n\n\n    useEffect(() => {\n\n        dispatch(getTemplateList({ offset: pagination })).then((res) => {\n\n            setTemplateList(res.data)\n            setTemplateTotalPage(res.total)\n        })\n\n    }, [isEditMode])\n\n\n    let handlePaginationChange = (e, s) => {\n\n        dispatch(getTemplateList({ offset: e - 1 })).then((res) => {\n\n            setTemplateList(res.data)\n            setTemplateTotalPage(res.total)\n            setPagination(e - 1)\n\n        })\n\n        // dispatch(FETCH_ADMIN_DASHBOARD_REPORT({ offset: e - 1 }))\n\n        // if (pagination < dashboardData.length) {\n        //     setPagination(pagination + 10)\n        // }\n\n    }\n\n\n    let handleEditOnClick = (rowData, element) => {\n\n        setEditMode({ ...rowData, tempId: element.tempId, departmentName: element.assignedDepartments, doctors: element.Doctors, department: element.Departments[0] })\n        //console.log(rowData);\n\n    }\n\n    let handleViewOnClick = (rowData, tempId) => {\n\n\n        let url = `viewprescription/${rowData.basicinfo.templateId}`\n\n        console.log(url);\n        console.log(rowData);\n\n        window.open(url, \"_blank\")\n        // history.push({\n        //     pathname:`viewprescription/:${rowData.basicinfo.templateName}`,\n        //     state:{rowData,tempId}\n        // })\n    }\n\n    let convertToArray = (data) => {\n\n        if (data) {\n            return data.split(\",\")\n        }\n\n    }\n\n    let convertStringWithSpace = (data) => {\n\n        let array = data.split(\",\")\n        let newArray = []\n\n\n        array.map((element) => {\n            newArray.push(`${element}  `)\n        })\n\n        return newArray.toString()\n    }\n\n    useEffect(() => {\n        setFilterData(templateList)\n    }, [templateList])\n\n    useEffect(() => {\n\n        handleSearch(searchKey ? searchKey : null)\n\n    }, [searchKey])\n\n    let handleSearch = (value) => {\n\n        let oldData = templateList\n\n        if (value && value != \"\") {\n\n\n            let filteredData = oldData.filter((element) => {\n\n                if (element.tempId.includes(value.toString())) {\n                    return true\n                }\n\n                if (element.tempName.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n\n                if (element.Departments[0].Name.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n\n                if (element.createdDate.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n\n                if (element.updatedDate.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n                // if (element.doctorname.toLowerCase().includes(value.toString().toLowerCase())) {\n                //     return true\n                // }\n            })\n\n            setFilterData(filteredData)\n        }\n        else {\n            console.log(\"No search key...\");\n            setFilterData(templateList ? templateList : [])\n        }\n\n    }\n\n\n\n\n\n    const Content = ({ data }) => {\n\n\n        return (\n            <div className='view-prescription-doctor-list-container-small'>\n\n                <ul>\n                {\n                    data.split(\",\")?.length > 0 ?\n\n                        data.split(\",\").map((element, key) => {\n                            return (\n                                <>\n                                    <li>{element}{key > data.split(\",\").length - 2 ? \"\" : \"\"} </li>\n                                </>\n\n                            )\n                        })\n\n                        : null\n                }\n                </ul>\n                \n            </div>\n        )\n    }\n\n\n    let [isLoading, setIsLoading] = useState(false)\n\n    useEffect(() => {\n\n        console.log(\"Start loading....................\");\n        setIsLoading(true)\n\n    }, [])\n\n    useEffect(() => {\n\n        if (filterData.length > 0) {\n\n            console.log(\"Stop loading....................\");\n            setIsLoading(false)\n        }\n        if (filterData.length < 0) {\n\n            console.log(\"Stop loading....................\");\n            setIsLoading(false)\n        }\n\n    }, [filterData])\n\n\n    return (\n        <div className='appontment-history-container'>\n\n            {/* {\n                !isEditMode ?\n\n                    <div className=\"search-container\">\n                        <input value={searchKey} onChange={(e) => { setSearchKey(e.target.value) }} type=\"text\" name=\"\" id=\"\" placeholder='Search' />\n                    </div> : null\n            } */}\n\n            {\n                isEditMode ?\n\n                    <div style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        width: \"100%\"\n                    }}>\n                        <div style={{ marginBottom: \".8rem\", marginTop: \".8rem\", cursor: \"pointer\", width: \"fit-content\" }} onClick={() => { setEditMode(null) }}>\n                            <BackArrow size={14} />\n                            <b style={{ marginLeft: \".5rem\" }}>Back</b>\n                        </div>\n\n                        <PrescriptionForm\n                            setEditMode={setEditMode}\n                            preloadData={isEditMode} />\n                    </div>\n\n\n                    :\n                    <div className=\"todays_report_table_container\">\n\n                        <table className='appoinment-table' >\n                            <thead>\n                                <tr>\n                                    <th>Template ID</th>\n                                    <th>Template Name</th>\n                                    <th>Speciality</th>\n                                    <th>Created On</th>\n                                    <th>Last Updated On</th>\n                                    {/* <th>Template Files</th> */}\n                                    <th>Assigned To</th>\n                                    {/* \n                        <th>Fees Paid</th>\n                        <th>Consultation Status</th>\n                        <th>Next Steps</th> */}\n                                    <th><div className='center'>Edit</div></th>\n                                    <th><div className='center'>View</div></th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n\n                                {\n\n                                    filterData.length > 0 ? filterData.map((element, key) => {\n\n                                        return (\n\n                                            <tr>\n                                                <td>{element.tempId}</td>\n                                                <td>{element.tempName}</td>\n                                                <td>{element.Departments[0]?.Name}</td>\n                                                <td>{element.createdDate}</td>\n                                                <td>{element.updatedDate ? element.updatedDate : \"No Data Available\"}</td>\n                                                <td>{element.assignedDoctors ?\n                                                    convertToArray(element.assignedDoctors).length > 1 ?\n\n                                                        <Popover content={<Content data={element?.assignedDoctors} />} title={`Doctors list (${element?.assignedDoctors.split(\",\").length})`}>\n                                                            {convertToArray(element.assignedDoctors)[0]}, +{convertToArray(element.assignedDoctors).length - 1}\n                                                        </Popover>\n                                                        : convertStringWithSpace(element.assignedDoctors)\n                                                    : \"No Data Available\"}</td>\n                                                <td><div className=\"edit-btn center\" onClick={(() => { handleEditOnClick(element.tempData, element) })}><EditIcon /></div></td>\n                                                {/* <td><div className=\"edit-btn\" onClick={() => { handleViewOnClick(element.tempData, element.tempId) }}><ViewIcon /></div></td> */}\n                                                <td><a className='center' href={\"viewprescription/\" + element.tempId} target=\"_blank\"><ViewIcon /></a></td>\n                                            </tr>\n\n                                        )\n\n                                    })\n                                        : <tr>\n                                            <td colSpan={7}>\n                                                <EmptyTableData isLoading={isLoading} />\n                                            </td>\n                                        </tr>\n                                }\n\n\n\n\n                                {/* {\n                            dashboardData ?\n                                dashboardData.length > 0 ?\n\n                                    dashboardData.map((eachRow, key) => {\n\n                                        if (key <= 10) {\n                                            return (\n\n                                                <tr>\n                                                    <td>{eachRow.appointmentId}</td>\n                                                    <td>{separaetdateAndTime(eachRow.appointmentdate)?.date}</td>\n                                                    <td>{separaetdateAndTime(eachRow.appointmentdate)?.time} GMT+05:30</td>\n                                                    <td>{eachRow.patientname}</td>\n                                                    <td>{eachRow.doctorname}</td>\n                                                    <td>{eachRow.fees}</td>\n                                                    <td>{eachRow.appointmentStatus}</td>\n                                                    <td>{eachRow.followupdetails}</td>\n                                                    <td ><button onClick={() => { handleTableClick(eachRow.appointmentId) }} className='more-btn' >More</button></td>\n\n                                                </tr>\n\n                                            )\n\n                                        }\n\n\n\n\n\n                                    })\n\n                                    : null\n                                : null */}\n                                {/* } */}\n\n\n                            </tbody>\n                        </table>\n\n                    </div>\n            }\n\n\n            <div className=\"pagination-container-mis-report\">\n                &nbsp;\n                <Pagination onChange={handlePaginationChange} defaultCurrent={1} total={templateTotalPage ? templateTotalPage * 10 : 0} />\n            </div>\n\n        </div>\n    )\n}\n\nexport default TemplateList\n","import React from 'react'\nimport { CompletedGreen } from '../../../../assets/Logos/Icons'\nimport './syncsuccessmodal.css'\n\nfunction SyncSuccessModal({ state, setState, onOk }) {\n\n    let handleOk = () => {\n\n        onOk&&onOk()\n        setState(false) \n        \n    }\n\n\n    return (\n\n        <>\n            {state ?\n\n                <div className=\"modal-loader syncsuccessmodal\" >\n                    <div className=\"modal-body-prescription body\">\n\n                        <div className=\"modal-content-prescription content\">\n                            <CompletedGreen />\n                            <span className='syncsuccessmodal-message'> Data Successfully Sync...</span>\n                        </div>\n\n                        <div onClick={handleOk} className=\"syncsuccessmodal-footer\">\n                            Ok\n                        </div>\n\n\n                    </div>\n\n\n\n\n                </div> : null}\n        </>\n\n    )\n}\n\nexport default SyncSuccessModal\n","import { DatePicker, Modal, Pagination, Tooltip } from 'antd';\nimport React, { useRef, useState, useEffect } from 'react'\nimport moment from \"moment\"\nimport './prescriptiondashboard.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport StatusBadge from '../Badges/StatusBadge/StatusBadge';\nimport { FETCH_ADMIN_DASHBOARD_REPORT, FETCH_ADMIN_DETAILED_REPORT, FETCH_DASHBOARD_MORE, FETCH_DETAILED_MORE, updateMisReportComment } from '../../actions/InterbranchAdminActions';\nimport { INTERBRANCH_MODAL } from '../../actions/type';\nimport { convertDateToString } from '../../Helpers/dateFunctions';\nimport { FETCH_PR_ADMIN_DASHBOARD_REPORT, pushToHisCall, syncLabAndMedicine } from '../../actions/PrescriptionFormActions';\nimport CustomeModal from '../CustomeModal/CustomeModal';\nimport SyncSuccessModal from '../PrescriptionForm/Components/SyncSuccessModal/SyncSuccessModal';\nimport EmptyTableData from '../Common/EmptyTableData/EmptyTableData';\n\n\nconst { RangePicker } = DatePicker;\n\nfunction PrescriptionDashboard() {\n\n    const dateRef = useRef(null)\n    const { crDashboard,crDashboardTotal, isLoading } = useSelector((state) => state.presctiptionFormReducer)\n\n    let [isOpen, setOpen] = useState(false)\n    let [searchKey, setSearchKey] = useState(null)\n    let [filterData, setFilterData] = useState([])\n    let [isSyncing, setSyncing] = useState(false)\n    let [syncSuccess, setSyncSuccess] = useState(false)\n\n    let [_isSyncing, _setSyncing] = useState(false)\n    let [_syncSuccess, _setSyncSuccess] = useState(false)\n    let [individualSync, setIndividualSync] = useState(null)\n\n    let [pagination, setPagination] = useState(0)\n    let [dateRange,setDaterange]=useState({fromDate: \"\", toDate: \"\"})\n\n    let [isInitialLoading,setInitialLoading]=useState(true)\n   \n    \n\n\n\n    const dispatch = useDispatch()\n\n    let handleTableClick = (_id) => {\n\n        dispatch(FETCH_DETAILED_MORE(_id))\n\n        dispatch({\n            type: INTERBRANCH_MODAL,\n            payload: {\n                name: \"misReportModal\",\n                value: true\n            }\n        });\n\n\n\n    }\n\n    let filterOnClick = () => {\n\n        setOpen(!isOpen)\n\n    }\n\n    let handledateChange = (e) => {\n\n\n\n        if (e) {\n            let [startDate, endDate] = e\n\n            let prevDate = moment().subtract(3, 'months')\n\n            console.log(convertDateToString(prevDate));\n\n            console.log({ fromDate: startDate, toDate: endDate });\n\n            setDaterange({ fromDate: startDate, toDate: endDate })\n\n            dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({ fromDate: startDate, toDate: endDate }))\n\n            // if (startDate < prevDate) {\n\n            //     Modal.confirm({\n            //         title: 'Confirm',\n            //         // icon: <ExclamationCircleOutlined />,\n            //         content: 'You can only view report within a 3 month span. Do you want to download the report before 3 months?',\n            //         okText: 'Download Report',\n            //         cancelText: 'cancel',\n            //         onOk() {\n            //             downloadReport(startDate, endDate)\n            //         },\n            //     });\n            // }\n            // else {\n\n            //     // dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({ fromDate: startDate, toDate: endDate }))\n\n            //     // dispatch(FETCH_ADMIN_DETAILED_REPORT({ fromDate: startDate, toDate: endDate }))\n            //     //downloadReport(startDate, endDate)\n            // }\n\n        }\n        else {\n            dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT())\n\n        }\n\n// pp dashboard\n    }\n\n    let downloadReport = (startDate, endDate) => {\n\n        console.log(\"Ready to download report................\");\n\n    }\n\n\n//dashboard\n    useEffect(() => {\n        setFilterData(crDashboard?.prescriptionlist?crDashboard?.prescriptionlist:[])\n    }, [crDashboard])\n\n\n    useEffect(() => {\n\n        if(crDashboard?.prescriptionlist)\n        {\n            handleSearch(searchKey ? searchKey : null)\n        }\n       \n\n    }, [searchKey])\n\n\n    let handleSearch = (value) => {\n\n        let oldData = crDashboard?.prescriptionlist\n\n        if (value && value != \"\") {\n            console.log(\"Have search key...\", value.length);\n\n            let filteredData = oldData.filter((element) => {\n\n                if (element.appointmentID.includes(value.toString())) {\n                    return true\n                }\n\n                if (element.patientName.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n                if (element.doctorname.toLowerCase().includes(value.toString().toLowerCase())) {\n                    return true\n                }\n            })\n\n            setFilterData(filteredData)\n        }\n        else {\n            console.log(\"No search key...\");\n            setFilterData(crDashboard.prescriptionlist ? crDashboard.prescriptionlist : [])\n        }\n\n    }\n\n    let handleDownloadClick = (link) => {\n\n        if (link) {\n            window.open(link, \"_blank\")\n        }\n\n    }\n\n    let syncTM = () => {\n\n        if (!isSyncing) {\n\n            console.log(\"Start sync\");\n            setSyncing(true)\n\n            dispatch(syncLabAndMedicine()).then((res) => {\n\n                setSyncing(false)\n                console.log(res);\n                setSyncSuccess(true)\n\n            })\n\n\n        }\n\n    }\n\n\n    let pushToHis = (_id) => {\n\n        if (!_isSyncing) {\n\n            setIndividualSync(_id)\n            console.log(\"Start sync individual\");\n            _setSyncing(true)\n\n            dispatch(pushToHisCall(_id)).then((res) => {\n\n                _setSyncing(false)\n                console.log(res);\n                setSyncSuccess(true)\n\n            })\n\n\n        }\n\n    }\n\n    let reloadData = () => {\n\n        dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({...dateRange,offset:pagination}))\n\n    }\n\n    let handlePaginationChange = (e, s) => {\n\n        dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT({...dateRange,offset:e-1})).then((res) => {\n\n            setPagination(e - 1)\n\n        })\n\n        // dispatch(FETCH_ADMIN_DASHBOARD_REPORT({ offset: e - 1 }))\n\n        // if (pagination < dashboardData.length) {\n        //     setPagination(pagination + 10)\n        // }\n\n    }\n\n\n    useEffect(() => {\n        \n        return () => {\n            dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT())\n        }\n    }, [])\n\n\n\n    return (\n        <div className='mis_report_container'>\n\n            <div className=\"header\">\n\n                <button onClick={syncTM}>\n\n                    <div className={`icon ${isSyncing ? \"rotate\" : \"\"}`}><i class=\"far fa-sync\"></i></div>{isSyncing ? \"Syncing...\" : \"Sync Lab Test & Medicine\"}</button>\n\n                <div className=\"filter-button\" >\n\n                    <div className=\"icon\" onClick={filterOnClick}><i class=\"far fa-calendar-alt\"></i></div>\n\n\n                    <RangePicker\n                        style={{ width: \"250px\" }}\n                        // open={isOpen}\n                        inputReadOnly\n                        format=\"DD-MMM-YYYY\"\n                        ref={dateRef}\n                        bordered={false}\n                        className=\"date-picker\"\n                        suffixIcon={null}\n                        // disabledDate={(current) => {\n                        //     return moment().add(-3, 'month') >= current\n                        //     // ||\n                        //     //  moment().add(1, 'month')  <= current;\n                        // }}\n                        onChange={handledateChange} />\n                </div>\n\n\n            </div>\n\n\n            <div className='mis_report_table_container'>\n\n                {/* <div className=\"search-container\">\n                    <input value={searchKey} onChange={(e) => { setSearchKey(e.target.value) }} type=\"text\" name=\"\" id=\"\" placeholder='Search' />\n                </div> */}\n\n\n                <table className='appoinment-table'>\n                    <tr>\n                        <th>App Id</th>\n                        <th style={{ width: \"230px\" }}>Patient</th>\n                        <th>Doctor</th>\n                        <th>App Date & Time</th>\n                        {/* <th>Appointment Time</th> */}\n                        <th>Prescription</th>\n                        {/* <th>Send Time</th>\n                        <th>Received Time</th> */}\n                        <th>Sync Status</th>\n                        {/* <th>Consultation Status</th>\n                        <th>Payment Status</th>\n                        <th>Notes</th> */}\n\n                    </tr>\n\n                    <tbody>\n\n                        {\n                           \n\n\n\n                                filterData.length>0?filterData.map((element, key) => {\n\n                                    return (\n\n                                        <tr>\n                                            <td>\n                                                {element.appointmentID}\n\n                                            </td>\n                                            <td>{element.patientName}</td>\n                                            <td>{element.doctorname}</td>\n                                            <td>{`${element.appointmentDate}, ${element.appointmentTime}`}</td>\n                                            <td>\n                                                <div onClick={() => { handleDownloadClick(element.prescriptionFile) }} className=\"link-style\">Download</div>\n                                            </td>\n                                            <td >\n                                                <div style={{\n                                                    display: \"flex\",\n                                                    flexDirection: \"row\",\n                                                    alignItems: \"center\"\n                                                }}>\n                                                    <div className=\"prescription_sync_status_indicator \">\n                                                        <div className={`${element.pushstatus === \"true\" ? \"completed\" : \"pending\"}`}></div>\n\n                                                    </div>\n\n                                                    &nbsp; &nbsp;\n\n                                                    {\n                                                        element.pushstatus == \"true\" ? \"\" :\n\n                                                            individualSync == element.id && _isSyncing ?\n                                                                <div className={`icon rotate`}><i class=\"far fa-sync\"></i></div> :\n                                                                <span onClick={() => { pushToHis(element.id) }} className=\"link-style\">Push to HIS</span>\n                                                    }\n                                                </div>\n                                            </td>\n                                        </tr>\n\n                                    )\n\n                                })\n\n\n                                : <tr>\n                                    <td colSpan={6}>\n                                        <EmptyTableData marginTop={200} isLoading={isLoading} />\n                                    </td>\n                                </tr>\n                        }\n\n\n\n                    </tbody>\n                </table>\n\n            </div>\n\n\n            <div className=\"pagination-container-mis-report\">\n\n                &nbsp;\n                <Pagination showSizeChanger={false} onChange={handlePaginationChange} defaultCurrent={1} total={crDashboardTotal ? crDashboardTotal * 10 : 0} />\n            </div>\n\n\n\n            <SyncSuccessModal onOk={reloadData} state={syncSuccess} setState={setSyncSuccess} />\n\n        </div>\n    )\n}\n\nexport default PrescriptionDashboard","import ConsolidatedReport from \"../../components/ConsolidatedReport/ConsolidatedReport\";\n//import Misreport from \"../../components/MisReport/Misreport\";\n import PrescriptionDashboard from \"../../components/PrescriptionDashboard/prescriptionDashboard\";\nimport PriscriptionForm from \"../../components/PrescriptionForm/PriscriptionForm\";\n//import TodaysReport from \"../../components/TodaysReport/TodaysReport\";\nimport TemplateList from \"../../components/PrescriptionTemplateList/prescriptionTemplateList\";\nimport TodaysReport from \"../../components/TodaysReport/TodaysReport\";\n\nexport const prescriptionAdminSideMenu=[\n    // {\n    //     tittle:\"Dashboard\",\n    //     options:[\n    //         {\n    //             name:\"Dashboard\",\n    //             ico:<i class=\"fal fa-book-medical\"></i>,\n            \n    //             component:<prescriptionTemplateList/>,\n    //             date:\"10, February, 2021 - Wednesday\"\n    //         },\n           \n            \n    //     ]\n    // },\n    {\n        tittle:\" Template\",\n        options:[\n            // {\n            //     name:\"Today's Report\",\n            //     ico:<i class=\"fal fa-book-medical\"></i>,\n            //     component:<TodaysReport/>,\n            //     date:\"10, February, 2021 - Wednesday\"\n            // },\n            {\n                name:\"Create Template\",\n                ico:<i class=\"far fa-file-alt\"></i>,\n                component:<PriscriptionForm/>\n\n            },\n            {\n                name:\"Edit / View\",\n                ico:<i class=\"far fa-calendar-alt\"></i>,\n                component:<TemplateList/>\n\n            },\n           \n            \n        ]\n    },\n    \n    \n]\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from \"react-router\";\nimport { FETCH_ADMIN_DASHBOARD_REPORT, FETCH_ADMIN_DETAILED_REPORT, FETCH_CONSOLIDATED_REPORTS } from '../../actions/InterbranchAdminActions'\nimport CustomeModal from '../../components/CustomeModal/CustomeModal'\nimport MisReportModalContent from '../../components/MisReportModal/MisReportModalContent'\n//import TodaysReport from '../../components/TodaysReport/TodaysReport'\nimport TodaysReportModalContent from '../../components/TodaysReportModalContent/TodaysReportModalContent'\nimport TemplateList from \"../../components/PrescriptionTemplateList/prescriptionTemplateList\";\nimport PrescriptionDashboard from \"../../components/PrescriptionDashboard/prescriptionDashboard\";\nimport { TittleCard } from '../../components/Styled/TittleCard'\nimport { logoutAction } from \"../../actions/LoginAction\";\nimport { prescriptionAdminSideMenu } from './constants'\nimport '../InterbranchAdmin/interbranchadminhome.css'\nimport { SET_CR_DASHBOARD } from '../../actions/type';\nimport { FETCH_PR_ADMIN_DASHBOARD_REPORT } from '../../actions/PrescriptionFormActions';\nimport { LogoutSVG } from '../../assets/Logos/Icons';\n\nfunction Index() {\n\n    //Declerations..............................................................................\n    let dispatch = useDispatch()\n    let history = useHistory()\n\n//.............\n\n\n    //States....................................................................................\n    let [activeLeft, setActiveleft] = useState({ menu: \"dashboard\", option: 0 })\n\n    const { ApointmentHistoryModal, ViewFileModal, deleteFileModel, commonDeleteModal, PatientDetailsModal, todaysReportModal, misReportModal } = useSelector((state) => state.interbranchModal)\n\n\n\n\n    //Refs......................................................................................\n    const ref = useRef(null)\n\n    const userData = useSelector(\n        (state) => state.login.user\n    );\n    //Functions................................................................................\n\n    useEffect(() => {\n\n        dispatch(FETCH_PR_ADMIN_DASHBOARD_REPORT())\n\n    }, [])\n\n    let logoutFunction = () => {\n\n        dispatch(\n            logoutAction(userData)\n        );\n\n        history.push(\"home\")\n\n    }\n\n    console.log();\n\n    return (\n        <div className='interbranch-container'>\n            <div className=\"left-container\" >\n\n                <div className=\"letf-top\">\n                    <div className=\"header-card\" style={{ marginBottom: \"2.5rem\" }}>\n                        <TittleCard className=\"d-flex flex-column justify-content-center align-items-center mt-2\" style={{ \n                            width: \"100%\",\n                             height: \"79.14px\",\n                             color:\"rgba(0, 0, 0, 0.85)\"\n                            \n                              }}>\n\n                            <div className=\"dr-name-home text-center w-100\" style={{ fontWeight: \"500\" }} >{userData ? userData.profileName : \"---\"}</div>\n                            <div className=\"dr-id-home text-center w-100\" style={{ fontWeight: \"500\" }}>ID: {userData ? userData.profileId : \"---\"}</div>\n                        </TittleCard>\n                    </div>\n\n                    <div className=\"tittle\" onClick={() => { setActiveleft({ menu: \"dashboard\", option: 0 }) }} style={{ fontWeight: activeLeft.menu == \"dashboard\" ? \"bold\" : \"normal\", cursor: \"pointer\" }} >Dashboard</div>\n\n\n                    {\n                        prescriptionAdminSideMenu.map((object, menuKey) => {\n\n                            if (object.tittle !== \"Dashboard\") {\n                                return (\n\n                                    <React.Fragment key={menuKey}>\n\n                                        <div className=\"list-tittle\">{object.tittle}</div>\n\n                                        <ul className='side-nav'>\n\n                                            {\n                                                object.options.map((element, optionKey) => {\n                                                    return (\n                                                        <li key={optionKey} className={activeLeft.menu === menuKey && activeLeft.option === optionKey ? \"active\" : null} onClick={() => {\n                                                            setActiveleft({ menu: menuKey, option: optionKey })\n                                                            // dispatch(setSelectedAppointmentRedux(null))\n\n                                                        }}>\n                                                            <div className=\"icon\">\n                                                                {element.ico}\n                                                            </div>\n                                                            <div className=\"text\">{element.name}</div>\n                                                        </li>\n                                                    )\n                                                })\n                                            }\n\n\n                                        </ul>\n\n\n                                    </React.Fragment>\n\n                                )\n                            }\n\n                        })\n                    }\n\n                    <div className=\"header-card logout\" style={{ marginTop: \"2.5rem\", coursor: \"pointer !important\" }} onClick={logoutFunction}>\n                        <div className=\"icon\"><LogoutSVG/></div>\n                        SIGN OUT\n                    </div>\n\n                    {/* <div className=\"tittle list-tittle\" onClick={() => { setActiveleft({ menu: \"consolidated\", option: 0 }) }} style={{ fontWeight: activeLeft.menu == \"consolidated\" ? \"500\" : \"normal\", cursor: \"pointer\" }} >Consolidate Report</div> */}\n                </div>\n\n\n\n\n\n\n            </div>\n\n            <div className=\"right-container\" ref={ref}>\n                <div className=\"header-card\">\n                    <span>\n                        {\n                            activeLeft.menu == \"dashboard\" ? \"Dashboard\" : activeLeft.menu == \"consolidated\" ? \"Consolidated\"\n                                : prescriptionAdminSideMenu[activeLeft.menu].options[activeLeft.option].name\n                        }\n                    </span>\n\n                    <span className='caption'>\n                        {/* {getTodayDateStringForHeader()} */}\n                        &nbsp;\n                    </span>\n                </div>\n\n\n\n                <div className=\"right-menu-container\">\n\n                    <CustomeModal\n                        width={700}\n                        state={todaysReportModal}\n                        modalName=\"todaysReportModal\"\n                        component={<TodaysReportModalContent />}\n                        isRight\n                    />\n\n\n\n                    <CustomeModal\n                        width={700}\n                        state={misReportModal}\n                        modalName=\"misReportModal\"\n                        component={<MisReportModalContent />}\n                        isRight\n                    />\n\n                    {/* <CustomeModal\n                        state={ApointmentHistoryModal}\n                        modalName=\"ApointmentHistoryModal\"\n                        component={<AppointmentHistoryModalContent />}\n                        isRight\n                    />\n\n                   \n\n                    <CustomeModal\n                        width={700}\n                        state={misReportModal}\n                        modalName=\"misReportModal\"\n                        component={<MisReportModalContent />}\n                        isRight\n                    />\n\n\n                    <CustomeModal\n                        state={PatientDetailsModal}\n                        modalName={PATIENT_DETAILS_MODAL_NAME}\n                        component={<PatientDetailsModalContent />}\n                        isRight\n                    />\n\n                    <CustomeModal\n\n                        state={ViewFileModal}\n                        modalName=\"ViewFileModal\"\n                        component={<ViewFileModalComponent name=\"ViewFileModal\" />}\n\n\n                    />\n\n                    <CustomeModal\n                        state={deleteFileModel}\n                        modalName=\"deleteFileModel\"\n                        component={<DeleteFileModelComponent name=\"ViewFileModal\" />}\n                    />\n\n                    <CustomeModal\n                        state={commonDeleteModal}\n                        modalName=\"commonDeleteModal\"\n                        component={<CommonDeleteModalBody />}\n                    /> */}\n\n                    <div className=\"container_interbranch\">\n\n                        {\n\n                            activeLeft.menu == \"dashboard\" ? <PrescriptionDashboard /> :\n                                //  activeLeft.menu == \"consolidated\" ? <ConsolidatedReport /> :\n\n                                prescriptionAdminSideMenu[activeLeft.menu].options[activeLeft.option].component ?\n                                    prescriptionAdminSideMenu[activeLeft.menu].options[activeLeft.option].component : null\n\n\n\n                        }\n\n\n\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default Index"],"names":["getFromLocalStorage","key","localStorage","getItem","IP","require","v4","browser","detect","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","slice","search","loginAction","loginType","userName","accessCountry","password","history","backupData","setDrSign","dispatch","loginedApi","token","version","data","browserTimeZone","requestType","resp","doctorscountrycode","console","log","hash","CryptoJS","isFromMobile","clinicId","deviceId","appname","hashPassword","Ipaddress","useragent","Browser","name","Os","currency","Country","res","info","type","LOGIN_SUCCESS_ACTION","payload","setItem","JSON","stringify","userType","redirection","push","location","state","ADMIN_USER","CLINIC_ADMIN_USER","BETHANY_CLINIC_ID","login","isotpverified","axios","method","url","loginDetails","headers","then","response","catch","err","checkUser","searchkey","searchKey","status","logoutAction","LOG_OUT_ACTION","removeItem","loginwithotp","appoinment_form","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","routing","doctrId","requestOptions","body","loginWithGoogle","Data","email","updateLoginDetails","UPDATE_LOGIN","authHeader","user","parse","Authorization","getDepartments","params","errorType","clear","href","getDoctors","department_id","getTemplateList","offset","total","totalNumberOfPages","viewTemplate","par_tempId","FETCH_PR_ADMIN_DASHBOARD_REPORT","_para","REDUX_LOADING","fromDate","convertDateToString","toDate","todayDate","responce","SET_CR_DASHBOARD","syncLabAndMedicine","pushToHisCall","_id","TittleCard","styled","USER_DATA","INVESTIGATION_HEAD","MEDICINE_HEAD","getNumberOfDays","max","result","i","setState","removeIndex","setData","deletingFrom","useSelector","presctiptionFormReducer","investigationData","medicinesData","useDispatch","className","onClick","newResult","filter","element","UPDATE_INVESTIGATION_TABLE_DATA","id","UPDATE_MEDICINE_TABLE_DATA","removeData","successMessage","isPreload","setEditMode","clearData","style","width","display","flexDirection","justifyContent","includes","validateNumberOnKeyPress","event","which","target","value","length","preventDefault","validateInvestigationTable","table_data","error","comment","validateMedicinetable","when","freequancy","quantity","unit","date","days","instructions","getAddInvestigationButtonText","PuffLoader","color","loading","size","BootstrapInput","InputBase","theme","marginTop","spacing","borderRadius","backgroundColor","palette","background","paper","border","fontSize","textAlign","padding","transition","transitions","create","fontFamily","join","borderColor","useStyles","makeStyles","textOverflow","root","transform","inputRoot","paddingLeft","margin","noBorder","customTextField","opacity","whiteSpace","overflow","onChange","placeholder","isSpeciality","classes","selected","React","filterOptions","createFilterOptions","matchFrom","option","useEffect","Autocomplete","popoverProps","minWidth","e","values","options","renderInput","TextField","InputProps","input","usePlaceholderStyles","minHeight","cursor","Placeholder","children","isMedTable","isObject","populationName","populationId","Select","displayEmpty","inputProps","InputLabelProps","renderValue","map","MenuItem","maxDate","minDate","_value","setValue","menu","convertDate","para_date","dateObj","month","getMonth","String","getDate","padStart","getFullYear","M","utils","DateFnsUtils","overlay","trigger","autoOk","disableUnderline","variant","moment","newValue","disableToolbar","format","props","other","setSelected","useState","selectedDoctors","doctorsList","para_data","_options","label","doctorName","doctorId","createOptionObject","SET_SELECTED_DOCTORS","getPopupContainer","parentNode","mode","maxTagCount","quantityRoot","outline","selectRoot","icon","selectPaper","preloadData","backAction","useHistory","finalInvestigations","setFinalInvestigation","finalMedicinesdata","setFinalMedicinesdata","setParams","templateName","doctos","department","isreadyToValidate","setReadyToValidate","submissionData","selectedDataInvestigation","selectedDataMedicines","selectedDepartment","leftMenus","UserOutlined","FileSearchOutlined","MedicineBoxOutlined","PlusCircleOutlined","setNetworkError","_params","setActiveLeft","isConfirmDelete","setConfirmDelete","deleteIndex","setDeleteIndex","isConfirmDeleteMedicine","setConfirmDeleteMedicine","deleteIndexMedicine","setDeleteIndexMedicine","setDeletingFrom","isSuccess","setSuccess","setSuccessMessage","isFailed","setFailed","test","settest","medicine","setMedicine","height","weight","lmp","cheifcomplaints","relevantpointfromhistory","diagnosis","examinationlabfindings","additionalinstrunction","doctorname","registrationnumber","qualification","patientname","gender","age","appointmentdate","appointmenttime","patientNO","patientno","doctorcode","appointmentID","labTest","presciptioninfor","isReadyToSubmit","setRedyToSubmit","isReadtToAddMedicine","setReadytoAddMedicine","isReadyToAddInvestigation","setReadytoAddInvestigation","isLoading","setLoading","setSelectedLmp","preloadPrescription","departmentsArray","setDepartmentsArray","selectedDepartmentName","setSelectedDepartmentName","doctorsArray","setDoctors","setDr","setTemplateName","doctors","validationError","setvalidatoinError","basicinfo","description","obj2","medicines","Set","tests","testname","loadDepartments","populatePreloadData","clearPrepopulateddate","process","validateMedicineTableForAddNewRow","validateInvestigationtableForAddNewRow","units","frequecny","testType","testNames","addInvestigation","newArray","validateForSubmitButton","reports","investigationtableData","medicineTableData","chiefComplaints","releventPoint","additionalInstruction","examination","validateFormData","MedicineElement","useRef","InvestigationElement","AddInstructionElement","ScrollElement","onChangeSubmissiondata","pointToSection","SET_SUBMISSION_DATA_PRESCRIPTION","onChangeSubmissiondataHeightWidth","updateInvestigationTable","updateMedicineTable","current","scrollLeft","noInvestigationPopOver","noMedicinePopOver","Name","SET_SELECTED_DEPARTMENT","Id","loadDoctors","getElementArray","consultationDetails","chiefcomplaints","notes","investigation","testComment","medtakeMethod","displayTablet","quandity","measurement","StartVal","totalDays","mediComment","instruction","CLEAR_PRESCRIPTION","doctorObjectToArray","SET_DOCTORS","obj","validateForm","_validationError","EmptySpace","ref","alignItems","flexWrap","title","departmentName","departmentObjectToArray","dep_id","departmentId","handleTemplateNameChange","rows","marginLeft","content","colSpan","notification","message","placement","colspan","onKeyPress","defaultValue","disabled","submitStatus","_selectlabtest","savedLabTest","_selectmedicine","StrengthVal","isPermitted","dataToSubmit","prescriptionDetails","share","privateMessage","templateId","tempId","scrollTop","createPrescription","DatePicker","interbranchAdmin","dashboardTable","pagination","setPagination","templateList","setTemplateList","templateTotalPage","setTemplateTotalPage","isEditMode","filterData","setFilterData","useLocation","convertToArray","convertStringWithSpace","array","handleSearch","filteredData","tempName","toLowerCase","Departments","createdDate","updatedDate","Content","setIsLoading","marginBottom","assignedDoctors","rowData","assignedDepartments","Doctors","handleEditOnClick","tempData","EmptyTableData","s","defaultCurrent","onOk","RangePicker","dateRef","crDashboard","crDashboardTotal","isOpen","setOpen","isSyncing","setSyncing","syncSuccess","setSyncSuccess","_isSyncing","_setSyncing","individualSync","setIndividualSync","dateRange","setDaterange","prescriptionlist","oldData","patientName","class","inputReadOnly","bordered","suffixIcon","startDate","endDate","prevDate","subtract","appointmentDate","appointmentTime","link","prescriptionFile","open","pushstatus","showSizeChanger","prescriptionAdminSideMenu","tittle","ico","component","activeLeft","setActiveleft","interbranchModal","todaysReportModal","ApointmentHistoryModal","ViewFileModal","deleteFileModel","commonDeleteModal","PatientDetailsModal","misReportModal","userData","fontWeight","profileName","profileId","object","menuKey","optionKey","coursor","CustomeModal","modalName","TodaysReportModalContent","isRight","MisReportModalContent"],"sourceRoot":""}