{"ast":null,"code":"var _formatTime;\n\nimport { FETCH_CLIENTDETAILS } from \"./type\";\nimport loginedApi from \"../apis\";\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: GMT${formatTime}\n\n\nexport const fetch_clientDetails = clinicId => async dispatch => {\n  let params = {\n    requestType: \"1036\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      browserTimeZone: 'GMT${formatTime}',\n      currency: \"INR\",\n      accessCountry: \"IN\",\n      todayRate: \"\",\n      clinicId: clinicId\n    }\n  };\n\n  if (clinicId != \"\") {\n    params.data.clinicId = clinicId;\n  }\n\n  const response = await loginedApi.post(\"getclinicdetails\", params); //localStorage.setItem(\"ClinicDetails\",response.data.data);\n\n  await localStorage.setItem(\"ClinicDetails\", JSON.stringify(response.data.data));\n  dispatch({\n    type: FETCH_CLIENTDETAILS,\n    payload: response.data.data\n  });\n};","map":{"version":3,"sources":["/home/veena/Downloads/connect2mydoctor-phase1/connect2mydoctor-phase1/src/actions/MicrositeAction.js"],"names":["FETCH_CLIENTDETAILS","loginedApi","off","Date","toString","replace","formatTime","split","result","slice","search","fetch_clientDetails","clinicId","dispatch","params","requestType","token","data","browserTimeZone","currency","accessCountry","todayRate","response","post","localStorage","setItem","JSON","stringify","type","payload"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,QAApC;AACA,OAAOC,UAAP,MAAuB,SAAvB;AACA,IAAIC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,QAAX,GAAsBC,OAAtB,CAA8B,mBAA9B,EAAmD,WAAnD,CAAV;AACA,IAAIC,UAAU,GAAGJ,GAAH,aAAGA,GAAH,uBAAGA,GAAG,CAAEK,KAAL,CAAW,KAAX,EAAkB,CAAlB,EAAqBA,KAArB,CAA2B,IAA3B,EAAiC,CAAjC,CAAjB;AACA,IAAIC,MAAM,kBAAGF,UAAH,gDAAG,YAAYG,KAAZ,CAAkB,CAAlB,CAAb;;AACA,IAAGH,UAAU,CAACI,MAAX,CAAkB,KAAlB,KAA0B,IAA7B,EACE;AACEJ,EAAAA,UAAU,GAACA,UAAU,CAACD,OAAX,CAAmB,KAAnB,EAAyB,KAAzB,CAAX;AACD,CAHH,MAGQ,IAAGC,UAAU,CAACI,MAAX,CAAkB,KAAlB,KAA0B,IAA7B,EACN;AACEJ,EAAAA,UAAU,GAACA,UAAU,CAACD,OAAX,CAAmB,KAAnB,EAAyB,KAAzB,CAAX;AACD,C,CAAA;;;AAEH,OAAO,MAAMM,mBAAmB,GAAIC,QAAD,IAAc,MAAOC,QAAP,IAAoB;AACnE,MAAIC,MAAM,GAAG;AACXC,IAAAA,WAAW,EAAE,MADF;AAEXC,IAAAA,KAAK,EAAE,uBAFI;AAGXC,IAAAA,IAAI,EAAE;AACJC,MAAAA,eAAe,EAAC,kBADZ;AAEJC,MAAAA,QAAQ,EAAE,KAFN;AAGJC,MAAAA,aAAa,EAAE,IAHX;AAIJC,MAAAA,SAAS,EAAE,EAJP;AAKJT,MAAAA,QAAQ,EAAEA;AALN;AAHK,GAAb;;AAWA,MAAIA,QAAQ,IAAI,EAAhB,EAAoB;AAClBE,IAAAA,MAAM,CAACG,IAAP,CAAYL,QAAZ,GAAuBA,QAAvB;AACD;;AAED,QAAMU,QAAQ,GAAG,MAAMrB,UAAU,CAACsB,IAAX,CAAgB,kBAAhB,EAAoCT,MAApC,CAAvB,CAhBmE,CAiBnE;;AACA,QAAMU,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACL,IAAT,CAAcA,IAA7B,CAAtC,CAAN;AACAJ,EAAAA,QAAQ,CAAC;AAAEe,IAAAA,IAAI,EAAE5B,mBAAR;AAA6B6B,IAAAA,OAAO,EAAEP,QAAQ,CAACL,IAAT,CAAcA;AAApD,GAAD,CAAR;AACD,CApBM","sourcesContent":["import { FETCH_CLIENTDETAILS } from \"./type\";\nimport loginedApi from \"../apis\";\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif(formatTime.search(/\\+/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\+/g,\"%2B\")\n  }else if(formatTime.search(/\\-/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\-/g,\"%2D\")\n  }//replace(/\\+/g,' ') browserTimeZone: GMT${formatTime}\n\nexport const fetch_clientDetails = (clinicId) => async (dispatch) => {\n  let params = {\n    requestType: \"1036\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      browserTimeZone:'GMT${formatTime}',\n      currency: \"INR\",\n      accessCountry: \"IN\",\n      todayRate: \"\",\n      clinicId: clinicId,\n    },\n  };\n  if (clinicId != \"\") {\n    params.data.clinicId = clinicId;\n  }\n\n  const response = await loginedApi.post(\"getclinicdetails\", params);\n  //localStorage.setItem(\"ClinicDetails\",response.data.data);\n  await localStorage.setItem(\"ClinicDetails\", JSON.stringify(response.data.data));\n  dispatch({ type: FETCH_CLIENTDETAILS, payload: response.data.data });\n};"]},"metadata":{},"sourceType":"module"}