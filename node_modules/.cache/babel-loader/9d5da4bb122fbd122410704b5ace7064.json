{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nexport const useDimensions = props => {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getDimentions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getDimentions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return windowDimensions;\n};\n\n_s(useDimensions, \"iRusFt5a+nc3a9PSLJGjdQBmlTA=\");\n\nconst getDimentions = () => {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V2/connect2mydoctor-phase1/connect2mydoctor-phase1/src/logic/Dimensions/index.js"],"names":["useEffect","useState","useDimensions","props","windowDimensions","setWindowDimensions","getDimentions","handleResize","window","addEventListener","removeEventListener","innerWidth","width","innerHeight","height"],"mappings":";;AAAA,SAASA,SAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AAEA,OAAO,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAClC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CJ,QAAQ,CACpDK,aAAa,EADuC,CAAxD;AAIEN,EAAAA,SAAS,CAAC,MAAM;AACd,aAASO,YAAT,GAAwB;AACtBF,MAAAA,mBAAmB,CAACC,aAAa,EAAd,CAAnB;AACD;;AAEDE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAOH,gBAAP;AACL,CAfM;;GAAMF,a;;AAiBb,MAAMI,aAAa,GAAG,MAAM;AACxB,QAAM;AAAEK,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CN,MAAnD;AACF,SAAO;AACLI,IAAAA,KADK;AAELE,IAAAA;AAFK,GAAP;AAID,CAND","sourcesContent":["import { useEffect,useState } from 'react';\n\nexport const useDimensions = props => { \n    const [windowDimensions, setWindowDimensions] = useState(\n        getDimentions()\n      );\n    \n      useEffect(() => {\n        function handleResize() {\n          setWindowDimensions(getDimentions());\n        }\n    \n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n      }, []);\n    \n      return windowDimensions;\n} \n\nconst getDimentions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}"]},"metadata":{},"sourceType":"module"}