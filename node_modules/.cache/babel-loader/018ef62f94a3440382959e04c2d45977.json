{"ast":null,"code":"var _jsxFileName = \"/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V3/c2md-web_react/src/components/DoctorListing/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Style from \"./DoctorListing.module.scss\";\nimport classNames from \"classnames\";\nimport DoctorSpecialities from \"../DoctorSpecialities\";\nimport Container from \"react-bootstrap/Container\";\nimport DoctorListingDetails from \"../DoctorListingDetails\";\nimport DoctorListingFilters from \"../DoctorListingFilters\";\nimport BookAppointment from \"../BookAppointment\";\nimport { useParams } from \"react-router-dom\";\nimport { fetch_doctors } from \"../../actions/DoctorListingAction\";\nimport MobileFilter from \"../FilterMobileScreen\";\nimport MobileBookAppointment from \"../BookAppointmentMobile\";\nimport Assets from \"../Layout/Assets\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { fetchSpeciality } from \"../../actions/SpecialityListingAction\";\nimport { fetch_clientDetails, getCountryData } from \"../../actions/MicrositeAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DoctorListing({\n  showFilter,\n  setShowFilter,\n  setSearchDoctor,\n  searchDoctor\n}) {\n  _s();\n\n  const locationData = useSelector(state => state.doctorListing.location);\n  const languageData = useSelector(state => state.doctorListing.languagesSet);\n  const hospitalData = useSelector(state => state.doctorListing.hospitals);\n  let doctorListingScroll = useRef();\n  const [filterForm, setFilter] = useState({\n    location: [],\n    hospital: [],\n    language: [],\n    gender: \"Gender\",\n    doctorName: \"\"\n  });\n  const [filterKey, setFilterkey] = useState(null);\n  const [loader, setLoader] = useState(false);\n  let [pagination, setPagination] = useState(0);\n  let {\n    speciality\n  } = useParams();\n  const specialityData = useSelector(state => state.specialityList.specialityList);\n  const [selectedSpeciality, setSpeciality] = useState(speciality ? speciality : \"\");\n  let {\n    clinicId\n  } = useParams();\n  useEffect(() => {\n    // dispatch(\n    //   getCountryData()\n    // );\n    if (specialityData.length == 0) {\n      dispatch(fetchSpeciality(clinicId == undefined ? \"\" : clinicId));\n      dispatch(fetch_clientDetails(clinicId == undefined ? \"\" : clinicId));\n    } else {// if (!speciality) {\n      //   setSpeciality(specialityData[0].specialityName);\n      // }\n    }\n  }, [specialityData]);\n  const clientDetails = useSelector(state => state.clientDetails);\n  useEffect(() => {\n    dispatch(fetch_doctors(speciality, clientDetails != undefined ? clientDetails.clinicName : \"\", pagination));\n  }, []);\n  const colSpecialityDiv = classNames(Style.doctor_listing_speciality_div, \"col-md-3\");\n  const dispatch = useDispatch();\n  let clinitName = \"\";\n\n  if (clientDetails != undefined) {\n    clinitName = clientDetails.clinicName;\n  } // useEffect(() => {\n  //   if (clinicId != undefined) {\n  //     dispatch(fetch_clientDetails());\n  //   }\n  // }, []);\n\n\n  useEffect(() => {\n    setFilter({ ...filterForm,\n      doctorName: searchDoctor\n    });\n    setFilterkey({ ...filterKey,\n      doctorName: searchDoctor\n    });\n  }, [searchDoctor]);\n  useEffect(() => {\n    loading();\n  }, [selectedSpeciality, clientDetails, filterForm]);\n\n  const loading = async () => {\n    if (selectedSpeciality != \"\") {\n      await setLoader(true);\n      await dispatch(fetch_doctors(selectedSpeciality, clientDetails != undefined ? clientDetails.clinicName : \"\", pagination));\n      await setLoader(false);\n    }\n  };\n\n  const doctorListing = useSelector(state => state.doctorListing.doctorList);\n  let filterList = doctorListing && doctorListing.doctorDetails && doctorListing.doctorDetails.filter(item => {\n    if (item.hospitalname === filterForm.hospital && item.gender == filterForm.gender) {\n      return item;\n    }\n  });\n\n  const findCommonElements3 = (arr1, arr2) => {\n    let test = Array.isArray(arr1);\n\n    if (test) {\n      return arr1 === null || arr1 === void 0 ? void 0 : arr1.some(item => arr2.includes(item));\n    }\n  };\n\n  let FilterItem = doctorListing && doctorListing.doctorDetails && doctorListing.doctorDetails.filter(item => {\n    if (filterKey) {\n      const isSameDocName = filterKey[\"doctorName\"] && filterKey[\"doctorName\"] != undefined ? item === null || item === void 0 ? void 0 : item.doctorFirstName.toLowerCase().startsWith(filterKey[\"doctorName\"].toLowerCase()) : true;\n      const isSelectedGender = filterKey[\"gender\"] ? (item === null || item === void 0 ? void 0 : item.gender.toLowerCase()) === filterKey[\"gender\"].toLowerCase() : true;\n      const isSelectedHospital = filterKey[\"hospitalname\"] ? filterKey[\"hospitalname\"].includes(item === null || item === void 0 ? void 0 : item.hospitalname.toLowerCase()) : true;\n      const isSelectedCity = filterKey[\"city\"] ? filterKey[\"city\"].includes(item === null || item === void 0 ? void 0 : item.city.toLowerCase()) : true; // const isSelectedlanguages = filterKey[\"languages\"]\n      //   ? item?.languages.includes(filterKey[\"languages\"])\n      //   : true;\n\n      const isSelectedlanguages = filterKey[\"languages\"] ? findCommonElements3(item === null || item === void 0 ? void 0 : item.languages, filterKey[\"languages\"]) : true;\n\n      if (isSameDocName && isSelectedGender && isSelectedHospital && isSelectedlanguages && isSelectedCity) {\n        return item;\n      }\n    } else {\n      return item;\n    }\n  });\n\n  const ResetFilter = () => {\n    setFilter({\n      location: [],\n      hospital: [],\n      language: [],\n      gender: \"Gender\",\n      doctorName: \"\"\n    });\n    setFilterkey(null);\n    hospitalData.map(data => {\n      data.checked = false;\n    });\n    locationData.map(data => {\n      data.checked = false;\n    });\n    languageData.map(data => {\n      data.checked = false;\n    });\n  };\n\n  let onScrollDoctorList = () => {\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = doctorListingScroll.current;\n\n    if (scrollTop + clientHeight === scrollHeight) {\n      // TO SOMETHING HERE\n      console.log('Reached bottom');\n      setPagination(pagination + 1);\n      loading();\n    }\n  };\n\n  return !showFilter ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: Style.doctor_listing_topSection,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.doctorListWrap,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: colSpecialityDiv,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: Style.doctor_listing_main_heading,\n            children: \"Specialities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DoctorSpecialities, {\n            selectedSpeciality: selectedSpeciality,\n            setSpeciality: setSpeciality,\n            clientDetails: clientDetails,\n            ResetFilter: ResetFilter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${Style.doctorListFilter} doctor_ListFilter`,\n          children: [/*#__PURE__*/_jsxDEV(DoctorListingFilters, {\n            filterForm: filterForm,\n            setFilter: setFilter,\n            setFilterkey: setFilterkey,\n            filterKey: filterKey,\n            ResetFilter: ResetFilter,\n            clientDetails: clientDetails\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.doctor_listing_scrolling,\n            ref: doctorListingScroll,\n            onScroll: () => {\n              onScrollDoctorList();\n            },\n            children: loader == true ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: Style.loader,\n              children: /*#__PURE__*/_jsxDEV(Spinner, {\n                animation: \"border\",\n                role: \"status\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"visually-hidden\",\n                  children: \"Loading...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this) : FilterItem && FilterItem.length !== 0 ? FilterItem.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(DoctorListingDetails, {\n                Details: item\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 26\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: Style.NoDataFound,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: Assets.nodataFound,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: Style.text,\n                children: \"There is nothing to display here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BookAppointment, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(MobileFilter, {\n    showFilter: showFilter,\n    setShowFilter: setShowFilter,\n    filterForm: filterForm,\n    setFilter: setFilter,\n    setFilterkey: setFilterkey,\n    filterKey: filterKey,\n    clientDetails: clientDetails // setSearchDoctor={setSearchDoctor}\n    // searchDoctor={searchDoctor}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this); //<MobileBookAppointment/>\n}\n\n_s(DoctorListing, \"mGlDS+srl2bbKobxfLZ2oTDb8Ak=\", false, function () {\n  return [useSelector, useSelector, useSelector, useParams, useSelector, useParams, useSelector, useDispatch, useSelector];\n});\n\n_c = DoctorListing;\nexport default DoctorListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoctorListing\");","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V3/c2md-web_react/src/components/DoctorListing/index.js"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","Style","classNames","DoctorSpecialities","Container","DoctorListingDetails","DoctorListingFilters","BookAppointment","useParams","fetch_doctors","MobileFilter","MobileBookAppointment","Assets","Spinner","fetchSpeciality","fetch_clientDetails","getCountryData","DoctorListing","showFilter","setShowFilter","setSearchDoctor","searchDoctor","locationData","state","doctorListing","location","languageData","languagesSet","hospitalData","hospitals","doctorListingScroll","filterForm","setFilter","hospital","language","gender","doctorName","filterKey","setFilterkey","loader","setLoader","pagination","setPagination","speciality","specialityData","specialityList","selectedSpeciality","setSpeciality","clinicId","length","dispatch","undefined","clientDetails","clinicName","colSpecialityDiv","doctor_listing_speciality_div","clinitName","loading","doctorList","filterList","doctorDetails","filter","item","hospitalname","findCommonElements3","arr1","arr2","test","Array","isArray","some","includes","FilterItem","isSameDocName","doctorFirstName","toLowerCase","startsWith","isSelectedGender","isSelectedHospital","isSelectedCity","city","isSelectedlanguages","languages","ResetFilter","map","data","checked","onScrollDoctorList","scrollTop","scrollHeight","clientHeight","current","console","log","doctor_listing_topSection","doctorListWrap","doctor_listing_main_heading","doctorListFilter","doctor_listing_scrolling","index","NoDataFound","nodataFound","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Style from \"./DoctorListing.module.scss\";\nimport classNames from \"classnames\";\nimport DoctorSpecialities from \"../DoctorSpecialities\";\nimport Container from \"react-bootstrap/Container\";\nimport DoctorListingDetails from \"../DoctorListingDetails\";\nimport DoctorListingFilters from \"../DoctorListingFilters\";\nimport BookAppointment from \"../BookAppointment\";\nimport { useParams } from \"react-router-dom\";\nimport { fetch_doctors } from \"../../actions/DoctorListingAction\";\nimport MobileFilter from \"../FilterMobileScreen\";\nimport MobileBookAppointment from \"../BookAppointmentMobile\";\nimport Assets from \"../Layout/Assets\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { fetchSpeciality } from \"../../actions/SpecialityListingAction\";\nimport { fetch_clientDetails, getCountryData } from \"../../actions/MicrositeAction\";\n\nfunction DoctorListing({\n  showFilter,\n  setShowFilter,\n  setSearchDoctor,\n  searchDoctor,\n}) {\n  const locationData = useSelector((state) => state.doctorListing.location);\n  const languageData = useSelector((state) => state.doctorListing.languagesSet);\n  const hospitalData = useSelector((state) => state.doctorListing.hospitals);\n\n  let doctorListingScroll = useRef()\n\n  const [filterForm, setFilter] = useState({\n    location: [],\n    hospital: [],\n    language: [],\n    gender: \"Gender\",\n    doctorName: \"\",\n  });\n\n  const [filterKey, setFilterkey] = useState(null);\n  const [loader, setLoader] = useState(false);\n\n  let [pagination,setPagination]=useState(0)\n\n  let { speciality } = useParams();\n  const specialityData = useSelector(\n    (state) => state.specialityList.specialityList\n  );\n\n  const [selectedSpeciality, setSpeciality] = useState(\n    speciality ? speciality : \"\"\n  );\n  let { clinicId } = useParams();\n\n  useEffect(() => {\n    // dispatch(\n    //   getCountryData()\n    // );\n    if (specialityData.length == 0) {\n      dispatch(\n        fetchSpeciality(clinicId == undefined ? \"\" : clinicId)\n      );\n      dispatch(\n        fetch_clientDetails(clinicId == undefined ? \"\" : clinicId)\n      );\n    } else {\n      // if (!speciality) {\n      //   setSpeciality(specialityData[0].specialityName);\n      // }\n    }\n  }, [specialityData]);\n\n  const clientDetails = useSelector((state) => state.clientDetails);\n\n\n   useEffect(() => {\n\n      dispatch(\n        fetch_doctors(\n          speciality,\n          clientDetails != undefined ? clientDetails.clinicName : \"\",\n          pagination\n        )\n      );\n  }, []);\n\n  const colSpecialityDiv = classNames(\n    Style.doctor_listing_speciality_div,\n    \"col-md-3\"\n  );\n  const dispatch = useDispatch();\n  let clinitName = \"\";\n  if (clientDetails != undefined) {\n    clinitName = clientDetails.clinicName;\n  }\n\n  // useEffect(() => {\n  //   if (clinicId != undefined) {\n  //     dispatch(fetch_clientDetails());\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    setFilter({ ...filterForm, doctorName: searchDoctor });\n    setFilterkey({ ...filterKey, doctorName: searchDoctor });\n  }, [searchDoctor]);\n\n\n  useEffect(() => {\n\n    loading();\n  }, [selectedSpeciality, clientDetails, filterForm]);\n\n  const loading = async () => {\n    if (selectedSpeciality != \"\") {\n      await setLoader(true);\n      await dispatch(\n        fetch_doctors(\n          \n          selectedSpeciality,\n          clientDetails != undefined ? clientDetails.clinicName : \"\",\n          pagination\n        )\n      );\n      await setLoader(false);\n    }\n  };\n\n  const doctorListing = useSelector((state) => state.doctorListing.doctorList);\n\n  let filterList =\n    doctorListing &&\n    doctorListing.doctorDetails &&\n    doctorListing.doctorDetails.filter((item) => {\n      if (\n        item.hospitalname === filterForm.hospital &&\n        item.gender == filterForm.gender\n      ) {\n        return item;\n      }\n    });\n  const findCommonElements3 = (arr1, arr2) => {\n    let test = Array.isArray(arr1);\n    if (test) {\n      return arr1?.some((item) => arr2.includes(item));\n    }\n  };\n\n  let FilterItem =\n    doctorListing &&\n    doctorListing.doctorDetails &&\n    doctorListing.doctorDetails.filter((item) => {\n      if (filterKey) {\n        const isSameDocName =\n          filterKey[\"doctorName\"] && filterKey[\"doctorName\"] != undefined\n            ? item?.doctorFirstName\n              .toLowerCase()\n              .startsWith(filterKey[\"doctorName\"].toLowerCase())\n            : true;\n        const isSelectedGender = filterKey[\"gender\"]\n          ? item?.gender.toLowerCase() === filterKey[\"gender\"].toLowerCase()\n          : true;\n\n        const isSelectedHospital = filterKey[\"hospitalname\"]\n          ? filterKey[\"hospitalname\"].includes(item?.hospitalname.toLowerCase())\n          : true;\n        const isSelectedCity = filterKey[\"city\"]\n          ? filterKey[\"city\"].includes(item?.city.toLowerCase())\n          : true;\n        // const isSelectedlanguages = filterKey[\"languages\"]\n        //   ? item?.languages.includes(filterKey[\"languages\"])\n        //   : true;\n        const isSelectedlanguages = filterKey[\"languages\"]\n          ? findCommonElements3(item?.languages, filterKey[\"languages\"])\n          : true;\n\n        if (\n          isSameDocName &&\n          isSelectedGender &&\n          isSelectedHospital &&\n          isSelectedlanguages &&\n          isSelectedCity\n        ) {\n          return item;\n        }\n      } else {\n        return item;\n      }\n    });\n\n  const ResetFilter = () => {\n    setFilter({\n      location: [],\n      hospital: [],\n      language: [],\n      gender: \"Gender\",\n      doctorName: \"\",\n    });\n    setFilterkey(null);\n\n    hospitalData.map((data) => {\n      data.checked = false;\n    });\n    locationData.map((data) => {\n      data.checked = false;\n    });\n    languageData.map((data) => {\n      data.checked = false;\n    });\n  };\n\n  let onScrollDoctorList = ()=>{\n\n    const { scrollTop, scrollHeight, clientHeight } = doctorListingScroll.current;\n    \n    if (scrollTop + clientHeight === scrollHeight) {\n      // TO SOMETHING HERE\n      console.log('Reached bottom')\n      setPagination(pagination+1)\n      loading();\n    }\n    \n  }\n\n \n  \n\n\n\n  return !showFilter ? (\n    <div className={Style.doctor_listing_topSection}>\n\n\n      <Container>\n\n        <div className={Style.doctorListWrap}>\n          <div className={colSpecialityDiv}>\n            <h2 className={Style.doctor_listing_main_heading}>Specialities</h2>\n            <DoctorSpecialities\n              selectedSpeciality={selectedSpeciality}\n              setSpeciality={setSpeciality}\n              clientDetails={clientDetails}\n              ResetFilter={ResetFilter}\n            />\n          </div>\n          <div className={`${Style.doctorListFilter} doctor_ListFilter`}>\n            <DoctorListingFilters\n              filterForm={filterForm}\n              setFilter={setFilter}\n              setFilterkey={setFilterkey}\n              filterKey={filterKey}\n              ResetFilter={ResetFilter}\n              clientDetails={clientDetails}\n\n            />\n            <div className={Style.doctor_listing_scrolling} ref={doctorListingScroll} onScroll={() => { onScrollDoctorList() }}>\n              {loader == true ? (\n                <div className={Style.loader}>\n                  <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                  </Spinner>\n                </div>\n              ) : FilterItem && FilterItem.length !== 0 ? (\n                FilterItem.map((item, index) => {\n                  return <DoctorListingDetails Details={item} key={index} />;\n                })\n              ) : (\n                <div className={Style.NoDataFound}>\n                  <img src={Assets.nodataFound} alt=\"\" />\n                  <p className={Style.text}>There is nothing to display here</p>\n                </div>\n              )}\n            </div>\n          </div>\n          <BookAppointment></BookAppointment>\n        </div>\n      </Container>\n    </div>\n  ) : (\n    <MobileFilter\n      showFilter={showFilter}\n      setShowFilter={setShowFilter}\n      filterForm={filterForm}\n      setFilter={setFilter}\n      setFilterkey={setFilterkey}\n      filterKey={filterKey}\n      clientDetails={clientDetails}\n    // setSearchDoctor={setSearchDoctor}\n    // searchDoctor={searchDoctor}\n    />\n  );\n  //<MobileBookAppointment/>\n}\n\nexport default DoctorListing;"]},"metadata":{},"sourceType":"module"}