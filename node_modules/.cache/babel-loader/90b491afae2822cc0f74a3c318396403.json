{"ast":null,"code":"import { APPOINTMENT_SLOT, APPOINTMENT_MORE_SLOT, APPOINTMENT_MORE_SLOT_RESET } from \"./type\";\nimport loginedApi from \"../apis\";\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime === null || formatTime === void 0 ? void 0 : formatTime.slice(1);\nlet countrycoderes;\nlet doctorscountrycode;\nexport const fetch_appointmentSlot = ({\n  isStart,\n  isNext,\n  date,\n  typeofconsultation,\n  doctorId\n}) => async dispatch => {\n  countrycoderes = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  doctorscountrycode = countrycoderes.data.data;\n  const response = await loginedApi.post(\"doctortimeslots\", {\n    requestType: \"175\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      timeSlotCriteria: {\n        doctorId: doctorId,\n        date: date,\n        isStart: isStart,\n        isNext: isNext,\n        typeofconsultation: typeofconsultation\n      },\n      // browserTimeZone: \"GMT%2B05:30\",\n      browserTimeZone: `GMT${formatTime}`,\n      todayRate: \"73.49680\",\n      actualRate: \"73.49680\",\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country\n    }\n  });\n\n  if (response.status === 200) {\n    dispatch({\n      type: APPOINTMENT_SLOT,\n      payload: response.data.data\n    });\n  }\n};\nexport const fetch_more_appointmentSlot = ({\n  isStart,\n  isNext,\n  date,\n  typeofconsultation,\n  doctorId,\n  isClear\n}) => async dispatch => {\n  countrycoderes = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  doctorscountrycode = countrycoderes.data.data;\n  const response = await loginedApi.post(\"doctortimeslots\", {\n    requestType: \"175\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      timeSlotCriteria: {\n        doctorId: doctorId,\n        date: date,\n        isStart: isStart,\n        isNext: isNext,\n        typeofconsultation: typeofconsultation\n      },\n      browserTimeZone: `GMT${formatTime}`,\n      todayRate: \"73.49680\",\n      actualRate: \"73.49680\",\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country\n    }\n  });\n\n  if (response.status === 200) {\n    console.log(response);\n    dispatch({\n      type: isClear ? APPOINTMENT_MORE_SLOT_RESET : APPOINTMENT_MORE_SLOT,\n      payload: response.data.data\n    });\n  }\n};\nexport const fetch_appointmentTypes = doctorId => async dispatch => {\n  countrycoderes = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  doctorscountrycode = countrycoderes.data.data;\n  const response = await loginedApi.post(\"gettypeofconsultation\", {\n    requestType: \"182\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      doctorId: doctorId,\n      browserTimeZone: `GMT${formatTime}`,\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country,\n      todayRate: \"\"\n    }\n  });\n  return response.data.data.Details;\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/v5/c2md-web_react/src/actions/AppointmentSlotAction.js"],"names":["APPOINTMENT_SLOT","APPOINTMENT_MORE_SLOT","APPOINTMENT_MORE_SLOT_RESET","loginedApi","off","Date","toString","replace","formatTime","split","result","slice","countrycoderes","doctorscountrycode","fetch_appointmentSlot","isStart","isNext","date","typeofconsultation","doctorId","dispatch","post","browserTimeZone","data","response","requestType","token","timeSlotCriteria","todayRate","actualRate","currency","accessCountry","Country","status","type","payload","fetch_more_appointmentSlot","isClear","console","log","fetch_appointmentTypes","Details"],"mappings":"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","sourcesContent":["import { APPOINTMENT_SLOT, APPOINTMENT_MORE_SLOT, APPOINTMENT_MORE_SLOT_RESET } from \"./type\";\nimport loginedApi from \"../apis\";\n\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\n\n\nlet countrycoderes;\nlet doctorscountrycode;\n\nexport const fetch_appointmentSlot =\n  ({ isStart, isNext, date, typeofconsultation, doctorId }) =>\n  async (dispatch) => {\n\n\n    countrycoderes = await loginedApi.post(\"getcountrycode\",\n    {\n      \"token\": \"token\",\n      \"version\": \"2.0\",\n      \"data\": { browserTimeZone: `GMT${formatTime}`, },\n      \"requestType\": 1058\n    });\n\n    doctorscountrycode = countrycoderes.data.data;\n      \n\n\n    const response = await loginedApi.post(\"doctortimeslots\", {\n      requestType: \"175\",\n      token: \"C2MDVerificationToken\",\n      data: {\n        timeSlotCriteria: {\n          doctorId: doctorId,\n          date: date,\n          isStart: isStart,\n          isNext: isNext,\n          typeofconsultation: typeofconsultation,\n        },\n        // browserTimeZone: \"GMT%2B05:30\",\n        browserTimeZone: `GMT${formatTime}`,\n        todayRate: \"73.49680\",\n        actualRate: \"73.49680\",\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n      },\n    });\n\n    if (response.status === 200) {\n      dispatch({ type: APPOINTMENT_SLOT, payload: response.data.data });\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n  \n  export const fetch_more_appointmentSlot =\n  ({ isStart, isNext, date, typeofconsultation, doctorId, isClear }) =>\n    async (dispatch) => {\n\n      countrycoderes = await loginedApi.post(\"getcountrycode\",\n        {\n          \"token\": \"token\",\n          \"version\": \"2.0\",\n          \"data\": { browserTimeZone: `GMT${formatTime}`, },\n          \"requestType\": 1058\n        });\n\n      doctorscountrycode = countrycoderes.data.data;\n\n\n      const response = await loginedApi.post(\"doctortimeslots\", {\n        requestType: \"175\",\n        token: \"C2MDVerificationToken\",\n        data: {\n          timeSlotCriteria: {\n            doctorId: doctorId,\n            date: date,\n            isStart: isStart,\n            isNext: isNext,\n            typeofconsultation: typeofconsultation,\n          },\n          browserTimeZone: `GMT${formatTime}`,\n          todayRate: \"73.49680\",\n          actualRate: \"73.49680\",\n          currency: doctorscountrycode.currency,\n          accessCountry: doctorscountrycode.Country,\n        },\n      });\n      if (response.status === 200) {\n        console.log(response);\n        dispatch({ type: isClear ? APPOINTMENT_MORE_SLOT_RESET : APPOINTMENT_MORE_SLOT, payload: response.data.data });\n      }\n    };\n\n\n    export const fetch_appointmentTypes = (doctorId) => async (dispatch) => {\n      countrycoderes = await loginedApi.post(\"getcountrycode\",\n        {\n          \"token\": \"token\",\n          \"version\": \"2.0\",\n          \"data\": { browserTimeZone: `GMT${formatTime}`, },\n          \"requestType\": 1058\n        });\n    \n      doctorscountrycode = countrycoderes.data.data;\n      const response = await loginedApi.post(\"gettypeofconsultation\", {\n        requestType: \"182\",\n        token: \"C2MDVerificationToken\",\n        data: {\n          doctorId: doctorId,\n          browserTimeZone: `GMT${formatTime}`,\n          currency: doctorscountrycode.currency,\n          accessCountry: doctorscountrycode.Country,\n          todayRate: \"\",\n        },\n      });\n    \n      return response.data.data.Details;\n    };\n    "]},"metadata":{},"sourceType":"module"}