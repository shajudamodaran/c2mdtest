{"ast":null,"code":"var _formatTime;\n\nimport { FETCH_CONSULTATION } from \"./type\";\nimport loginedApi from \"../apis\";\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const fetch_clientDetails = (consultationId, userType) => async dispatch => {\n  console.log(\"Calling............................\");\n  let countrycoderes = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  let doctorscountrycode = countrycoderes.data.data;\n  let params = {\n    requestType: \"400\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      browserTimeZone: `GMT${formatTime}`,\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country,\n      todayRate: \"\",\n      consultationId: consultationId,\n      userType: userType\n    }\n  };\n\n  if (consultationId != \"\") {\n    params.data.consultationId = consultationId;\n  }\n\n  const response = await loginedApi.post(\"consultation\", params);\n  dispatch({\n    type: FETCH_CONSULTATION,\n    payload: response.data.data\n  });\n  return response.data.data;\n};\nexport const fetch_ConsultationDetails = (consultationId, userType) => async dispatch => {\n  let countrycoderes = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  let doctorscountrycode = countrycoderes.data.data;\n  let params = {\n    requestType: \"404\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      browserTimeZone: `GMT${formatTime}`,\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country,\n      todayRate: \"\",\n      consultationId: consultationId,\n      userType: userType\n    }\n  };\n\n  if (consultationId != \"\") {\n    params.data.consultationId = consultationId;\n  }\n\n  const response = await loginedApi.post(\"consultation\", params);\n  dispatch({\n    type: FETCH_CONSULTATION,\n    payload: response.data.data\n  });\n  return response.data.data;\n};","map":{"version":3,"sources":["/home/veena/Downloads/WEB_PUSH/c2md-web_react/src/actions/ConsultationAction.js"],"names":["FETCH_CONSULTATION","loginedApi","off","Date","toString","replace","formatTime","split","result","slice","search","fetch_clientDetails","consultationId","userType","dispatch","console","log","countrycoderes","post","browserTimeZone","doctorscountrycode","data","params","requestType","token","currency","accessCountry","Country","todayRate","response","type","payload","fetch_ConsultationDetails"],"mappings":"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","sourcesContent":["import { FETCH_CONSULTATION } from \"./type\";\nimport loginedApi from \"../apis\";\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif(formatTime.search(/\\+/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\+/g,\"%2B\")\n  }else if(formatTime.search(/\\-/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\-/g,\"%2D\")\n  }//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\n  export const fetch_clientDetails = (consultationId,userType) => async (dispatch) => {\n\n    console.log(\"Calling............................\");\n    \n    let countrycoderes = await loginedApi.post(\"getcountrycode\", \n    {\n      \"token\": \"token\",\n      \"version\":\"2.0\",\n      \"data\": { browserTimeZone: `GMT${formatTime}`,},\n      \"requestType\": 1058\n  });\n  \n   let doctorscountrycode = countrycoderes.data.data;\n    let params = {\n      requestType: \"400\",\n      token: \"C2MDVerificationToken\",\n      data: {\n        browserTimeZone: `GMT${formatTime}`,\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n        todayRate: \"\",\n        consultationId: consultationId,\n        userType: userType,\n      },\n    };\n    \n    if (consultationId != \"\") {\n      params.data.consultationId = consultationId;\n    }\n  \n    const response = await loginedApi.post(\"consultation\", params);\n    dispatch({ type: FETCH_CONSULTATION, payload: response.data.data });\n  \n    return response.data.data;\n  };\n  \n  export const fetch_ConsultationDetails = (consultationId,userType) => async (dispatch) => {\n    let countrycoderes = await loginedApi.post(\"getcountrycode\", \n    {\n      \"token\": \"token\",\n      \"version\":\"2.0\",\n      \"data\": { browserTimeZone: `GMT${formatTime}`,},\n      \"requestType\": 1058\n  });\n  \n   let doctorscountrycode = countrycoderes.data.data;\n    let params = {\n      requestType: \"404\",\n      token: \"C2MDVerificationToken\",\n      data: {\n        browserTimeZone: `GMT${formatTime}`,\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n        todayRate: \"\",\n        consultationId: consultationId,\n        userType: userType,\n      },\n    };\n    \n    if (consultationId != \"\") {\n      params.data.consultationId = consultationId;\n    }\n  \n    const response = await loginedApi.post(\"consultation\", params);\n    dispatch({ type: FETCH_CONSULTATION, payload: response.data.data });\n  \n    return response.data.data;\n  };"]},"metadata":{},"sourceType":"module"}