{"ast":null,"code":"var _jsxFileName = \"/home/veena/Downloads/WEB_PUSH/c2md-web_react/src/components/Signin/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Style from \"./signin.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport { Col } from \"react-bootstrap\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport { GoogleLogin } from \"react-google-login\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginAction, loginwithotp } from \"../../actions/LoginAction\";\nimport * as Yup from \"yup\";\nimport CountryJson from \"../../constants/country.json\";\nimport { toast } from \"react-toastify\";\nimport Assets from \"../Layout/Assets\";\nimport { loginWithGoogle } from \"../../actions/LoginAction\";\nimport { checkUser } from \"../../actions/SignupAction\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport ConfirmModal from \"./ConfirmModal\";\nimport CustomPhoneInput from \"../CustomPhoneInput/CustomPhoneInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Signin() {\n  _s();\n\n  const history = useHistory();\n  const re = /^[0-9\\b]+$/;\n  const emailTest = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n  const dispatch = useDispatch();\n\n  const responseGoogle = response => {\n    let profileData = response ? response.profileObj : null;\n\n    if (response === null || response === void 0 ? void 0 : response.profileObj) {\n      dispatch(loginWithGoogle({\n        Data: response.profileObj,\n        history: history\n      })).then(res => {\n        if (res.info) {\n          setErrorMsg(res.info);\n        }\n      });\n    }\n  };\n\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [passwordShown, setPasswordShown] = useState(false);\n  let [drSign, setDrSign] = useState(false);\n\n  const togglePasswordVisiblity = () => {\n    setPasswordShown(passwordShown ? false : true);\n  };\n\n  const login = async (values, setSubmitting) => {\n    var _values$dial_code, _values$mobile;\n\n    let userName = \"\";\n    let limit = (_values$dial_code = values.dial_code) === null || _values$dial_code === void 0 ? void 0 : _values$dial_code.length;\n    let mobNo = (_values$mobile = values.mobile) === null || _values$mobile === void 0 ? void 0 : _values$mobile.slice(limit);\n\n    if (values.loginType == \"email\") {\n      userName = values.email;\n    } else if (values.loginType == \"mobile\") {\n      userName = `%2B${values.dial_code} ${mobNo}`;\n    }\n\n    await dispatch(loginAction({\n      loginType: values.loginType,\n      userName: userName,\n      accessCountry: values.countryCode,\n      password: values.password,\n      history: history,\n      setDrSign: setDrSign\n    })).then(res => {\n      if (res.info) {\n        let text = values.loginType === \"email\" ? \"email id\" : \"mobile number\";\n        setErrorMsg(`You have entered an invalid username(${text}) or password`);\n      }\n    });\n    await setSubmitting(false);\n  };\n\n  const validationSchema = Yup.object().shape({\n    loginType: Yup.string(),\n    submitBttn: Yup.string(),\n    password: Yup.string().when(\"submitBttn\", {\n      is: \"type2\",\n      then: Yup.string().required(\"Enter your password to proceed further\")\n    }),\n    mobile: Yup.string().when(\"loginType\", {\n      is: \"mobile\",\n      then: Yup.string().required(\"Please enter the registered mobile number\").matches(phoneRegExp, \"There seems to be some issue with the mobile number you entered. Please check \").min(4, \"There seems to be some issue with the mobile number you entered. Please check \") // .max(\n      //   10,\n      //   \"There seems to be some issue with the mobile number you entered. Please check \"\n      // ),\n\n    }),\n    email: Yup.string().when(\"loginType\", {\n      is: \"email\",\n      then: Yup.string().email(\"There seems to be some issue with your eMail id. Please check \").required(\"Please enter the eMail id used when you created the account\")\n    })\n  });\n\n  const loginwithotp = values => {\n    var _values$dial_code2, _values$mobile2;\n\n    let type = (values === null || values === void 0 ? void 0 : values.loginType) === \"mobile\" ? \"Mobile\" : values === null || values === void 0 ? void 0 : values.loginType;\n    let limit = (_values$dial_code2 = values.dial_code) === null || _values$dial_code2 === void 0 ? void 0 : _values$dial_code2.length;\n    let mobNo = (_values$mobile2 = values.mobile) === null || _values$mobile2 === void 0 ? void 0 : _values$mobile2.slice(limit);\n    let searchkeyType = (values === null || values === void 0 ? void 0 : values.loginType) === \"mobile\" ? `%2B${values.dial_code} ${mobNo}` : values.email;\n    dispatch(checkUser({\n      searchtype: type,\n      searchKey: searchkeyType\n    })).then(res => {\n      if ((res === null || res === void 0 ? void 0 : res.info) === \"New User\") {\n        let text = values.loginType === \"email\" ? \"eMail id\" : \"mobile number\";\n        setErrorMsg(`You have entered an invalid username(${text}) `);\n      } else {\n        history.push({\n          pathname: \"/signup/verify\",\n          state: {\n            detail: values,\n            page: \"login\"\n          }\n        });\n      }\n    }).catch(() => {});\n  };\n\n  const handleOnChange = (value, data, event, formattedValue) => {};\n\n  return /*#__PURE__*/_jsxDEV(SignupLayout, {\n    children: [/*#__PURE__*/_jsxDEV(ConfirmModal, {\n      showModal: drSign,\n      setShowModal: () => {\n        setDrSign(true);\n      },\n      onCancel: () => {\n        setDrSign(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: Style.signin_form_align,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: Style.signin_header_align,\n        children: \"Sign in to your account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          clientId: \"259504799474-3q2tvrsu5gf83rofjevpr5bpdpun3jii.apps.googleusercontent.com\",\n          buttonText: \"Sign in with google\",\n          onSuccess: responseGoogle,\n          onFailure: responseGoogle,\n          cookiePolicy: \"single_host_origin\",\n          className: Style.signin_google_button\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: Style.signin_text_option,\n          children: \"Or\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            // email: \"athira@webandcrafts.in\",\n            // password: \"123456@Aa\",\n            email: \"\",\n            password: \"\",\n            accessCountry: \"0\",\n            loginType: \"email\",\n            mobile: \"\",\n            dial_code: \"91\",\n            countryCode: \"IN\",\n            code: {\n              name: \"\",\n              flag: \"ðŸ‡®\",\n              code: \"\",\n              dial_code: \"\"\n            }\n          },\n          validationSchema: validationSchema,\n          onSubmit: (values, {\n            setSubmitting\n          }) => {\n            if (values.submitBttn === \"type1\") {\n              loginwithotp(values);\n            } else if (values.submitBttn === \"type2\") {\n              login(values, setSubmitting);\n            }\n          },\n          children: ({\n            touched,\n            errors,\n            isSubmitting,\n            handleChange,\n            values,\n            setFieldValue,\n            handleSubmit,\n            resetForm\n          }) => {\n            var _values$mobile3, _values$dial_code3;\n\n            return /*#__PURE__*/_jsxDEV(Form, {\n              onSubmit: handleSubmit,\n              onKeyDown: e => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n\n                  if (values.password == \"\") {\n                    setFieldValue(\"submitBttn\", \"type1\");\n                  } else {\n                    setFieldValue(\"submitBttn\", \"type2\");\n                  }\n\n                  handleSubmit();\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: Style.signin_form_label,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: Style.signin_radiowrp,\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"ml-33\",\n                        children: \"Sign in with\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 234,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: Style.signin_radioeach,\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                            inline: true,\n                            label: \"eMail\",\n                            name: \"loginType\",\n                            type: \"radio\",\n                            id: \"email\",\n                            onChange: () => {\n                              setErrorMsg(\"\");\n                              resetForm();\n                              setFieldValue(\"loginType\", \"email\");\n                            },\n                            checked: values.loginType === \"email\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 237,\n                            columnNumber: 31\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 236,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                            inline: true,\n                            label: \"Mobile\",\n                            name: \"loginType\",\n                            type: \"radio\",\n                            id: \"mobile\",\n                            checked: values.loginType === \"mobile\",\n                            onChange: () => {\n                              setErrorMsg(\"\");\n                              resetForm();\n                              setFieldValue(\"loginType\", \"mobile\");\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 252,\n                            columnNumber: 31\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 251,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 235,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 233,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 21\n                }, this), values.loginType === \"email\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"email\",\n                    onChange: e => {\n                      setErrorMsg(\"\");\n                      handleChange(e);\n                    },\n                    className: Style.signin_input_field + \" \" + `${touched.email && errors.email ? \"is-invalid\" : \"\"}`,\n                    placeholder: \"Enter eMail id\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    component: \"div\",\n                    name: \"email\",\n                    className: Style.signin_error_msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 23\n                }, this), values.loginType === \"mobile\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: Style.mob_flag_wrp,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `${Style.siginin_mobile}${\" \"}${touched.mobile && errors.mobile ? \"is-invalid\" : \"\"}`,\n                    children: /*#__PURE__*/_jsxDEV(CustomPhoneInput, {\n                      country: \"in\",\n                      value: (_values$mobile3 = values.mobile) === null || _values$mobile3 === void 0 ? void 0 : _values$mobile3.slice((_values$dial_code3 = values.dial_code) === null || _values$dial_code3 === void 0 ? void 0 : _values$dial_code3.length),\n                      name: \"mobile\",\n                      autoFormat: false,\n                      countryCodeEditable: false,\n                      onChange: (value, data, event, formattedValue) => {\n                        var _data$countryCode;\n\n                        setFieldValue(\"mobile\", value);\n                        setFieldValue(\"dial_code\", data.dialCode);\n                        setFieldValue(\"countryCode\", (_data$countryCode = data.countryCode) === null || _data$countryCode === void 0 ? void 0 : _data$countryCode.toUpperCase());\n                        setErrorMsg(\"\");\n                        handleOnChange(value, data, event, formattedValue);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 26\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    component: \"div\",\n                    name: \"mobile\",\n                    className: Style.signin_error_msg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: Style.pswrd_input,\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: Style.signin_form_label,\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: Style.signin_input_field + \" \" + `${touched.password && errors.password ? \"is-invalid\" : \"\"}`,\n                  children: [/*#__PURE__*/_jsxDEV(Field, {\n                    type: passwordShown ? \"text\" : \"password\",\n                    name: \"password\",\n                    placeholder: \"Enter Password\",\n                    className: Style.signinPasswordInput\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 388,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: Style.signinPasswordImg,\n                    src: Assets.iconpassword,\n                    alt: \"\",\n                    onClick: togglePasswordVisiblity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 394,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  component: \"div\",\n                  name: \"password\",\n                  className: Style.signin_error_msg1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: Style.signin_password_para,\n                  children: \"Leave blank for OTP Sign in\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: Style.signin_password_forgot,\n                  onClick: () => history.push(\"/reset\"),\n                  children: \"Forgot Password?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 19\n              }, this), errorMsg != \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: Style.errorMsg,\n                children: errorMsg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: Style.signin_btn_wrp,\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  onClick: () => {\n                    setFieldValue(\"submitBttn\", \"type1\");\n                  } // onClick={signInWithOtp}\n                  ,\n                  variant: \"outline-secondary\",\n                  className: Style.signin_continue_btn,\n                  children: \"Sign in with OTP\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 21\n                }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline-dark\",\n                  className: `${Style.signin_continue_btn1} ${values.password ? Style.signin_continue_btn1_active : \"\"}`,\n                  type: \"submit\",\n                  onClick: () => {\n                    setFieldValue(\"submitBttn\", \"type2\");\n                  },\n                  disabled: isSubmitting // onClick={login}\n                  ,\n                  children: values.submitBttn === \"type2\" && isSubmitting ? \"Please wait...\" : \"Sign in\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: Style.signin_checkbox_text,\n          children: [\"Don't have an account?\", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/signup\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Signin, \"/yiyPW4+FoKttG8nkU0kqdw4vio=\", false, function () {\n  return [useHistory, useDispatch];\n});\n\n_c = Signin;\nexport default Signin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signin\");","map":{"version":3,"sources":["/home/veena/Downloads/WEB_PUSH/c2md-web_react/src/components/Signin/index.js"],"names":["React","useState","Row","Style","Button","SignupLayout","Col","Formik","Field","ErrorMessage","GoogleLogin","Form","useHistory","Link","useDispatch","useSelector","loginAction","loginwithotp","Yup","CountryJson","toast","Assets","loginWithGoogle","checkUser","PhoneInput","ConfirmModal","CustomPhoneInput","Signin","history","re","emailTest","phoneRegExp","dispatch","responseGoogle","response","profileData","profileObj","Data","then","res","info","setErrorMsg","errorMsg","passwordShown","setPasswordShown","drSign","setDrSign","togglePasswordVisiblity","login","values","setSubmitting","userName","limit","dial_code","length","mobNo","mobile","slice","loginType","email","accessCountry","countryCode","password","text","validationSchema","object","shape","string","submitBttn","when","is","required","matches","min","type","searchkeyType","searchtype","searchKey","push","pathname","state","detail","page","catch","handleOnChange","value","data","event","formattedValue","signin_form_align","signin_header_align","signin_google_button","signin_text_option","code","name","flag","touched","errors","isSubmitting","handleChange","setFieldValue","handleSubmit","resetForm","e","key","preventDefault","signin_form_label","signin_radiowrp","signin_radioeach","signin_input_field","signin_error_msg","mob_flag_wrp","siginin_mobile","dialCode","toUpperCase","pswrd_input","signinPasswordInput","signinPasswordImg","iconpassword","signin_error_msg1","signin_password_para","signin_password_forgot","signin_btn_wrp","signin_continue_btn","signin_continue_btn1","signin_continue_btn1_active","signin_checkbox_text"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Style from \"./signin.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport { Col } from \"react-bootstrap\";\n\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport { GoogleLogin } from \"react-google-login\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginAction, loginwithotp } from \"../../actions/LoginAction\";\nimport * as Yup from \"yup\";\nimport CountryJson from \"../../constants/country.json\";\nimport { toast } from \"react-toastify\";\nimport Assets from \"../Layout/Assets\";\nimport { loginWithGoogle } from \"../../actions/LoginAction\";\nimport { checkUser } from \"../../actions/SignupAction\";\n\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport ConfirmModal from \"./ConfirmModal\";\nimport CustomPhoneInput from \"../CustomPhoneInput/CustomPhoneInput\";\nfunction Signin() {\n  const history = useHistory();\n  const re = /^[0-9\\b]+$/;\n  const emailTest = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  const phoneRegExp =\n    /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\n  const dispatch = useDispatch();\n  const responseGoogle = (response) => {\n\n    let profileData=response?response.profileObj:null\n\n\n    if (response?.profileObj) {\n      dispatch(\n        loginWithGoogle({ Data: response.profileObj, history: history })\n      ).then((res) => {\n        if (res.info) {\n          setErrorMsg(res.info);\n\n          \n        }\n      });\n    }\n  };\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [passwordShown, setPasswordShown] = useState(false);\n  let [drSign, setDrSign] = useState(false)\n  const togglePasswordVisiblity = () => {\n    setPasswordShown(passwordShown ? false : true);\n  };\n  const login = async (values, setSubmitting) => {\n    let userName = \"\";\n    let limit = values.dial_code?.length;\n    let mobNo = values.mobile?.slice(limit);\n\n    if (values.loginType == \"email\") {\n      userName = values.email;\n    } else if (values.loginType == \"mobile\") {\n      userName = `%2B${values.dial_code} ${mobNo}`;\n    }\n\n\n    await dispatch(\n      loginAction({\n        loginType: values.loginType,\n        userName: userName,\n        accessCountry: values.countryCode,\n        password: values.password,\n        history: history,\n        setDrSign: setDrSign\n      })\n    ).then((res) => {\n\n      if (res.info) {\n        let text = values.loginType === \"email\" ? \"email id\" : \"mobile number\";\n        setErrorMsg(\n          `You have entered an invalid username(${text}) or password`\n        );\n      }\n    });\n\n    await setSubmitting(false);\n  };\n  const validationSchema = Yup.object().shape({\n    loginType: Yup.string(),\n    submitBttn: Yup.string(),\n    password: Yup.string().when(\"submitBttn\", {\n      is: \"type2\",\n      then: Yup.string().required(\"Enter your password to proceed further\"),\n    }),\n    mobile: Yup.string().when(\"loginType\", {\n      is: \"mobile\",\n      then: Yup.string()\n        .required(\"Please enter the registered mobile number\")\n        .matches(\n          phoneRegExp,\n          \"There seems to be some issue with the mobile number you entered. Please check \"\n        )\n        .min(\n          4,\n          \"There seems to be some issue with the mobile number you entered. Please check \"\n        ),\n      // .max(\n      //   10,\n      //   \"There seems to be some issue with the mobile number you entered. Please check \"\n      // ),\n    }),\n    email: Yup.string().when(\"loginType\", {\n      is: \"email\",\n      then: Yup.string()\n        .email(\"There seems to be some issue with your eMail id. Please check \")\n        .required(\n          \"Please enter the eMail id used when you created the account\"\n        ),\n    }),\n  });\n  const loginwithotp = (values) => {\n    let type = values?.loginType === \"mobile\" ? \"Mobile\" : values?.loginType;\n    let limit = values.dial_code?.length;\n    let mobNo = values.mobile?.slice(limit);\n    let searchkeyType =\n      values?.loginType === \"mobile\"\n        ? `%2B${values.dial_code} ${mobNo}`\n        : values.email;\n\n    dispatch(\n      checkUser({\n        searchtype: type,\n        searchKey: searchkeyType,\n      })\n    )\n      .then((res) => {\n        if (res?.info === \"New User\") {\n          let text =\n            values.loginType === \"email\" ? \"eMail id\" : \"mobile number\";\n          setErrorMsg(`You have entered an invalid username(${text}) `);\n        } else {\n          history.push({\n            pathname: \"/signup/verify\",\n            state: { detail: values, page: \"login\" },\n          });\n        }\n      })\n      .catch(() => { });\n  };\n\n  const handleOnChange = (value, data, event, formattedValue) => { };\n\n  return (\n    <SignupLayout>\n\n      <ConfirmModal\n        showModal={drSign}\n        setShowModal={() => { setDrSign(true) }}\n        onCancel={() => { setDrSign(false) }}\n\n      />\n      <div className={Style.signin_form_align}>\n        <h2 className={Style.signin_header_align}>Sign in to your account</h2>\n\n        <div className=\"form-group\">\n          <p></p>\n          <GoogleLogin\n            clientId=\"259504799474-3q2tvrsu5gf83rofjevpr5bpdpun3jii.apps.googleusercontent.com\"\n            buttonText=\"Sign in with google\"\n            onSuccess={responseGoogle}\n            onFailure={responseGoogle}\n            cookiePolicy={\"single_host_origin\"}\n            className={Style.signin_google_button}\n          />\n        </div>\n        {<div>\n          <p></p>\n          <p className={Style.signin_text_option}>Or</p>\n        </div> }\n        <div>\n          <Formik\n            initialValues={{\n              // email: \"athira@webandcrafts.in\",\n              // password: \"123456@Aa\",\n              email: \"\",\n              password: \"\",\n              accessCountry: \"0\",\n              loginType: \"email\",\n              mobile: \"\",\n              dial_code: \"91\",\n              countryCode: \"IN\",\n              code: { name: \"\", flag: \"ðŸ‡®\", code: \"\", dial_code: \"\" },\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting }) => {\n              if (values.submitBttn === \"type1\") {\n                loginwithotp(values);\n              } else if (values.submitBttn === \"type2\") {\n                login(values, setSubmitting);\n              }\n            }}\n          >\n            {({\n              touched,\n              errors,\n              isSubmitting,\n              handleChange,\n              values,\n              setFieldValue,\n              handleSubmit,\n              resetForm,\n            }) => {\n              return (\n                <Form\n                  onSubmit={handleSubmit}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\") {\n                      e.preventDefault();\n                      if (values.password == \"\") {\n                        setFieldValue(\"submitBttn\", \"type1\");\n                      } else {\n                        setFieldValue(\"submitBttn\", \"type2\");\n                      }\n                      handleSubmit();\n                    }\n                  }}\n                >\n                  <div className=\"form-group\">\n                    <label className={Style.signin_form_label}>\n                      <div>\n                        <div className={Style.signin_radiowrp}>\n                          <span className=\"ml-33\">Sign in with</span>\n                          <div className={Style.signin_radioeach}>\n                            <div>\n                              <Form.Check\n                                inline\n                                label=\"eMail\"\n                                name=\"loginType\"\n                                type=\"radio\"\n                                id=\"email\"\n                                onChange={() => {\n                                  setErrorMsg(\"\");\n                                  resetForm();\n                                  setFieldValue(\"loginType\", \"email\");\n                                }}\n                                checked={values.loginType === \"email\"}\n                              />\n                            </div>\n                            <div>\n                              <Form.Check\n                                inline\n                                label=\"Mobile\"\n                                name=\"loginType\"\n                                type=\"radio\"\n                                id=\"mobile\"\n                                checked={values.loginType === \"mobile\"}\n                                onChange={() => {\n                                  setErrorMsg(\"\");\n                                  resetForm();\n                                  setFieldValue(\"loginType\", \"mobile\");\n                                }}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </label>\n\n                    <br />\n                    {values.loginType === \"email\" && (\n                      <p>\n                        <Field\n                          type=\"text\"\n                          name=\"email\"\n                          onChange={(e) => {\n                            setErrorMsg(\"\");\n                            handleChange(e);\n                          }}\n                          className={\n                            Style.signin_input_field +\n                            \" \" +\n                            `${touched.email && errors.email ? \"is-invalid\" : \"\"\n                            }`\n                          }\n                          placeholder=\"Enter eMail id\"\n                        />\n\n                        <ErrorMessage\n                          component=\"div\"\n                          name=\"email\"\n                          className={Style.signin_error_msg}\n                        />\n                      </p>\n                    )}\n\n                    {values.loginType === \"mobile\" && (\n                      <div className={Style.mob_flag_wrp}>\n                        <div\n                          className={`${Style.siginin_mobile}${\" \"}${touched.mobile && errors.mobile ? \"is-invalid\" : \"\"\n                            }`}\n                        >\n                         <CustomPhoneInput\n                            country={\"in\"}\n                            value={values.mobile?.slice(values.dial_code?.length)}\n                            name=\"mobile\"\n                            autoFormat={false}\n                            countryCodeEditable={false}\n                            onChange={(value, data, event, formattedValue) => {\n                              setFieldValue(\"mobile\", value);\n                              setFieldValue(\"dial_code\", data.dialCode);\n                              setFieldValue(\n                                \"countryCode\",\n                                data.countryCode?.toUpperCase()\n                              );\n                              setErrorMsg(\"\");\n                              handleOnChange(\n                                value,\n                                data,\n                                event,\n                                formattedValue\n                              );\n                            }}\n                          />\n                          {/* <select\n                            className={Style.signin_country_code}\n                            value={values.accessCountry}\n                            name=\"accessCountry\"\n                            onChange={(e) => {\n                              setFieldValue(\"accessCountry\", e.target.value);\n                              setFieldValue(\n                                \"code\",\n                                CountryJson[e.target.value]\n                              );\n                            }}\n                            // onChange={(value) =>\n                            //   setFieldValue(\"accessCountry\", value)\n                            // }\n                          >\n                            {CountryJson.map((item, index) => {\n                              return (\n                                <option value={index}>\n                                  {item.flag} {item.dial_code}\n                                </option>\n                              );\n                            })}\n                          </select> */}\n                          {/* <Field\n                            type=\"text\"\n                            name=\"mobile\"\n                            placeholder=\"Enter Mobile Number\"\n                            onChange={(e) => {\n                              if (\n                                e.target.value === \"\" ||\n                                re.test(e.target.value)\n                              ) {\n                                setErrorMsg(\"\");\n                                handleChange(e);\n                              }\n                            }}\n                            autoComplete=\"off\"\n                            className={Style.signin_mobile_input}\n                          /> */}\n                        </div>\n                        <ErrorMessage\n                          component=\"div\"\n                          name=\"mobile\"\n                          className={Style.signin_error_msg}\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  <div className={Style.pswrd_input}>\n                    <label className={Style.signin_form_label}>Password</label>\n                    <br />\n                    <div\n                      className={\n                        Style.signin_input_field +\n                        \" \" +\n                        `${touched.password && errors.password\n                          ? \"is-invalid\"\n                          : \"\"\n                        }`\n                      }\n                    >\n                      <Field\n                        type={passwordShown ? \"text\" : \"password\"}\n                        name=\"password\"\n                        placeholder=\"Enter Password\"\n                        className={Style.signinPasswordInput}\n                      />\n                      <img\n                        className={Style.signinPasswordImg}\n                        src={Assets.iconpassword}\n                        alt=\"\"\n                        onClick={togglePasswordVisiblity}\n                      />\n                    </div>\n\n                    <ErrorMessage\n                      component=\"div\"\n                      name=\"password\"\n                      className={Style.signin_error_msg1}\n                    />\n                    <p className={Style.signin_password_para}>\n                      Leave blank for OTP Sign in\n                    </p>\n                    <p\n                      className={Style.signin_password_forgot}\n                      onClick={() => history.push(\"/reset\")}\n                    >\n                      Forgot Password?\n                    </p>\n                  </div>\n\n                  {errorMsg != \"\" && (\n                    <p className={Style.errorMsg}>{errorMsg}</p>\n                  )}\n\n                  <div className={Style.signin_btn_wrp}>\n                    <Button\n                      type=\"submit\"\n                      onClick={() => {\n                        setFieldValue(\"submitBttn\", \"type1\");\n                      }}\n                      // onClick={signInWithOtp}\n                      variant=\"outline-secondary\"\n                      className={Style.signin_continue_btn}\n                    >\n                      Sign in with OTP\n                    </Button>\n                    &nbsp;\n                    <Button\n                      variant=\"outline-dark\"\n                      className={`${Style.signin_continue_btn1} ${values.password ? Style.signin_continue_btn1_active : \"\"\n                        }`}\n                      type=\"submit\"\n                      onClick={() => {\n                        setFieldValue(\"submitBttn\", \"type2\");\n                      }}\n                      disabled={isSubmitting}\n                    // onClick={login}\n                    >\n                      {values.submitBttn === \"type2\" && isSubmitting\n                        ? \"Please wait...\"\n                        : \"Sign in\"}\n                    </Button>\n                  </div>\n                  {/* <ReactTelephoneInput\n                    defaultCountry=\"in\"\n                    flagsImagePath={flagsImagePaths}\n                    onChange={handleInputChange}\n                    onBlur={handleInputBlur} */}\n                  {/* /> */}\n                </Form>\n              );\n            }}\n          </Formik>\n        </div>\n\n        <div>\n          <p></p>\n          <p className={Style.signin_checkbox_text}>\n            Don't have an account?\n            <Link to=\"/signup\">Sign up</Link>\n          </p>\n        </div>\n      </div>\n    </SignupLayout>\n  );\n}\n\nexport default Signin;"]},"metadata":{},"sourceType":"module"}