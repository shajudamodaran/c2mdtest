{"ast":null,"code":"var _jsxFileName = \"/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V7/c2md-web_react/src/components/Signup/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Style from \"./signup.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport Assets from \"../Layout/Assets\";\nimport classNames from \"classnames\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport { useFormik } from \"formik\";\nimport { GoogleLogin } from \"react-google-login\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSpeciality } from \"../../actions/SpecialityListingAction\";\nimport { signup_action } from \"../../actions/SignupAction\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\nimport CountryJson from \"../../constants/country.json\";\nimport * as Yup from \"yup\";\nimport { loginwithotp } from \"../../actions/LoginAction\";\nimport { signup_with_Google, checkUser } from \"../../actions/SignupAction\"; //\n\nimport { getCountryData } from \"../../actions/MicrositeAction\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport SighnupDropDown from \"../SignupDropdown/SighnupDropDown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Signup() {\n  _s();\n\n  const location = useLocation();\n  let backBtnData = location.state;\n  const re = /^[0-9\\b]+$/;\n  let history = useHistory();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchSpeciality());\n    dispatch(getCountryData());\n  }, []);\n  const speciality = useSelector(state => state.specialityList.specialityList);\n  let clinicdata = useSelector(state => state.clinicData);\n  let countryData = useSelector(state => state.login.countryData);\n  let reduxData = useSelector(state => state);\n  const [passwordShown, setPasswordShown] = useState(false);\n  const [ShowError, setShowError] = useState({\n    emailError: false,\n    mobileError: false,\n    mobileerrorMsg: \"\",\n    mailerrorMsg: \"\"\n  });\n\n  const togglePasswordVisiblity = () => {\n    setPasswordShown(passwordShown ? false : true);\n  };\n\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [userType, setUerType] = useState(\"Patient\");\n  const buttonSelection = classNames(Style.signup_form_button_type, \"col-md-6\");\n  const activeButton = classNames(Style.signup_form_button_type, \"col-md-6\", Style.active);\n  const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n  const nameRegExp = /^[a-zA-Z0-9 ]+$/;\n  const validationSchema = Yup.object().shape({\n    userType: Yup.string(),\n    fullName: Yup.string().required(\"It would be nice to address you with your full name. Please enter your full name\"),\n    email: Yup.string().email(\"There seems to be some issue with your email id. Please check \").required(\"An email id is required to keep you updated on any appointment related information\"),\n    mobileNumber: Yup.string().required(\"A mobile number is required to keep you updated on any appointment related information\").matches(phoneRegExp, \"There seems to be some issue with your mobile number. Please check\").min(4, \"Mobile number must be at least 10 characters\").max(15, \"Mobile number must be at most 15 characters\"),\n    password: Yup.string().required(\"You need to keep your account secure with a password\").min(8, \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\").matches(/[a-z]+/, \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\").matches(/[A-Z]+/, \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\").matches(/[@$!%*#?&]+/, \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\") // specialityType: Yup.string().when(\"userType\", {\n    //   is: \"Doctor\",\n    //   then: Yup.string().nullable().required(\"You must select your speciality to continue\"),\n    // }),\n\n  });\n  const formik = useFormik({\n    initialValues: {\n      userType: \"Patient\",\n      fullName: \"\",\n      email: \"\",\n      specialityType: null,\n      mobileNumber: \"\",\n      password: \"\",\n      accessCountry: \"0\",\n      dial_code: \"91\",\n      countryCode: \"IN\",\n      code: {\n        name: \"India\",\n        flag: \"ðŸ‡®ðŸ‡³\",\n        code: \"IN\",\n        dial_code: \"+91\"\n      }\n    },\n    validationSchema,\n    onSubmit: values => {\n      console.log(ShowError);\n\n      if (!ShowError.emailError && !ShowError.mobileError) {\n        history.push({\n          pathname: \"/signup/verify\",\n          state: {\n            detail: values,\n            userType: userType,\n            page: \"signup\"\n          }\n        });\n      }\n    }\n  });\n\n  const responseGoogle = response => {\n    let Obj = response.profileObj;\n\n    if (Obj) {\n      dispatch(signup_with_Google({\n        userType: userType,\n        Data: response.profileObj,\n        history: history\n      })).then(response => {\n        if (response.info) {\n          setErrorMsg(response.info);\n        }\n      });\n    }\n  };\n\n  const handleBlurAction1 = (event, type, fieldName) => {\n    let searchKey = type == \"Mobile\" ? `%2B${formik.values.code.dial_code.substring(1)} ${formik.values.mobileNumber}` : formik.values.email;\n    formik.handleBlur(event);\n\n    if (formik.values.email !== \"\") {\n      dispatch(checkUser({\n        searchtype: type,\n        searchKey: searchKey\n      })).then(res => {\n        if ((res === null || res === void 0 ? void 0 : res.info) === \"New User\") {} else {\n          setShowError({ ...ShowError,\n            emailError: true,\n            mailerrorMsg: res === null || res === void 0 ? void 0 : res.info\n          });\n        }\n      }).catch(() => {});\n    }\n  };\n\n  const handleBlurAction2 = (event, type, fieldName) => {\n    var _formik$values, _formik$values$dial_c, _formik$values2, _formik$values2$mobil, _formik$values3, _formik$values3$mobil;\n\n    let limit = (_formik$values = formik.values) === null || _formik$values === void 0 ? void 0 : (_formik$values$dial_c = _formik$values.dial_code) === null || _formik$values$dial_c === void 0 ? void 0 : _formik$values$dial_c.length;\n    let mobNo = (_formik$values2 = formik.values) === null || _formik$values2 === void 0 ? void 0 : (_formik$values2$mobil = _formik$values2.mobileNumber) === null || _formik$values2$mobil === void 0 ? void 0 : _formik$values2$mobil.slice(limit);\n\n    if (!((_formik$values3 = formik.values) === null || _formik$values3 === void 0 ? void 0 : (_formik$values3$mobil = _formik$values3.mobileNumber) === null || _formik$values3$mobil === void 0 ? void 0 : _formik$values3$mobil.slice(limit))) {\n      setShowError({ ...ShowError,\n        mobileError: false,\n        mobileerrorMsg: null\n      });\n    } else {\n      var _formik$values4;\n\n      let searchKey = type == \"Mobile\" ? `%2B${(_formik$values4 = formik.values) === null || _formik$values4 === void 0 ? void 0 : _formik$values4.dial_code} ${mobNo}` : formik.values.email;\n      formik.handleBlur(event);\n\n      if (formik.values.mobileNumber !== \"\") {\n        var _formik$values5, _formik$values5$mobil;\n\n        console.log((_formik$values5 = formik.values) === null || _formik$values5 === void 0 ? void 0 : (_formik$values5$mobil = _formik$values5.mobileNumber) === null || _formik$values5$mobil === void 0 ? void 0 : _formik$values5$mobil.slice(limit));\n        dispatch(checkUser({\n          searchtype: type,\n          searchKey: searchKey\n        })).then(res => {\n          if ((res === null || res === void 0 ? void 0 : res.info) === \"New User\") {\n            setShowError({ ...ShowError,\n              mobileError: false,\n              mobileerrorMsg: null\n            });\n          } else {\n            setShowError({ ...ShowError,\n              mobileError: true,\n              mobileerrorMsg: res === null || res === void 0 ? void 0 : res.info\n            });\n          }\n        }).catch(() => {});\n      }\n    }\n  };\n\n  const handleOnChange = (value, data, event, formattedValue) => {\n    console.log(formik.values);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SignupLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: Style.signup_form_align,\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: Style.signup_header_align,\n        children: [\"Create your account\", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: \"14px\",\n            marginLeft: \"5px\"\n          },\n          children: \"(For patient only)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.signup_button_type_selection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group \",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), errorMsg != \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: Style.errors,\n        children: errorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.form_group,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: Style.signup_form_label,\n          children: \"Full Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"fullName\",\n            placeholder: \"Enter your name\",\n            value: formik.values.fullName,\n            onChange: e => {\n              if (e.target.value === \"\" || nameRegExp.test(e.target.value)) {\n                formik.handleChange(e);\n              }\n            },\n            onBlur: formik.handleBlur,\n            autoComplete: \"off\",\n            className: Style.signup_input_field + \" \" + `${formik.touched.fullName && formik.errors.fullName ? \"is-invalid\" : \"\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), formik.touched.fullName && formik.errors.fullName ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.errors,\n            children: formik.errors.fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.form_group,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: Style.signup_form_label,\n          children: \"eMail Id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            name: \"email\",\n            className: Style.signup_input_field,\n            placeholder: \"Enter eMail id\",\n            value: formik.values.email,\n            onChange: e => {\n              setShowError({ ...ShowError,\n                emailError: false\n              });\n              formik.handleChange(e);\n            },\n            onBlur: event => {\n              handleBlurAction1(event, \"email\", \"email\");\n            },\n            autoComplete: \"off\",\n            className: Style.signup_input_field + \" \" + `${formik.touched.email && formik.errors.email ? \"is-invalid\" : \"\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), ShowError.emailError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: Style.errors,\n            children: ShowError.mailerrorMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.errors,\n            children: formik.errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.form_group,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: Style.signup_form_label,\n          children: \"Mobile Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mob-flag-bx-wrp\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mob-flag-wrp\" + \" \" + `${Style.siginup_mobileInput}${\" \"}${formik.touched.mobileNumber && formik.errors.mobileNumber ? \"is-invalid\" : \"\"}`,\n            children: /*#__PURE__*/_jsxDEV(PhoneInput, {\n              country: \"in\",\n              value: formik.values.mobile,\n              name: \"mobile\",\n              autoFormat: false,\n              countryCodeEditable: false,\n              onBlur: event => {\n                // formik.handleBlur(event);\n                handleBlurAction2(event, \"Mobile\", \"mobileNumber\");\n              },\n              onChange: (value, data, event, formattedValue) => {\n                var _data$countryCode;\n\n                console.log(value, data, event, formattedValue);\n                formik.setFieldValue(\"mobileNumber\", value);\n                formik.setFieldValue(\"dial_code\", data.dialCode); // formik.setFieldValue(\"code\",{ name:  data.name, flag: getCountryFlagFromCountryCode(data.countryCode.toUpperCase()), code: data.countryCode.toUpperCase(), dial_code:  data.dialCode })\n\n                formik.setFieldValue(\"countryCode\", (_data$countryCode = data.countryCode) === null || _data$countryCode === void 0 ? void 0 : _data$countryCode.toUpperCase()); // setShowError({\n                //   ...ShowError,\n                //   mobileError: false,\n                //   mobileerrorMsg: \"\",\n                // });\n\n                handleOnChange(value, data, event, formattedValue);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this), ShowError.mobileError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: Style.errors,\n            children: ShowError.mobileerrorMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 15\n          }, this), formik.touched.mobileNumber && formik.errors.mobileNumber ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.errors,\n            children: formik.errors.mobileNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.form_group,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: Style.signup_form_label,\n          children: \"Create Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: Style.pswrd_input,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.signup_input_field + \" \" + `${formik.touched.password && formik.errors.password ? \"is-invalid\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: passwordShown ? \"text\" : \"password\",\n              name: \"password\",\n              placeholder: \"Enter Password\",\n              value: formik.values.password,\n              onChange: formik.handleChange,\n              onBlur: formik.handleBlur,\n              autoComplete: \"off\",\n              className: Style.signupPasswordInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: Style.signupPasswordImg,\n              src: Assets.iconpassword,\n              alt: \"\",\n              onClick: togglePasswordVisiblity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this), formik.touched.password && formik.errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.errors,\n            children: formik.errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this), userType === \"Doctor\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.form_group,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: Style.signup_form_label,\n          children: \"Speciality\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(SighnupDropDown, {\n            value: formik.values.specialityType,\n            DataItem: speciality,\n            formik: formik,\n            defaultPlaceH: \"Select speciality\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 15\n          }, this), formik.touched.specialityType && formik.errors.specialityType ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.errors,\n            children: formik.errors.specialityType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: formik.handleSubmit,\n          variant: \"outline-secondary\",\n          className: Style.signup_continue_btn,\n          type: \"submit\",\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: Style.signup_checkbox_text,\n          children: [\" \", \"I agree to our\", /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"/termsofUse/terms\",\n              state: \"terms\"\n            },\n            target: \"_blank\",\n            children: \"Terms of service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 13\n          }, this), \"and\", /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"/termsofUse/privacy\",\n              state: \"privacy\"\n            },\n            target: \"_blank\",\n            children: \"Privacy Policy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: Style.signup_checkbox_text_signin,\n          children: [\"Already Signed up?\", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/signin\",\n            children: \" Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Signup, \"0X3feSjcKVFRJrUZlT5M+RTg9pM=\", false, function () {\n  return [useLocation, useHistory, useDispatch, useSelector, useSelector, useSelector, useSelector, useFormik];\n});\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V7/c2md-web_react/src/components/Signup/index.js"],"names":["React","useEffect","useState","Style","Button","Assets","classNames","SignupLayout","useFormik","GoogleLogin","useHistory","useDispatch","useSelector","fetchSpeciality","signup_action","NavLink","Link","useLocation","CountryJson","Yup","loginwithotp","signup_with_Google","checkUser","getCountryData","PhoneInput","SighnupDropDown","Signup","location","backBtnData","state","re","history","dispatch","speciality","specialityList","clinicdata","clinicData","countryData","login","reduxData","passwordShown","setPasswordShown","ShowError","setShowError","emailError","mobileError","mobileerrorMsg","mailerrorMsg","togglePasswordVisiblity","errorMsg","setErrorMsg","userType","setUerType","buttonSelection","signup_form_button_type","activeButton","active","phoneRegExp","nameRegExp","validationSchema","object","shape","string","fullName","required","email","mobileNumber","matches","min","max","password","formik","initialValues","specialityType","accessCountry","dial_code","countryCode","code","name","flag","onSubmit","values","console","log","push","pathname","detail","page","responseGoogle","response","Obj","profileObj","Data","then","info","handleBlurAction1","event","type","fieldName","searchKey","substring","handleBlur","searchtype","res","catch","handleBlurAction2","limit","length","mobNo","slice","handleOnChange","value","data","formattedValue","signup_form_align","handleSubmit","signup_header_align","fontSize","marginLeft","signup_button_type_selection","errors","form_group","signup_form_label","e","target","test","handleChange","signup_input_field","touched","siginup_mobileInput","mobile","setFieldValue","dialCode","toUpperCase","pswrd_input","signupPasswordInput","signupPasswordImg","iconpassword","signup_continue_btn","signup_checkbox_text","signup_checkbox_text_signin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Style from \"./signup.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport Assets from \"../Layout/Assets\";\nimport classNames from \"classnames\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport { useFormik } from \"formik\";\n\nimport { GoogleLogin } from \"react-google-login\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSpeciality } from \"../../actions/SpecialityListingAction\";\nimport { signup_action } from \"../../actions/SignupAction\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\nimport CountryJson from \"../../constants/country.json\";\nimport * as Yup from \"yup\";\nimport { loginwithotp } from \"../../actions/LoginAction\";\nimport { signup_with_Google, checkUser } from \"../../actions/SignupAction\";\n//\nimport { getCountryData } from \"../../actions/MicrositeAction\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\n\nimport SighnupDropDown from \"../SignupDropdown/SighnupDropDown\";\n\n\nfunction Signup() {\n  const location = useLocation();\n\n  let backBtnData = location.state;\n  const re = /^[0-9\\b]+$/;\n  let history = useHistory();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchSpeciality());\n    dispatch(getCountryData())\n  }, []);\n  const speciality = useSelector(\n    (state) => state.specialityList.specialityList\n  );\n\n  let clinicdata = useSelector(\n    (state) => state.clinicData\n  );\n  let countryData = useSelector(\n    (state) => state.login.countryData\n  );\n  let reduxData = useSelector(state => state)\n\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  const [ShowError, setShowError] = useState({\n    emailError: false,\n    mobileError: false,\n    mobileerrorMsg: \"\",\n    mailerrorMsg: \"\",\n  });\n  const togglePasswordVisiblity = () => {\n    setPasswordShown(passwordShown ? false : true);\n  };\n\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [userType, setUerType] = useState(\"Patient\");\n  const buttonSelection = classNames(Style.signup_form_button_type, \"col-md-6\");\n\n  const activeButton = classNames(\n    Style.signup_form_button_type,\n    \"col-md-6\",\n    Style.active\n  );\n\n  const phoneRegExp =\n    /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n  const nameRegExp = /^[a-zA-Z0-9 ]+$/;\n\n\n  const validationSchema = Yup.object().shape({\n    userType: Yup.string(),\n    fullName: Yup.string().required(\n      \"It would be nice to address you with your full name. Please enter your full name\"\n    ),\n    email: Yup.string()\n      .email(\"There seems to be some issue with your email id. Please check \")\n      .required(\n        \"An email id is required to keep you updated on any appointment related information\"\n      ),\n    mobileNumber: Yup.string()\n      .required(\n        \"A mobile number is required to keep you updated on any appointment related information\"\n      )\n      .matches(\n        phoneRegExp,\n        \"There seems to be some issue with your mobile number. Please check\"\n      )\n      .min(4, \"Mobile number must be at least 10 characters\")\n      .max(15, \"Mobile number must be at most 15 characters\"),\n    password: Yup.string()\n      .required(\"You need to keep your account secure with a password\")\n      .min(\n        8,\n        \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\"\n      )\n      .matches(\n        /[a-z]+/,\n        \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\"\n      )\n      .matches(\n        /[A-Z]+/,\n        \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\"\n      )\n      .matches(\n        /[@$!%*#?&]+/,\n        \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\"\n      ),\n    // specialityType: Yup.string().when(\"userType\", {\n    //   is: \"Doctor\",\n    //   then: Yup.string().nullable().required(\"You must select your speciality to continue\"),\n    // }),\n  });\n\n\n  const formik = useFormik({\n    initialValues: {\n      userType: \"Patient\",\n      fullName: \"\",\n      email: \"\",\n      specialityType: null,\n      mobileNumber: \"\",\n      password: \"\",\n      accessCountry: \"0\",\n      dial_code: \"91\",\n      countryCode: \"IN\",\n      code: { name: \"India\", flag: \"ðŸ‡®ðŸ‡³\", code: \"IN\", dial_code: \"+91\" },\n    },\n    validationSchema,\n\n    onSubmit: (values) => {\n      \n      console.log(ShowError)\n      if (!ShowError.emailError && !ShowError.mobileError) {\n        history.push({\n          pathname: \"/signup/verify\",\n          state: { detail: values, userType: userType, page: \"signup\" },\n        });\n     }\n\n    },\n\n  });\n\n\n \n\n  \n\n  const responseGoogle = (response) => {\n    let Obj = response.profileObj;\n\n    if (Obj) {\n      dispatch(\n        signup_with_Google({\n          userType: userType,\n          Data: response.profileObj,\n          history: history,\n        })\n      ).then((response) => {\n        if (response.info) {\n          setErrorMsg(response.info);\n        }\n      });\n    }\n  };\n\n  const handleBlurAction1 = (event, type, fieldName) => {\n\n\n\n    let searchKey =\n      type == \"Mobile\"\n        ? `%2B${formik.values.code.dial_code.substring(1)} ${formik.values.mobileNumber\n        }`\n        : formik.values.email;\n    formik.handleBlur(event);\n    if (formik.values.email !== \"\") {\n      dispatch(\n        checkUser({\n          searchtype: type,\n          searchKey: searchKey,\n        })\n      )\n        .then((res) => {\n          if (res?.info === \"New User\") {\n\n          } else {\n            setShowError({\n              ...ShowError,\n              emailError: true,\n\n              mailerrorMsg: res?.info,\n            });\n          }\n        })\n        .catch(() => { });\n    }\n  };\n\n  const handleBlurAction2 = (event, type, fieldName) => {\n\n\n\n    let limit = formik.values?.dial_code?.length;\n    let mobNo = formik.values?.mobileNumber?.slice(limit);\n\n    \n    if (!formik.values?.mobileNumber?.slice(limit)) {\n      setShowError({\n        ...ShowError,\n\n        mobileError: false,\n        mobileerrorMsg: null\n      });\n    }\n    else {\n\n      let searchKey =\n        type == \"Mobile\"\n          ? `%2B${formik.values?.dial_code} ${mobNo}`\n          : formik.values.email;\n\n      formik.handleBlur(event);\n\n      if (formik.values.mobileNumber !== \"\") {\n\n        console.log(formik.values?.mobileNumber?.slice(limit));\n\n\n        dispatch(\n          checkUser({\n            searchtype: type,\n            searchKey: searchKey,\n          })\n        )\n          .then((res) => {\n            if (res?.info === \"New User\") \n            {\n              setShowError({\n                ...ShowError,\n        \n                mobileError: false,\n                mobileerrorMsg: null\n              });\n            } else {\n              setShowError({\n                ...ShowError,\n\n                mobileError: true,\n                mobileerrorMsg: res?.info,\n              });\n            }\n          })\n          .catch(() => { });\n      }\n\n    }\n\n\n  };\n  const handleOnChange = (value, data, event, formattedValue) => {\n\n    console.log(formik.values);\n\n  };\n\n  return (\n    <SignupLayout>\n      <form className={Style.signup_form_align} onSubmit={formik.handleSubmit}>\n        <h2 className={Style.signup_header_align}>Create your account \n        <span style={{\n          fontSize:\"14px\",\n          marginLeft:\"5px\"\n        }}>(For patient only)</span>\n        </h2>\n        <div className={Style.signup_button_type_selection}>\n          {/* {\n            clinicdata ? null :\n              <Button\n                variant=\"outline-secondary\"\n                className={`${buttonSelection}${userType == \"Doctor\" && activeButton\n                  }`}\n                style={{ \"margin-right\": \"2%\" }}\n                onClick={() => {\n                  formik.resetForm();\n                  setUerType(\"Doctor\");\n                  formik.setFieldValue(\"userType\", \"Doctor\");\n                  setShowError({\n                    emailError: false,\n                    mobileError: false,\n                    mobileerrorMsg: \"\",\n                    mailerrorMsg: \"\",\n                  });\n                  history.push('/signin')\n                }}\n              >\n                <img src={Assets.doctor_icon} />\n                I'm a Doctor\n                {userType == \"Doctor\" && (\n                  <img\n                    src={Assets.signupTick}\n                    alt=\"\"\n                    className={Style.activeTick}\n                  />\n                )}\n              </Button>\n          } */}\n          {/* <Button\n            variant=\"outline-secondary\"\n            className={`${buttonSelection}${userType == \"Patient\" && activeButton\n              }`}\n            onClick={() => {\n              formik.resetForm();\n              setUerType(\"Patient\");\n              formik.setFieldValue(\"userType\", \"Patient\");\n              setShowError({\n                emailError: false,\n                mobileError: false,\n                mobileerrorMsg: \"\",\n                mailerrorMsg: \"\",\n              });\n            }}\n          >\n            <img src={Assets.patient_icon} />\n            I'm Patient\n            {userType == \"Patient\" && (\n              <img\n                src={Assets.signupTick}\n                alt=\"\"\n                className={Style.activeTick}\n              />\n            )}\n          </Button> */}\n        </div>\n        <div className=\"form-group \">\n          <p></p>\n          {/* <Button variant=\"outline-secondary\" className={Style.signup_google_btn} type=\"submit\">\n        Sign up with google\n      </Button> */}\n          {/* <div className={Style.btn_google}>\n            <GoogleLogin\n              clientId=\"4919873164-em3btdice5bkpojvdgu0kenvgtl3or77.apps.googleusercontent.com\"\n              buttonText=\"Sign up with google\"\n              onSuccess={responseGoogle}\n              onFailure={responseGoogle}\n              cookiePolicy={\"single_host_origin\"}\n              className={Style.gBtn}\n              disabled={false}\n            />\n          </div> */}\n        </div>\n        {errorMsg != \"\" && <p className={Style.errors}>{errorMsg}</p>}\n        {/* <div>\n          <p></p>\n          <p className={Style.signup_text_option}>Or</p>\n        </div> */}\n        <div className={Style.form_group}>\n          <label className={Style.signup_form_label}>Full Name</label>\n          <br />\n\n          <p>\n            <input\n              type=\"text\"\n              name=\"fullName\"\n              placeholder=\"Enter your name\"\n              value={formik.values.fullName}\n              onChange={(e) => {\n                if (e.target.value === \"\" || nameRegExp.test(e.target.value)) {\n                  formik.handleChange(e);\n                }\n              }}\n              onBlur={formik.handleBlur}\n              autoComplete=\"off\"\n              className={\n                Style.signup_input_field +\n                \" \" +\n                `${formik.touched.fullName && formik.errors.fullName\n                  ? \"is-invalid\"\n                  : \"\"\n                }`\n              }\n            />\n            {formik.touched.fullName && formik.errors.fullName ? (\n              <div className={Style.errors}>{formik.errors.fullName}</div>\n            ) : null}\n          </p>\n        </div>\n        <div className={Style.form_group}>\n          <label className={Style.signup_form_label}>eMail Id</label>\n          <br />\n\n          <p>\n            <input\n              type=\"email\"\n              name=\"email\"\n              className={Style.signup_input_field}\n              placeholder=\"Enter eMail id\"\n              value={formik.values.email}\n              onChange={(e) => {\n                setShowError({\n                  ...ShowError,\n                  emailError: false,\n                });\n\n                formik.handleChange(e);\n              }}\n              onBlur={(event) => {\n                handleBlurAction1(event, \"email\", \"email\");\n              }}\n              autoComplete=\"off\"\n              className={\n                Style.signup_input_field +\n                \" \" +\n                `${formik.touched.email && formik.errors.email\n                  ? \"is-invalid\"\n                  : \"\"\n                }`\n              }\n            />\n            {ShowError.emailError && (\n              <p className={Style.errors}>{ShowError.mailerrorMsg}</p>\n            )}\n            {formik.touched.email && formik.errors.email ? (\n              <div className={Style.errors}>{formik.errors.email}</div>\n            ) : null}\n          </p>\n        </div>\n        <div className={Style.form_group}>\n          <label className={Style.signup_form_label}>Mobile Number</label>\n          <br />\n          <div className=\"mob-flag-bx-wrp\">\n            <div\n              className={\n                \"mob-flag-wrp\" +\n                \" \" +\n                `${Style.siginup_mobileInput}${\" \"}${formik.touched.mobileNumber && formik.errors.mobileNumber\n                  ? \"is-invalid\"\n                  : \"\"\n                }`\n              }\n            >\n              {/* <select\n                className={Style.signup_country_code}\n                value={formik.values.accessCountry}\n                name=\"accessCountry\"\n                onChange={(e) => {\n                  formik.setFieldValue(\"accessCountry\", e.target.value);\n                  formik.setFieldValue(\"code\", CountryJson[e.target.value]);\n                }}\n              >\n                {CountryJson.map((item, index) => {\n                  return (\n                    <option value={index}>\n                      {item.flag} {item.dial_code}\n                    </option>\n                  );\n                })}\n              </select> */}\n              <PhoneInput\n                country={\"in\"}\n                value={formik.values.mobile}\n                name=\"mobile\"\n                autoFormat={false}\n                countryCodeEditable={false}\n\n                onBlur={(event) => {\n                  // formik.handleBlur(event);\n                  handleBlurAction2(event, \"Mobile\", \"mobileNumber\");\n                }}\n\n                onChange={(value, data, event, formattedValue) => {\n\n                  console.log(value,data, event, formattedValue);\n\n\n                  formik.setFieldValue(\"mobileNumber\", value);\n                  formik.setFieldValue(\"dial_code\", data.dialCode);\n                  // formik.setFieldValue(\"code\",{ name:  data.name, flag: getCountryFlagFromCountryCode(data.countryCode.toUpperCase()), code: data.countryCode.toUpperCase(), dial_code:  data.dialCode })\n\n                  \n                  formik.setFieldValue(\n                    \"countryCode\",\n                    data.countryCode?.toUpperCase()\n                  );\n                  // setShowError({\n                  //   ...ShowError,\n\n                  //   mobileError: false,\n                  //   mobileerrorMsg: \"\",\n                  // });\n\n                  handleOnChange(value, data, event, formattedValue);\n                }}\n              />\n              {/* <input\n                type=\"text\"\n                name=\"mobileNumber\"\n                className={Style.signup_mobile_input_field}\n                placeholder=\"Enter Mobile Number\"\n                value={formik.values.mobileNumber}\n                onChange={(e) => {\n                  if (e.target.value === \"\" || re.test(e.target.value)) {\n                    setShowError({\n                      ...ShowError,\n\n                      mobileError: false,\n                      mobileerrorMsg: \"\",\n                    });\n                    formik.handleChange(e);\n                  }\n                }}\n                onBlur={(event) => {\n                  handleBlurAction2(event, \"Mobile\", \"mobileNumber\");\n                }}\n                autoComplete=\"off\"\n              /> */}\n            </div>\n            {ShowError.mobileError && (\n              <p className={Style.errors}>{ShowError.mobileerrorMsg}</p>\n            )}\n            {formik.touched.mobileNumber && formik.errors.mobileNumber ? (\n              <div className={Style.errors}>{formik.errors.mobileNumber}</div>\n            ) : null}\n          </div>\n        </div>\n        <div className={Style.form_group}>\n          <label className={Style.signup_form_label}>Create Password</label>\n          <br />\n\n          <p className={Style.pswrd_input}>\n            <div\n              className={\n                Style.signup_input_field +\n                \" \" +\n                `${formik.touched.password && formik.errors.password\n                  ? \"is-invalid\"\n                  : \"\"\n                }`\n              }\n            >\n              <input\n                type={passwordShown ? \"text\" : \"password\"}\n                name=\"password\"\n                placeholder=\"Enter Password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                autoComplete=\"off\"\n                className={Style.signupPasswordInput}\n              />\n              <img\n                className={Style.signupPasswordImg}\n                src={Assets.iconpassword}\n                alt=\"\"\n                onClick={togglePasswordVisiblity}\n              />\n            </div>\n            {formik.touched.password && formik.errors.password ? (\n              <div className={Style.errors}>{formik.errors.password}</div>\n            ) : null}\n          </p>\n        </div>\n        {userType === \"Doctor\" && (\n          <div className={Style.form_group}>\n            <label className={Style.signup_form_label}>Speciality</label>\n            <br />\n\n            <p>\n\n\n              {/* <select\n            \n                name=\"specialityType\"\n                value={formik.values.specialityType}\n                onChange={(e)=>{console.log(e)}}\n                onBlur={formik.handleBlur}\n                placeholder='test'\n                defaultValue={null}\n                className={\n                  Style.signup_input_field +\n                  \" \" +\n                  `${formik.touched.specialityType &&\n                    formik.errors.specialityType\n                    ? \"is-invalid\"\n                    : \"\"\n                  }`\n                }\n              >\n                <option value=\"\" disabled selected hidden>Select your option</option> \n                {speciality &&\n                  speciality.map((item, index) => {\n                    return (\n                      <option\n                        value={item.specialityName}\n                        label={item.specialityName}\n                      />\n                    );\n                  })}\n              </select> */}\n\n              <SighnupDropDown\n                value={formik.values.specialityType}\n                DataItem={speciality}\n                formik={formik}\n                defaultPlaceH=\"Select speciality\"\n              />\n\n\n              {formik.touched.specialityType && formik.errors.specialityType ? (\n                <div className={Style.errors}>\n                  {formik.errors.specialityType}\n                </div>\n              ) : null}\n            </p>\n          </div>\n        )}\n        <div className=\"col-md-12\">\n          <br />\n          <Button\n            onClick={formik.handleSubmit}\n            variant=\"outline-secondary\"\n            className={Style.signup_continue_btn}\n            type=\"submit\"\n          >\n            Continue\n          </Button>\n        </div>\n        <div>\n          <p></p>\n          <p className={Style.signup_checkbox_text}>\n            {\" \"}\n            I agree to our\n            {/* <a href=\"\">Terms of service</a> */}\n            <Link\n              to={{\n                pathname: \"/termsofUse/terms\",\n                state: \"terms\",\n              }}\n              target=\"_blank\"\n            >\n              Terms of service\n            </Link>\n            and\n            {/* <a href=\"/\">Privacy Policy</a> */}\n            <Link\n              to={{\n                pathname: \"/termsofUse/privacy\",\n                state: \"privacy\",\n              }}\n              target=\"_blank\"\n            >\n              Privacy Policy\n            </Link>\n          </p>\n          <p className={Style.signup_checkbox_text_signin}>\n            Already Signed up?\n            <Link to=\"/signin\"> Sign in</Link>\n          </p>\n        </div>\n      </form>\n    </SignupLayout>\n  );\n}\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}