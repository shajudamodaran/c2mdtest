{"ast":null,"code":"import { BOOK_APPOINMENT_QUESTIONARE, STORE_APPOINMENT_FORM_DATA, ADD_FAMILY, EDIT_FAMILY, BOOKING_CONFIRMATION, BOOKING_UPDATE_CONFIRMATION, REQUEST_BOOKING_CONFIRM, RESET_BOOKING, GOTO_DASHBOARD } from \"./type\";\nimport loginedApi from \"../apis\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useSelector } from \"react-redux\";\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nexport const fetch_appoinment_questions = () => async dispatch => {\n  const res = await axios.post(\"https://run.mocky.io/v3/bb5a24bf-255b-4289-9432-7ff1ebee4320\");\n  dispatch({\n    type: BOOK_APPOINMENT_QUESTIONARE,\n    payload: res.data\n  });\n};\nexport const Store_formData = data => async dispatch => {\n  dispatch({\n    type: STORE_APPOINMENT_FORM_DATA,\n    payload: data\n  });\n};\nexport const book_slot = ({\n  data,\n  userr,\n  old_appointment\n}) => async dispatch => {\n  var _data$insurance, _data$insurance2;\n\n  let data1 = {\n    nationalId: data.nationalId,\n    insurance: {\n      provider: (_data$insurance = data.insurance) === null || _data$insurance === void 0 ? void 0 : _data$insurance.provider,\n      membershipNo: (_data$insurance2 = data.insurance) === null || _data$insurance2 === void 0 ? void 0 : _data$insurance2.membershipNo\n    },\n    symptoms: data.symptoms,\n    medicalConditions: data.medicalConditions,\n    patientHeight: \"100\",\n    firstName: data.firstName,\n    reasonForVisit: data.reasonForVisit,\n    notesToDoctor: data.notesToDoctor,\n    weightMeasurement: \"kg\",\n    noOfBooking: 1,\n    bookingFrom: data.bookingFrom,\n    reminderNumber: data.reminderNumber,\n    appointmentFor: data.appointmentFor,\n    reports: data.reports,\n    blockId: \"\",\n    basicFees: data.basicFees.replace(\"INR \", \"\"),\n    surgerydetails: data.surgeries,\n    referenceId: \"\",\n    allergies: data.allergies,\n    gender: data.gender,\n    appointmentDate: data.appointmentDate,\n    emergencyname: data.emergencyname,\n    relationship: data.relationship,\n    patientWeight: \"200\",\n    dob: data.dob,\n    heightMeasurement: \"cm\",\n    medications: data.medications,\n    emergencyrelation: data.emergencyrelation,\n    dentalInfo: \"[]\",\n    bookingType: data.bookingType,\n    fees: data.fees,\n    hospitalid: \"\",\n    typeofconsultation: \"First time consultation\",\n    doctorId: data.doctorId,\n    emergencyphone: data.emergencyphone,\n    status: data.status,\n    modeOfConsultation: \"Video\",\n    duration: data.duration,\n    appointmentTime: data.appointmentTime,\n    lastName: \"\"\n  };\n  let response = [];\n  let orderRes = [];\n\n  if (!(old_appointment === null || old_appointment === void 0 ? void 0 : old_appointment.info)) {\n    response = await loginedApi.post(\"/appointments\", {\n      token: \"C2MDVerificationToken\",\n      data: {\n        IsfromMobile: true,\n        bookingFrom: data.bookingFrom,\n        todayRate: \"74.27006\",\n        Ipaddress: IP,\n        Os: platform,\n        browserTimeZone: \"GMT%2B05:30\",\n        attachedReportFiles: \"[]\",\n        patientId: userr.userId,\n        appointmentDetails: data1,\n        actualRate: \"74.27006\",\n        useragent: userAgent\n      },\n      requestType: \"161\"\n    });\n    dispatch({\n      type: BOOKING_UPDATE_CONFIRMATION,\n      payload: response.data.data\n    });\n    orderRes = response.data.data;\n  } else {\n    response = old_appointment;\n    orderRes = response;\n  } // let orderRes = response.data.data;\n\n\n  if ((data === null || data === void 0 ? void 0 : data.bookingFrom) == \"Request\") {\n    let appinmentData = {\n      appoinmentId: \"\",\n      appoinmentFromTime: \"\",\n      appoinmentToTime: \"\",\n      appoinmentType: \"Request\"\n    };\n    dispatch({\n      type: BOOKING_CONFIRMATION,\n      payload: \"Request\"\n    }); // dispatch({ type: REQUEST_BOOKING_CONFIRM });\n    // dispatch(\n    //   BookingConfirmationOnRequest({\n    //     orderData: data1,\n    //     user: userr,\n    //     orderRes,\n    //   })\n    // );\n  } else {\n    dispatch(displayRazorpay({\n      orderRes,\n      orderdata: data1,\n      user: userr,\n      formData: data\n    }));\n  }\n};\n\nfunction loadScript(src) {\n  return new Promise(resolve => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = () => {\n      resolve(true);\n    };\n\n    script.onerror = () => {\n      resolve(false);\n    };\n\n    document.body.appendChild(script);\n  });\n}\n\nexport const displayRazorpay = ({\n  orderRes,\n  orderdata,\n  user,\n  formData\n}) => async dispatch => {\n  const res = await loadScript(\"https://checkout.razorpay.com/v1/checkout.js\");\n\n  if (!res) {\n    alert(\"Razorpay SDK failed to load. Are you online?\");\n    return;\n  }\n\n  let result = {\n    amount: orderdata.basicFees * 100,\n    currency: \"INR\",\n    receipt: \"Receipt no. 1\",\n    payment_capture: 1,\n    notes: {\n      notes_key_1: \"Tea, Earl Grey, Hot\",\n      notes_key_2: \"Tea, Earl Greyâ€¦ decaf.\"\n    },\n    order_id: orderRes === null || orderRes === void 0 ? void 0 : orderRes.orderId\n  };\n  const {\n    amount,\n    order_id,\n    currency\n  } = result;\n  const options = {\n    key: orderRes.paymentgatewaykey,\n    // Enter the Key ID generated from the Dashboard\n    amount: amount.toString(),\n    currency: currency,\n    name: formData === null || formData === void 0 ? void 0 : formData.hospitalname,\n    description: \"\",\n    image: formData === null || formData === void 0 ? void 0 : formData.clinicLogo,\n    order_id: order_id,\n    handler: async function (response) {\n      const data = {\n        orderCreationId: order_id,\n        razorpayPaymentId: response.razorpay_payment_id,\n        razorpayOrderId: response.razorpay_order_id,\n        razorpaySignature: response.razorpay_signature\n      };\n      dispatch(signature_Verification({\n        razorpayRes: data,\n        orderData: orderdata,\n        user: user,\n        orderRes: orderRes\n      }));\n    },\n    prefill: {\n      name: \"<YOUR NAME>\",\n      email: user.userName,\n      contact: user.mobileNumber\n    },\n    notes: {\n      address: \"Example Corporate Office\"\n    },\n    theme: {\n      color: \"#61dafb\"\n    }\n  };\n  const paymentObject = new window.Razorpay(options);\n  paymentObject.on(\"payment.failed\", function (response) {});\n  paymentObject.open();\n};\nexport const signature_Verification = ({\n  razorpayRes,\n  orderData,\n  user,\n  orderRes\n}) => async dispatch => {\n  var _res$data;\n\n  const res = await loginedApi.post(\"signatureverification\", {\n    data: {\n      razorpay_signature: razorpayRes.razorpaySignature,\n      useragent: userAgent,\n      razorpay_order_id: razorpayRes.razorpayOrderId,\n      razorpay_payment_id: razorpayRes.razorpayPaymentId,\n      Ipaddress: IP,\n      Os: platform\n    },\n    token: \"C2MDVerificationToken\",\n    requestType: \"1025\"\n  });\n\n  if (((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.data.status) === \"Success\") {\n    dispatch(BookingConfirmation({\n      razorpayRes: razorpayRes,\n      orderData: orderData,\n      user: user,\n      orderRes: orderRes\n    }));\n  }\n};\nexport const BookingConfirmation = ({\n  razorpayRes,\n  orderData,\n  user,\n  orderRes\n}) => async dispatch => {\n  let uploadData = {\n    transactionPG: \"RAZORPAY\",\n    userId: user.userId,\n    appointmentDetails: {\n      appointmentBook: {\n        patientHeight: \"100\",\n        firstName: orderData.firstName,\n        reasonForVisit: orderData.reasonForVisit,\n        notesToDoctor: orderData.notesToDoctor,\n        weightMeasurement: \"kg\",\n        noOfBooking: 1,\n        bookingFrom: orderData.bookingFrom,\n        reminderNumber: orderData.reminderNumber,\n        appointmentFor: orderData.appointmentFor,\n        reports: orderData.reports,\n        blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n        basicFees: orderData.basicFees.replace(\"INR \", \"\"),\n        referenceId: \"\",\n        surgerydetails: orderData.surgerydetails,\n        allergies: orderData.allergies,\n        symptoms: orderData.symptoms,\n        medicalConditions: orderData.medicalConditions,\n        medications: orderData.medications,\n        gender: orderData.gender,\n        appointmentDate: orderData.appointmentDate,\n        emergencyname: orderData.emergencyname,\n        relationship: orderData.relationship,\n        patientWeight: \"200\",\n        dob: orderData.dob,\n        heightMeasurement: \"cm\",\n        emergencyrelation: orderData.emergencyrelation,\n        dentalInfo: \"[]\",\n        bookingType: orderData.bookingType,\n        fees: orderData.fees,\n        hospitalid: \"\",\n        typeofconsultation: orderData.typeofconsultation,\n        doctorId: orderData.doctorId,\n        emergencyphone: orderData.emergencyphone,\n        status: orderData.status,\n        modeOfConsultation: \"Video\",\n        duration: orderData.duration,\n        appointmentTime: orderData.appointmentTime,\n        lastName: \"\"\n      },\n      couponCode: \"\",\n      bookingId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info\n    },\n    actualRate: \"74.27006\",\n    couponCode: \"\",\n    Ipaddress: IP,\n    transactionId: razorpayRes.razorpayPaymentId,\n    blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n    browserTimeZone: \"GMT%2B05:30\",\n    attachedReportFiles: \"[]\",\n    Os: platform,\n    useragent: userAgent,\n    razorpayId: razorpayRes.razorpayPaymentId,\n    patientId: user.userId,\n    referenceId: \"\",\n    todayRate: \"74.27006\",\n    bookingFrom: orderData.bookingFrom\n  };\n  const res = await loginedApi.post(\"payment\", {\n    data: uploadData,\n    token: \"C2MDVerificationToken\",\n    requestType: \"313\"\n  });\n  let response = res.data.data;\n  let timeData = localStorage.getItem(\"appinmentTime\");\n  let appinmentTime = JSON.parse(timeData);\n  let appinmentData = {\n    appoinmentId: response,\n    appoinmentFromTime: appinmentTime.appoinmentFromTime,\n    appoinmentToTime: appinmentTime.appoinmentToTime,\n    appoinmentType: \"Book\"\n  };\n\n  if ((response === null || response === void 0 ? void 0 : response.info) !== \"Failed\") {\n    dispatch({\n      type: BOOKING_CONFIRMATION,\n      payload: appinmentData\n    });\n    localStorage.removeItem(\"appinmentTime\");\n  } else {}\n};\nexport const addMember = member => async dispatch => {\n  dispatch({\n    type: ADD_FAMILY,\n    payload: member\n  });\n};\nexport const editMember = member => async dispatch => {\n  dispatch({\n    type: EDIT_FAMILY,\n    payload: member\n  });\n};\nexport const BookingConfirmationOnRequest = ({\n  orderData,\n  user,\n  orderRes\n}) => async dispatch => {\n  let uploadData = {\n    transactionPG: \"RAZORPAY\",\n    userId: user.userId,\n    appointmentDetails: {\n      appointmentBook: {\n        patientHeight: \"100\",\n        firstName: orderData.firstName,\n        reasonForVisit: orderData.reasonForVisit,\n        notesToDoctor: orderData.notesToDoctor,\n        weightMeasurement: \"kg\",\n        noOfBooking: 1,\n        bookingFrom: orderData.bookingFrom,\n        reminderNumber: \"%2B91 8157968993\",\n        appointmentFor: orderData.appointmentFor,\n        reports: orderData.reports,\n        blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n        basicFees: orderData.basicFees.replace(\"INR \", \"\"),\n        surgerydetails: orderData.surgeries,\n        referenceId: \"123456\",\n        allergies: orderData.allergies,\n        gender: orderData.gender,\n        appointmentDate: orderData.appointmentDate,\n        emergencyname: orderData.emergencyname,\n        relationship: orderData.relationship,\n        patientWeight: \"200\",\n        dob: orderData.dob,\n        heightMeasurement: \"cm\",\n        medications: orderData.medications,\n        emergencyrelation: orderData.emergencyrelation,\n        dentalInfo: \"[]\",\n        bookingType: orderData.bookingType,\n        fees: orderData.fees,\n        hospitalid: \"123456\",\n        typeofconsultation: orderData.typeofconsultation,\n        doctorId: orderData.doctorId,\n        emergencyphone: \"%2B91 968754621\",\n        status: orderData.status,\n        modeOfConsultation: \"Video\",\n        duration: orderData.duration,\n        appointmentTime: orderData.appointmentTime,\n        lastName: \"\"\n      },\n      couponCode: \"\",\n      bookingId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info\n    },\n    actualRate: \"74.27006\",\n    couponCode: \"\",\n    Ipaddress: IP,\n    transactionId: \"\",\n    blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n    browserTimeZone: \"GMT%2B05:30\",\n    attachedReportFiles: \"[]\",\n    Os: platform,\n    useragent: userAgent,\n    razorpayId: \"\",\n    patientId: user.userId,\n    referenceId: \"\",\n    todayRate: \"74.27006\",\n    bookingFrom: orderData.bookingFrom\n  };\n  const res = await loginedApi.post(\"payment\", {\n    data: uploadData,\n    token: \"C2MDVerificationToken\",\n    requestType: \"313\"\n  });\n  let response = res.data.data;\n\n  if ((response === null || response === void 0 ? void 0 : response.info) !== \"Failed\") {\n    dispatch({\n      type: BOOKING_CONFIRMATION,\n      payload: response\n    });\n  } else {}\n};\nexport const GotoDashboard_action = () => async dispatch => {\n  dispatch({\n    type: GOTO_DASHBOARD\n  });\n};\nexport const reset_booking = () => async dispatch => {\n  dispatch({\n    type: RESET_BOOKING\n  });\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V3/c2md-web_react/src/actions/BookAppoinmentAction.js"],"names":["BOOK_APPOINMENT_QUESTIONARE","STORE_APPOINMENT_FORM_DATA","ADD_FAMILY","EDIT_FAMILY","BOOKING_CONFIRMATION","BOOKING_UPDATE_CONFIRMATION","REQUEST_BOOKING_CONFIRM","RESET_BOOKING","GOTO_DASHBOARD","loginedApi","axios","toast","useSelector","publicIp","require","IP","v4","platform","window","navigator","userAgent","fetch_appoinment_questions","dispatch","res","post","type","payload","data","Store_formData","book_slot","userr","old_appointment","data1","nationalId","insurance","provider","membershipNo","symptoms","medicalConditions","patientHeight","firstName","reasonForVisit","notesToDoctor","weightMeasurement","noOfBooking","bookingFrom","reminderNumber","appointmentFor","reports","blockId","basicFees","replace","surgerydetails","surgeries","referenceId","allergies","gender","appointmentDate","emergencyname","relationship","patientWeight","dob","heightMeasurement","medications","emergencyrelation","dentalInfo","bookingType","fees","hospitalid","typeofconsultation","doctorId","emergencyphone","status","modeOfConsultation","duration","appointmentTime","lastName","response","orderRes","info","token","IsfromMobile","todayRate","Ipaddress","Os","browserTimeZone","attachedReportFiles","patientId","userId","appointmentDetails","actualRate","useragent","requestType","appinmentData","appoinmentId","appoinmentFromTime","appoinmentToTime","appoinmentType","displayRazorpay","orderdata","user","formData","loadScript","src","Promise","resolve","script","document","createElement","onload","onerror","body","appendChild","alert","result","amount","currency","receipt","payment_capture","notes","notes_key_1","notes_key_2","order_id","orderId","options","key","paymentgatewaykey","toString","name","hospitalname","description","image","clinicLogo","handler","orderCreationId","razorpayPaymentId","razorpay_payment_id","razorpayOrderId","razorpay_order_id","razorpaySignature","razorpay_signature","signature_Verification","razorpayRes","orderData","prefill","email","userName","contact","mobileNumber","address","theme","color","paymentObject","Razorpay","on","open","BookingConfirmation","uploadData","transactionPG","appointmentBook","couponCode","bookingId","transactionId","razorpayId","timeData","localStorage","getItem","appinmentTime","JSON","parse","removeItem","addMember","member","editMember","BookingConfirmationOnRequest","GotoDashboard_action","reset_booking"],"mappings":"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","sourcesContent":["import {\n  BOOK_APPOINMENT_QUESTIONARE,\n  STORE_APPOINMENT_FORM_DATA,\n  ADD_FAMILY,\n  EDIT_FAMILY,\n  BOOKING_CONFIRMATION,\n  BOOKING_UPDATE_CONFIRMATION,\n  REQUEST_BOOKING_CONFIRM,\n  RESET_BOOKING,\n  GOTO_DASHBOARD,\n} from \"./type\";\nimport loginedApi from \"../apis\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useSelector } from \"react-redux\";\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nexport const fetch_appoinment_questions = () => async (dispatch) => {\n  const res = await axios.post(\n    \"https://run.mocky.io/v3/bb5a24bf-255b-4289-9432-7ff1ebee4320\"\n  );\n\n  dispatch({ type: BOOK_APPOINMENT_QUESTIONARE, payload: res.data });\n};\n\nexport const Store_formData = (data) => async (dispatch) => {\n  dispatch({ type: STORE_APPOINMENT_FORM_DATA, payload: data });\n};\n\nexport const book_slot =\n  ({ data, userr, old_appointment }) =>\n  async (dispatch) => {\n    let data1 = {\n      nationalId: data.nationalId,\n      insurance: {\n        provider: data.insurance?.provider,\n        membershipNo: data.insurance?.membershipNo,\n      },\n      symptoms: data.symptoms,\n      medicalConditions: data.medicalConditions,\n      patientHeight: \"100\",\n      firstName: data.firstName,\n      reasonForVisit: data.reasonForVisit,\n      notesToDoctor: data.notesToDoctor,\n      weightMeasurement: \"kg\",\n      noOfBooking: 1,\n      bookingFrom: data.bookingFrom,\n      reminderNumber: data.reminderNumber,\n      appointmentFor: data.appointmentFor,\n      reports: data.reports,\n      blockId: \"\",\n      basicFees: data.basicFees.replace(\"INR \", \"\"),\n      surgerydetails: data.surgeries,\n      referenceId: \"\",\n      allergies: data.allergies,\n      gender: data.gender,\n      appointmentDate: data.appointmentDate,\n      emergencyname: data.emergencyname,\n      relationship: data.relationship,\n      patientWeight: \"200\",\n      dob: data.dob,\n      heightMeasurement: \"cm\",\n      medications: data.medications,\n      emergencyrelation: data.emergencyrelation,\n      dentalInfo: \"[]\",\n      bookingType: data.bookingType,\n      fees: data.fees,\n      hospitalid: \"\",\n      typeofconsultation: \"First time consultation\",\n      doctorId: data.doctorId,\n      emergencyphone: data.emergencyphone,\n      status: data.status,\n      modeOfConsultation: \"Video\",\n      duration: data.duration,\n      appointmentTime: data.appointmentTime,\n      lastName: \"\",\n    };\n    let response = [];\n    let orderRes = [];\n    if (!old_appointment?.info) {\n      response = await loginedApi.post(\"/appointments\", {\n        token: \"C2MDVerificationToken\",\n        data: {\n          IsfromMobile: true,\n          bookingFrom: data.bookingFrom,\n          todayRate: \"74.27006\",\n          Ipaddress: IP,\n          Os: platform,\n          browserTimeZone: \"GMT%2B05:30\",\n          attachedReportFiles: \"[]\",\n          patientId: userr.userId,\n          appointmentDetails: data1,\n          actualRate: \"74.27006\",\n          useragent: userAgent,\n        },\n        requestType: \"161\",\n      });\n      dispatch({\n        type: BOOKING_UPDATE_CONFIRMATION,\n        payload: response.data.data,\n      });\n      orderRes = response.data.data;\n    } else {\n      response = old_appointment;\n      orderRes = response;\n    }\n\n    // let orderRes = response.data.data;\n\n    if (data?.bookingFrom == \"Request\") {\n      let appinmentData = {\n        appoinmentId: \"\",\n        appoinmentFromTime: \"\",\n        appoinmentToTime: \"\",\n        appoinmentType: \"Request\",\n      };\n      dispatch({ type: BOOKING_CONFIRMATION, payload: \"Request\" });\n      // dispatch({ type: REQUEST_BOOKING_CONFIRM });\n\n      // dispatch(\n      //   BookingConfirmationOnRequest({\n      //     orderData: data1,\n      //     user: userr,\n      //     orderRes,\n      //   })\n      // );\n    } else {\n      dispatch(\n        displayRazorpay({\n          orderRes,\n          orderdata: data1,\n          user: userr,\n          formData: data,\n        })\n      );\n    }\n  };\nfunction loadScript(src) {\n  return new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.onload = () => {\n      resolve(true);\n    };\n    script.onerror = () => {\n      resolve(false);\n    };\n    document.body.appendChild(script);\n  });\n}\n\nexport const displayRazorpay =\n  ({ orderRes, orderdata, user, formData }) =>\n  async (dispatch) => {\n    const res = await loadScript(\n      \"https://checkout.razorpay.com/v1/checkout.js\"\n    );\n\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Are you online?\");\n      return;\n    }\n\n    let result = {\n      amount: orderdata.basicFees * 100,\n      currency: \"INR\",\n      receipt: \"Receipt no. 1\",\n      payment_capture: 1,\n      notes: {\n        notes_key_1: \"Tea, Earl Grey, Hot\",\n        notes_key_2: \"Tea, Earl Greyâ€¦ decaf.\",\n      },\n      order_id: orderRes?.orderId,\n    };\n\n    const { amount, order_id, currency } = result;\n\n    const options = {\n      key: orderRes.paymentgatewaykey, // Enter the Key ID generated from the Dashboard\n      amount: amount.toString(),\n      currency: currency,\n      name: formData?.hospitalname,\n      description: \"\",\n      image: formData?.clinicLogo,\n      order_id: order_id,\n      handler: async function (response) {\n        const data = {\n          orderCreationId: order_id,\n          razorpayPaymentId: response.razorpay_payment_id,\n          razorpayOrderId: response.razorpay_order_id,\n          razorpaySignature: response.razorpay_signature,\n        };\n\n        dispatch(\n          signature_Verification({\n            razorpayRes: data,\n            orderData: orderdata,\n            user: user,\n            orderRes: orderRes,\n          })\n        );\n      },\n      prefill: {\n        name: \"<YOUR NAME>\",\n        email: user.userName,\n        contact: user.mobileNumber,\n      },\n      notes: {\n        address: \"Example Corporate Office\",\n      },\n      theme: {\n        color: \"#61dafb\",\n      },\n    };\n\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.on(\"payment.failed\", function (response) {});\n    paymentObject.open();\n  };\n\nexport const signature_Verification =\n  ({ razorpayRes, orderData, user, orderRes }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"signatureverification\", {\n      data: {\n        razorpay_signature: razorpayRes.razorpaySignature,\n        useragent: userAgent,\n        razorpay_order_id: razorpayRes.razorpayOrderId,\n        razorpay_payment_id: razorpayRes.razorpayPaymentId,\n        Ipaddress: IP,\n        Os: platform,\n      },\n      token: \"C2MDVerificationToken\",\n      requestType: \"1025\",\n    });\n\n    if (res.data?.data.status === \"Success\") {\n      dispatch(\n        BookingConfirmation({\n          razorpayRes: razorpayRes,\n          orderData: orderData,\n          user: user,\n          orderRes: orderRes,\n        })\n      );\n    }\n  };\nexport const BookingConfirmation =\n  ({ razorpayRes, orderData, user, orderRes }) =>\n  async (dispatch) => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: orderData.reminderNumber,\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes?.info,\n          basicFees: orderData.basicFees.replace(\"INR \", \"\"),\n\n          referenceId: \"\",\n          surgerydetails: orderData.surgerydetails,\n          allergies: orderData.allergies,\n          symptoms: orderData.symptoms,\n          medicalConditions: orderData.medicalConditions,\n          medications: orderData.medications,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: orderData.emergencyphone,\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\",\n        },\n        couponCode: \"\",\n        bookingId: orderRes?.info,\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: razorpayRes.razorpayPaymentId,\n      blockId: orderRes?.info,\n      browserTimeZone: \"GMT%2B05:30\",\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: razorpayRes.razorpayPaymentId,\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n    };\n\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\",\n    });\n\n    let response = res.data.data;\n    let timeData = localStorage.getItem(\"appinmentTime\");\n    let appinmentTime = JSON.parse(timeData);\n    let appinmentData = {\n      appoinmentId: response,\n      appoinmentFromTime: appinmentTime.appoinmentFromTime,\n      appoinmentToTime: appinmentTime.appoinmentToTime,\n      appoinmentType: \"Book\",\n    };\n    if (response?.info !== \"Failed\") {\n      dispatch({ type: BOOKING_CONFIRMATION, payload: appinmentData });\n      localStorage.removeItem(\"appinmentTime\");\n    } else {\n    }\n  };\n\nexport const addMember = (member) => async (dispatch) => {\n  dispatch({ type: ADD_FAMILY, payload: member });\n};\n\nexport const editMember = (member) => async (dispatch) => {\n  dispatch({ type: EDIT_FAMILY, payload: member });\n};\nexport const BookingConfirmationOnRequest =\n  ({ orderData, user, orderRes }) =>\n  async (dispatch) => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: \"%2B91 8157968993\",\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes?.info,\n          basicFees: orderData.basicFees.replace(\"INR \", \"\"),\n          surgerydetails: orderData.surgeries,\n          referenceId: \"123456\",\n          allergies: orderData.allergies,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n          medications: orderData.medications,\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"123456\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: \"%2B91 968754621\",\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\",\n        },\n        couponCode: \"\",\n        bookingId: orderRes?.info,\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: \"\",\n      blockId: orderRes?.info,\n      browserTimeZone: \"GMT%2B05:30\",\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: \"\",\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n    };\n\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\",\n    });\n\n    let response = res.data.data;\n\n    if (response?.info !== \"Failed\") {\n      dispatch({ type: BOOKING_CONFIRMATION, payload: response });\n    } else {\n    }\n  };\nexport const GotoDashboard_action = () => async (dispatch) => {\n  dispatch({ type: GOTO_DASHBOARD });\n};\n\nexport const reset_booking = () => async (dispatch) => {\n  dispatch({ type: RESET_BOOKING });\n};\n"]},"metadata":{},"sourceType":"module"}