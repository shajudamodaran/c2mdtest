{"ast":null,"code":"var _jsxFileName = \"/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V7/c2md-web_react/src/components/ResetPassword/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Style from \"./Reset.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport CountryJson from \"../../constants/country.json\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ResetPassword() {\n  _s();\n\n  const re = /^[0-9\\b]+$/;\n  const history = useHistory();\n  const emailTest = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  const [emailform, SetForm] = useState(false);\n\n  const handleOnChange = (value, data, event, formattedValue) => {};\n\n  return /*#__PURE__*/_jsxDEV(SignupLayout, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      validate: values => {\n        let errors = {};\n\n        if (values.loginType === \"email\") {\n          if (values.email === \"\") {\n            errors.email = \"Please enter the email id used when you created the account\";\n          } else if (!emailTest.test(values.email)) {\n            errors.email = \"There seems to be some issue with your email id. Please check \";\n          }\n        }\n\n        if (values.loginType === \"mobile\") {\n          if (values.mobile === \"\") {\n            errors.mobile = \"Please enter the registered mobile number \";\n          } // else if (values.mobile.toString().length != 10) {\n          //   errors.mobile =\n          //     \"There seems to be some issue with the mobile number you entered. Please check \";\n          // }\n\n        }\n\n        return errors;\n      },\n      initialValues: {\n        email: \"\",\n        mobile: \"\",\n        loginType: \"email\",\n        accessCountry: \"0\",\n        dial_code: \"91\",\n        countryCode: \"IN\",\n        code: {\n          name: \"India\",\n          flag: \"ðŸ‡®ðŸ‡³\",\n          code: \"IN\",\n          dial_code: \"+91\"\n        }\n      },\n      onSubmit: values => {\n        if (values.loginType === \"mobile\") {\n          history.push({\n            pathname: \"/signup/verify\",\n            state: {\n              detail: values,\n              page: \"reset\"\n            }\n          });\n        } else {\n          SetForm(true);\n        }\n      },\n      children: ({\n        touched,\n        errors,\n        setFieldValue,\n        values,\n        handleChange,\n        handleSubmit\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        className: Style.reset_form_align,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: Style.reset_header_align,\n          children: \"Reset your password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: emailform ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: Style.reset_text,\n            children: \"Verification code has been sent to your email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: Style.reset_text,\n            children: \"Enter the email address or mobile number associated with your account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: Style.reset_form_label,\n            children: [\"radio\"].map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: Style.signin_radiowrp,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Sign in With\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: Style.signin_radioeach,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      inline: true,\n                      label: \"Email\",\n                      name: \"group1\",\n                      type: type,\n                      id: `inline-${type}-1`,\n                      onChange: () => setFieldValue(\"loginType\", \"email\"),\n                      checked: values.loginType === \"email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      inline: true,\n                      label: \"Mobile\",\n                      name: \"group1\",\n                      type: type,\n                      id: `inline-${type}-2`,\n                      checked: values.loginType === \"mobile\",\n                      onChange: () => {\n                        SetForm(false);\n                        setFieldValue(\"loginType\", \"mobile\");\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 110,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this)\n            }, `inline-${type}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), values.loginType === \"email\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"text\",\n              name: \"email\",\n              className: Style.reset_input_field + \" \" + `${touched.email && errors.email ? \"is-invalid\" : \"\"}`,\n              placeholder: \"Enter Email Id\",\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"email\",\n              className: Style.reset_error_msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this), values.loginType === \"mobile\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: Style.reset_PhoneInput + \" \" + `${touched.mobile && errors.mobile ? \"is-invalid\" : \"\"}`,\n              children: /*#__PURE__*/_jsxDEV(PhoneInput, {\n                country: \"in\",\n                value: values.mobile,\n                name: \"mobile\",\n                autoFormat: false,\n                countryCodeEditable: false,\n                onChange: (value, data, event, formattedValue) => {\n                  var _data$countryCode;\n\n                  setFieldValue(\"mobile\", value);\n                  setFieldValue(\"dial_code\", data.dialCode);\n                  setFieldValue(\"countryCode\", (_data$countryCode = data.countryCode) === null || _data$countryCode === void 0 ? void 0 : _data$countryCode.toUpperCase());\n                  handleOnChange(value, data, event, formattedValue);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"mobile\",\n              className: Style.reset_error_msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: emailform ? /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            className: Style.signup_continue_btn,\n            type: \"submit\",\n            onClick: () => history.push(\"/signin\"),\n            children: \"Go back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            className: Style.signup_continue_btn,\n            type: \"submit\",\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPassword, \"J+cKjHPdtdshOdPdUurHEXAlVgk=\", false, function () {\n  return [useHistory];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V7/c2md-web_react/src/components/ResetPassword/index.js"],"names":["React","useState","Row","Style","Button","SignupLayout","Form","useHistory","Formik","Field","ErrorMessage","CountryJson","PhoneInput","ResetPassword","re","history","emailTest","emailform","SetForm","handleOnChange","value","data","event","formattedValue","values","errors","loginType","email","test","mobile","accessCountry","dial_code","countryCode","code","name","flag","push","pathname","state","detail","page","touched","setFieldValue","handleChange","handleSubmit","reset_form_align","reset_header_align","reset_text","reset_form_label","map","type","signin_radiowrp","signin_radioeach","reset_input_field","reset_error_msg","reset_PhoneInput","dialCode","toUpperCase","signup_continue_btn"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Style from \"./Reset.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport CountryJson from \"../../constants/country.json\";\n\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\n\nfunction ResetPassword() {\n  const re = /^[0-9\\b]+$/;\n  const history = useHistory();\n  const emailTest = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  const [emailform, SetForm] = useState(false);\n\n  const handleOnChange = (value, data, event, formattedValue) => {};\n  return (\n    <SignupLayout>\n      <Formik\n        validate={(values) => {\n          let errors = {};\n          if (values.loginType === \"email\") {\n            if (values.email === \"\") {\n              errors.email =\n                \"Please enter the email id used when you created the account\";\n            } else if (!emailTest.test(values.email)) {\n              errors.email =\n                \"There seems to be some issue with your email id. Please check \";\n            }\n          }\n          if (values.loginType === \"mobile\") {\n            if (values.mobile === \"\") {\n              errors.mobile = \"Please enter the registered mobile number \";\n            }\n            // else if (values.mobile.toString().length != 10) {\n            //   errors.mobile =\n            //     \"There seems to be some issue with the mobile number you entered. Please check \";\n            // }\n          }\n          return errors;\n        }}\n        initialValues={{\n          email: \"\",\n          mobile: \"\",\n          loginType: \"email\",\n          accessCountry: \"0\",\n          dial_code: \"91\",\n          countryCode: \"IN\",\n          code: { name: \"India\", flag: \"ðŸ‡®ðŸ‡³\", code: \"IN\", dial_code: \"+91\" },\n        }}\n        onSubmit={(values) => {\n          if (values.loginType === \"mobile\") {\n            history.push({\n              pathname: \"/signup/verify\",\n              state: { detail: values, page: \"reset\" },\n            });\n          } else {\n            SetForm(true);\n          }\n        }}\n      >\n        {({\n          touched,\n          errors,\n          setFieldValue,\n          values,\n          handleChange,\n          handleSubmit,\n        }) => (\n          <form className={Style.reset_form_align} onSubmit={handleSubmit}>\n            <h2 className={Style.reset_header_align}>Reset your password</h2>\n            <div className=\"form-group\">\n              {emailform ? (\n                <p className={Style.reset_text}>\n                  Verification code has been sent to your email\n                </p>\n              ) : (\n                <p className={Style.reset_text}>\n                  Enter the email address or mobile number associated with your\n                  account\n                </p>\n              )}\n            </div>\n            <div>\n              <p></p>\n            </div>\n            <div className=\"form-group\">\n              <label className={Style.reset_form_label}>\n                {[\"radio\"].map((type) => (\n                  <div key={`inline-${type}`}>\n                    <div className={Style.signin_radiowrp}>\n                      <span>Sign in With</span>\n                      <div className={Style.signin_radioeach}>\n                        <div>\n                          <Form.Check\n                            inline\n                            label=\"Email\"\n                            name=\"group1\"\n                            type={type}\n                            id={`inline-${type}-1`}\n                            onChange={() => setFieldValue(\"loginType\", \"email\")}\n                            checked={values.loginType === \"email\"}\n                          />\n                        </div>\n                        <div>\n                          <Form.Check\n                            inline\n                            label=\"Mobile\"\n                            name=\"group1\"\n                            type={type}\n                            id={`inline-${type}-2`}\n                            checked={values.loginType === \"mobile\"}\n                            onChange={() => {\n                              SetForm(false);\n                              setFieldValue(\"loginType\", \"mobile\");\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </label>\n\n              <br />\n              {values.loginType === \"email\" && (\n                <p>\n                  <Field\n                    type=\"text\"\n                    name=\"email\"\n                    className={\n                      Style.reset_input_field +\n                      \" \" +\n                      `${touched.email && errors.email ? \"is-invalid\" : \"\"}`\n                    }\n                    placeholder=\"Enter Email Id\"\n                    onChange={handleChange}\n                  />\n                  <ErrorMessage\n                    component=\"div\"\n                    name=\"email\"\n                    className={Style.reset_error_msg}\n                  />\n                </p>\n              )}\n              {values.loginType === \"mobile\" && (\n                <>\n                  <div\n                    className={\n                      Style.reset_PhoneInput +\n                      \" \" +\n                      `${touched.mobile && errors.mobile ? \"is-invalid\" : \"\"}`\n                    }\n                  >\n                    <PhoneInput\n                      country={\"in\"}\n                      value={values.mobile}\n                      name=\"mobile\"\n                      autoFormat={false}\n                      countryCodeEditable={false}\n                      onChange={(value, data, event, formattedValue) => {\n                        setFieldValue(\"mobile\", value);\n                        setFieldValue(\"dial_code\", data.dialCode);\n                        setFieldValue(\n                          \"countryCode\",\n                          data.countryCode?.toUpperCase()\n                        );\n\n                        handleOnChange(value, data, event, formattedValue);\n                      }}\n                    />\n                    {/* <select\n                      className={Style.forgot_country_code}\n                      value={values.accessCountry}\n                      name=\"accessCountry\"\n                      onChange={(e) => {\n                        setFieldValue(\"accessCountry\", e.target.value);\n                        setFieldValue(\"code\", CountryJson[e.target.value]);\n                      }}\n                      // onChange={(value) =>\n                      //   setFieldValue(\"accessCountry\", value)\n                      // }\n                    >\n                      {CountryJson.map((item, index) => {\n                        return (\n                          <option value={index}>\n                            {item.flag} {item.dial_code}\n                          </option>\n                        );\n                      })}\n                    </select> */}\n                    {/* <Field\n                      type=\"text\"\n                      name=\"mobile\"\n                      className={Style.reset_input_field}\n                      placeholder=\"Enter Mobile No\"\n                      onChange={(e) => {\n                        if (e.target.value === \"\" || re.test(e.target.value)) {\n                          handleChange(e);\n                        }\n                      }}\n                      autoComplete=\"off\"\n                    /> */}\n                  </div>\n                  <ErrorMessage\n                    component=\"div\"\n                    name=\"mobile\"\n                    className={Style.reset_error_msg}\n                  />\n                </>\n              )}\n            </div>\n\n            <div className=\"col-md-12\">\n              {emailform ? (\n                <Button\n                  variant=\"outline-secondary\"\n                  className={Style.signup_continue_btn}\n                  type=\"submit\"\n                  onClick={() => history.push(\"/signin\")}\n                >\n                  Go back\n                </Button>\n              ) : (\n                <Button\n                  variant=\"outline-secondary\"\n                  className={Style.signup_continue_btn}\n                  type=\"submit\"\n                >\n                  Continue\n                </Button>\n              )}\n            </div>\n          </form>\n        )}\n      </Formik>\n    </SignupLayout>\n  );\n}\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}