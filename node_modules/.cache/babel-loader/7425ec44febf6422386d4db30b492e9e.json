{"ast":null,"code":"var _formatTime;\n\nimport moment from \"moment\";\nimport loginedApi from \"../apis\";\nimport authHeader from './AuthHeader';\nimport { check_consultation } from \"./MicrositeAction\";\nimport { DASHBOARD_DATA_PATIENT, FETCH_COUNTRYDATA } from \"./type\";\n\nconst publicIp = require(\"public-ip\");\n\nconst {\n  detect\n} = require('detect-browser');\n\nconst browser = detect();\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const fetch_dashboardData = (patientId, email, phone) => async dispatch => {\n  let today = moment(new Date()).format(\"DD-MMM-YYYY\");\n  let resp = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      \"browserTimeZone\": \"GMT%2B05:30\"\n    },\n    \"requestType\": 1058\n  });\n  const doctorscountrycode = resp.data.data;\n  let data = {\n    patientId: patientId,\n    patientEmail: email,\n    patientMobile: phone,\n    browserTimeZone: `GMT${formatTime}`,\n    dayOfAppointment: moment(new Date()).format('DD-MMM-yyy'),\n    appointmentNavigation: \"start\",\n    todayRate: \"74.45000\",\n    currency: doctorscountrycode.currency,\n    accessCountry: doctorscountrycode.Country,\n    Ipaddress: doctorscountrycode.Ipaddress,\n    useragent: userAgent,\n    Browser: browser.name + \" \" + browser.version,\n    Os: platform\n  };\n  const response = await loginedApi.post(\"profile\", {\n    requestType: \"51\",\n    token: \"C2MDVerificationToken\",\n    data\n  }, {\n    headers: authHeader()\n  });\n\n  if (response.status === 200) {\n    dispatch({\n      type: DASHBOARD_DATA_PATIENT,\n      payload: response.data.data.data\n    });\n  } // return response.data.data.Details;\n\n}; // Recent activities API integration\n\nexport const fetch_recentactivities = (patientId, email, phone) => async dispatch => {\n  let today = moment(new Date()).format(\"DD-MMM-YYYY\");\n  let resp = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      \"browserTimeZone\": \"GMT%2B05:30\"\n    },\n    \"requestType\": 1058\n  });\n  const doctorscountrycode = resp.data.data;\n  let data = {\n    patientId: patientId,\n    patientEmail: email,\n    patientMobile: phone,\n    browserTimeZone: `GMT${formatTime}`,\n    todayRate: \"74.45000\",\n    currency: doctorscountrycode.currency,\n    accessCountry: doctorscountrycode.Country,\n    Ipaddress: doctorscountrycode.Ipaddress,\n    useragent: userAgent,\n    Browser: browser.name + \" \" + browser.version,\n    Os: platform\n  };\n  const response = await loginedApi.post(\"getrecentactivities\", {\n    requestType: \"1039\",\n    token: \"C2MDVerificationToken\",\n    data\n  }, {\n    headers: authHeader()\n  }); // console.log(\"recent activities----\",response)\n\n  if (response.status === 200) {// dispatch({ type: DASHBOARD_DATA_PATIENT, payload: response.data.data.data });\n  } // return response.data.data.Details;\n\n};\nexport const uploadReports = ({\n  formData,\n  userData,\n  dashboardData\n}) => async dispatch => {\n  console.log({\n    formData,\n    userData,\n    dashboardData\n  });\n  const config = {\n    headers: {\n      'content-type': 'multipart/form-data'\n    }\n  };\n  const response = await loginedApi.post(\"updatereports\", {\n    body: formData\n  }, config);\n  console.log(\"File upload result==>\", response);\n\n  if (response.status === 200) {\n    dispatch(check_consultation(userData, dashboardData));\n  }\n};\nexport const getCountryData = () => async dispatch => {\n  const res = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      \"browserTimeZone\": \"GMT%2B05:30\"\n    },\n    \"requestType\": 1058\n  });\n\n  if (res.status === 200) {\n    dispatch({\n      type: FETCH_COUNTRYDATA,\n      payload: res.data.data\n    });\n  }\n};","map":{"version":3,"sources":["/home/veena/Downloads/WEB_PUSH/c2md-web_react/src/actions/DashboardActions.js"],"names":["moment","loginedApi","authHeader","check_consultation","DASHBOARD_DATA_PATIENT","FETCH_COUNTRYDATA","publicIp","require","detect","browser","IP","v4","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","fetch_dashboardData","patientId","email","phone","dispatch","today","format","resp","post","doctorscountrycode","data","patientEmail","patientMobile","browserTimeZone","dayOfAppointment","appointmentNavigation","todayRate","currency","accessCountry","Country","Ipaddress","useragent","Browser","name","version","Os","response","requestType","token","headers","status","type","payload","fetch_recentactivities","uploadReports","formData","userData","dashboardData","console","log","config","body","getCountryData","res"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport loginedApi from \"../apis\";\nimport authHeader from './AuthHeader';\nimport { check_consultation } from \"./MicrositeAction\";\nimport { DASHBOARD_DATA_PATIENT, FETCH_COUNTRYDATA } from \"./type\";\n\nconst publicIp = require(\"public-ip\");\nconst { detect } = require('detect-browser');\nconst browser = detect();\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\n\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\")\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\")\n}//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\n\nexport const fetch_dashboardData = (patientId, email, phone) => async (dispatch) => {\n\n  let today = moment(new Date()).format(\"DD-MMM-YYYY\")\n\n \n    \n  let resp = await loginedApi.post(\"getcountrycode\", \n  {\n    \"token\": \"token\",\n    \"version\":\"2.0\",\n    \"data\": {\"browserTimeZone\":\"GMT%2B05:30\"},\n    \"requestType\": 1058\n});\nconst doctorscountrycode = resp.data.data;\n\n  let data = {\n    patientId: patientId,\n    patientEmail: email,\n    patientMobile: phone,\n    browserTimeZone: `GMT${formatTime}`,\n    dayOfAppointment: moment(new Date).format('DD-MMM-yyy'),\n    appointmentNavigation: \"start\",\n    todayRate: \"74.45000\",\n    currency: doctorscountrycode.currency,\n    accessCountry: doctorscountrycode.Country,\n    \n    Ipaddress: doctorscountrycode.Ipaddress, \n    useragent: userAgent,\n    Browser: browser.name+\" \"+browser.version,\n    Os: platform\n  }\n\n\n  const response = await loginedApi.post(\"profile\", {\n    requestType: \"51\",\n    token: \"C2MDVerificationToken\",\n    data\n  },{ headers: authHeader() });\n\n  if (response.status === 200) {\n\n    dispatch({ type: DASHBOARD_DATA_PATIENT, payload: response.data.data.data });\n  }\n\n\n  // return response.data.data.Details;\n};\n// Recent activities API integration\nexport const fetch_recentactivities = (patientId, email, phone) => async (dispatch) => {\n\n  let today = moment(new Date()).format(\"DD-MMM-YYYY\")\n\n \n    \n  let resp = await loginedApi.post(\"getcountrycode\", \n  {\n    \"token\": \"token\",\n    \"version\":\"2.0\",\n    \"data\": {\"browserTimeZone\":\"GMT%2B05:30\"},\n    \"requestType\": 1058\n});\nconst doctorscountrycode = resp.data.data;\n\n  let data = {\n    patientId: patientId,\n    patientEmail: email,\n    patientMobile: phone,\n    browserTimeZone: `GMT${formatTime}`,\n    \n    todayRate: \"74.45000\",\n    currency: doctorscountrycode.currency,\n    accessCountry: doctorscountrycode.Country,\n    \n    Ipaddress: doctorscountrycode.Ipaddress, \n    useragent: userAgent,\n    Browser: browser.name+\" \"+browser.version,\n    Os: platform\n  }\n\n\n  const response = await loginedApi.post(\"getrecentactivities\", {\n    requestType: \"1039\",\n    token: \"C2MDVerificationToken\",\n    data\n  },{ headers: authHeader() });\n\n  // console.log(\"recent activities----\",response)\n\n  if (response.status === 200) {\n\n   // dispatch({ type: DASHBOARD_DATA_PATIENT, payload: response.data.data.data });\n  }\n\n\n  // return response.data.data.Details;\n};\n\nexport const uploadReports = ({ formData, userData, dashboardData }) => async (dispatch) => {\n\n  console.log({ formData, userData, dashboardData });\n\n  const config = {\n    headers: { 'content-type': 'multipart/form-data' }\n  }\n\n\n  const response = await loginedApi.post(\"updatereports\", {\n    body: formData\n  }, config);\n\n  console.log(\"File upload result==>\", response);\n\n  if (response.status === 200) {\n\n    dispatch(\n      check_consultation(userData, dashboardData)\n    );\n  }\n\n\n}\n\nexport const getCountryData = () => async (dispatch) => {\n \n \n\n  \n  const res = await loginedApi.post(\"getcountrycode\", \n  {\n    \"token\": \"token\",\n    \"version\":\"2.0\",\n    \"data\": {\"browserTimeZone\":\"GMT%2B05:30\"},\n    \"requestType\": 1058\n});\n\n  if (res.status === 200) {\n\n\n    dispatch({ type: FETCH_COUNTRYDATA, payload: res.data.data });\n  }\n\n\n};\n\n\n"]},"metadata":{},"sourceType":"module"}