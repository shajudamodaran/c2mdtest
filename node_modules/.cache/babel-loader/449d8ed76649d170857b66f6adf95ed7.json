{"ast":null,"code":"var _formatTime;\n\nimport { BOOK_APPOINMENT_QUESTIONARE, STORE_APPOINMENT_FORM_DATA, ADD_FAMILY, EDIT_FAMILY, BOOKING_CONFIRMATION, BOOKING_UPDATE_CONFIRMATION, REQUEST_BOOKING_CONFIRM, RESET_BOOKING, GOTO_DASHBOARD } from \"./type\";\nimport loginedApi from \"../apis\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useSelector } from \"react-redux\";\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\n\nconst {\n  detect\n} = require('detect-browser');\n\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const fetch_appoinment_questions = () => async dispatch => {\n  const res = await axios.post(\"https://run.mocky.io/v3/bb5a24bf-255b-4289-9432-7ff1ebee4320\");\n  dispatch({\n    type: BOOK_APPOINMENT_QUESTIONARE,\n    payload: res.data\n  });\n};\nexport const Store_formData = data => async dispatch => {\n  dispatch({\n    type: STORE_APPOINMENT_FORM_DATA,\n    payload: data\n  });\n};\nexport const book_slot = ({\n  data,\n  userr,\n  old_appointment\n}) => async dispatch => {\n  let data1 = {\n    nationalId: data.nationalId,\n    // insurance: {\n    //   provider: data.insurance.provider,\n    //   membershipNo: data.insurance.membershipNo,\n    // },\n    symptoms: data.symptoms,\n    medicalConditions: data.medicalConditions,\n    patientHeight: \"100\",\n    firstName: data.firstName,\n    reasonForVisit: data.reasonForVisit,\n    notesToDoctor: data.notesToDoctor,\n    weightMeasurement: \"kg\",\n    noOfBooking: 1,\n    bookingFrom: data.bookingFrom,\n    reminderNumber: data.reminderNumber,\n    appointmentFor: data.appointmentFor,\n    reports: data.reports,\n    blockId: \"\",\n    basicFees: data.basicFees,\n    surgerydetails: data.surgeries,\n    referenceId: data.referenceId,\n    allergies: data.allergies,\n    gender: data.gender,\n    appointmentDate: data.appointmentDate,\n    emergencyname: data.emergencyname,\n    relationship: data.relationship,\n    patientWeight: \"200\",\n    dob: data.dob,\n    heightMeasurement: \"cm\",\n    medications: data.medications,\n    emergencyrelation: data.emergencyrelation,\n    dentalInfo: \"[]\",\n    bookingType: data.bookingType,\n    fees: data.fees,\n    hospitalid: data.hospitalId,\n    typeofconsultation: \"\",\n    doctorId: data.doctorId,\n    emergencyphone: data.emergencyphone,\n    status: data.status,\n    modeOfConsultation: \"Video\",\n    duration: data.duration,\n    appointmentTime: data.appointmentTime,\n    lastName: \"\",\n    typeofconsultation: data.typeofconsultation\n  };\n  let response = [];\n  let orderRes = [];\n\n  if (data.referenceId == \"\" && data.referenceId != \"12345\") {\n    if (!(old_appointment === null || old_appointment === void 0 ? void 0 : old_appointment.info)) {\n      response = await loginedApi.post(\"/appointments\", {\n        token: \"C2MDVerificationToken\",\n        data: {\n          IsfromMobile: true,\n          bookingFrom: data.bookingFrom,\n          todayRate: \"74.27006\",\n          Ipaddress: IP,\n          Os: platform,\n          browserTimeZone: `GMT${formatTime}`,\n          attachedReportFiles: \"[]\",\n          patientId: userr.userId,\n          appointmentDetails: data1,\n          actualRate: \"74.27006\",\n          useragent: userAgent,\n          Browser: browser.name + \" \" + browser.version,\n          appname: \"C2MD Web\"\n        },\n        requestType: \"161\"\n      });\n      console.log(response);\n      dispatch({\n        type: BOOKING_UPDATE_CONFIRMATION,\n        payload: response.data.data\n      });\n      orderRes = response.data.data;\n    } else {\n      response = old_appointment;\n      orderRes = response;\n    }\n  } else {\n    response = await loginedApi.post(\"/requestordergeneration\", {\n      token: \"C2MDVerificationToken\",\n      data: {\n        IsfromMobile: true,\n        bookingFrom: data.bookingFrom,\n        todayRate: \"74.27006\",\n        Ipaddress: IP,\n        Os: platform,\n        browserTimeZone: `GMT${formatTime}`,\n        attachedReportFiles: \"[]\",\n        doctorId: data.doctorId,\n        fees: data.fees,\n        appointmentId: data.referenceId,\n        appointmentDetails: data1,\n        actualRate: \"74.27006\",\n        useragent: userAgent,\n        Browser: browser.name + \" \" + browser.version,\n        appname: \"C2MD Web\"\n      },\n      requestType: \"1023\"\n    });\n    orderRes = response.data.data;\n    data1.bookingFrom = \"Request\";\n    data1.referenceId = orderRes.info;\n  } // let orderRes = response.data.data;\n\n\n  if ((data === null || data === void 0 ? void 0 : data.bookingFrom) == \"Request\") {\n    let appinmentData = {\n      appoinmentId: \"\",\n      appoinmentFromTime: \"\",\n      appoinmentToTime: \"\",\n      appoinmentType: \"Request\"\n    };\n    dispatch({\n      type: BOOKING_CONFIRMATION,\n      payload: \"Request\"\n    }); // dispatch({ type: REQUEST_BOOKING_CONFIRM });\n    // dispatch(\n    //   BookingConfirmationOnRequest({\n    //     orderData: data1,\n    //     user: userr,\n    //     orderRes,\n    //   })\n    // );\n  } else {\n    dispatch(displayRazorpay({\n      orderRes,\n      orderdata: data1,\n      user: userr,\n      formData: data\n    }));\n  }\n};\n\nfunction loadScript(src) {\n  return new Promise(resolve => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = () => {\n      resolve(true);\n    };\n\n    script.onerror = () => {\n      resolve(false);\n    };\n\n    document.body.appendChild(script);\n  });\n}\n\nexport const displayRazorpay = ({\n  orderRes,\n  orderdata,\n  user,\n  formData\n}) => async dispatch => {\n  const res = await loadScript(\"https://checkout.razorpay.com/v1/checkout.js\");\n\n  if (!res) {\n    alert(\"Razorpay SDK failed to load. Are you online?\");\n    return;\n  }\n\n  let result = {\n    amount: orderdata.basicFees * 100,\n    currency: \"INR\",\n    receipt: \"Receipt no. 1\",\n    payment_capture: 1,\n    notes: {\n      notes_key_1: \"Tea, Earl Grey, Hot\",\n      notes_key_2: \"Tea, Earl Greyâ€¦ decaf.\"\n    },\n    order_id: orderRes === null || orderRes === void 0 ? void 0 : orderRes.orderId\n  };\n  const {\n    amount,\n    order_id,\n    currency\n  } = result;\n  const options = {\n    key: orderRes.paymentgatewaykey,\n    // Enter the Key ID generated from the Dashboard\n    amount: amount.toString(),\n    currency: currency,\n    name: formData === null || formData === void 0 ? void 0 : formData.hospitalname,\n    description: \"\",\n    image: formData === null || formData === void 0 ? void 0 : formData.clinicLogo,\n    order_id: order_id,\n    handler: async function (response) {\n      const data = {\n        orderCreationId: order_id,\n        razorpayPaymentId: response.razorpay_payment_id,\n        razorpayOrderId: response.razorpay_order_id,\n        razorpaySignature: response.razorpay_signature\n      };\n      dispatch(signature_Verification({\n        razorpayRes: data,\n        orderData: orderdata,\n        user: user,\n        orderRes: orderRes\n      }));\n    },\n    prefill: {\n      name: \"<YOUR NAME>\",\n      email: user.userName,\n      contact: user.mobileNumber\n    },\n    notes: {\n      address: \"Example Corporate Office\"\n    },\n    theme: {\n      color: \"#61dafb\"\n    }\n  };\n  const paymentObject = new window.Razorpay(options);\n  paymentObject.on(\"payment.failed\", function (response) {});\n  paymentObject.open();\n};\nexport const signature_Verification = ({\n  razorpayRes,\n  orderData,\n  user,\n  orderRes\n}) => async dispatch => {\n  var _res$data;\n\n  const res = await loginedApi.post(\"signatureverification\", {\n    data: {\n      razorpay_signature: razorpayRes.razorpaySignature,\n      useragent: userAgent,\n      razorpay_order_id: razorpayRes.razorpayOrderId,\n      razorpay_payment_id: razorpayRes.razorpayPaymentId,\n      Ipaddress: IP,\n      Os: platform,\n      Browser: browser.name + \" \" + browser.version,\n      appname: \"C2MD Web\"\n    },\n    token: \"C2MDVerificationToken\",\n    requestType: \"1025\"\n  });\n\n  if (((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.data.status) === \"Success\") {\n    dispatch(BookingConfirmation({\n      razorpayRes: razorpayRes,\n      orderData: orderData,\n      user: user,\n      orderRes: orderRes\n    }));\n  }\n};\nexport const BookingConfirmation = ({\n  razorpayRes,\n  orderData,\n  user,\n  orderRes\n}) => async dispatch => {\n  let uploadData = {\n    transactionPG: \"RAZORPAY\",\n    userId: user.userId,\n    appointmentDetails: {\n      appointmentBook: {\n        patientHeight: \"100\",\n        firstName: orderData.firstName,\n        reasonForVisit: orderData.reasonForVisit,\n        notesToDoctor: orderData.notesToDoctor,\n        weightMeasurement: \"kg\",\n        noOfBooking: 1,\n        bookingFrom: orderData.bookingFrom,\n        reminderNumber: orderData.reminderNumber,\n        appointmentFor: orderData.appointmentFor,\n        reports: orderData.reports,\n        blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n        basicFees: orderData.basicFees,\n        referenceId: orderData.referenceId,\n        surgerydetails: orderData.surgerydetails,\n        allergies: orderData.allergies,\n        symptoms: orderData.symptoms,\n        medicalConditions: orderData.medicalConditions,\n        medications: orderData.medications,\n        gender: orderData.gender,\n        appointmentDate: orderData.appointmentDate,\n        emergencyname: orderData.emergencyname,\n        relationship: orderData.relationship,\n        patientWeight: \"200\",\n        dob: orderData.dob,\n        heightMeasurement: \"cm\",\n        emergencyrelation: orderData.emergencyrelation,\n        dentalInfo: \"[]\",\n        bookingType: orderData.bookingType,\n        fees: orderData.fees,\n        hospitalid: \"\",\n        typeofconsultation: orderData.typeofconsultation,\n        doctorId: orderData.doctorId,\n        emergencyphone: orderData.emergencyphone,\n        status: orderData.status,\n        modeOfConsultation: \"Video\",\n        duration: orderData.duration,\n        appointmentTime: orderData.appointmentTime,\n        lastName: \"\"\n      },\n      couponCode: \"\",\n      bookingId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info\n    },\n    actualRate: \"74.27006\",\n    couponCode: \"\",\n    Ipaddress: IP,\n    transactionId: razorpayRes.razorpayPaymentId,\n    blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n    browserTimeZone: `GMT${formatTime}`,\n    attachedReportFiles: \"[]\",\n    Os: platform,\n    useragent: userAgent,\n    razorpayId: razorpayRes.razorpayPaymentId,\n    patientId: user.userId,\n    referenceId: \"\",\n    todayRate: \"74.27006\",\n    bookingFrom: orderData.bookingFrom,\n    Browser: browser.name + \" \" + browser.version,\n    appname: \"C2MD Web\"\n  };\n  const res = await loginedApi.post(\"payment\", {\n    data: uploadData,\n    token: \"C2MDVerificationToken\",\n    requestType: \"313\"\n  });\n  let response = res.data.data;\n  let timeData = localStorage.getItem(\"appinmentTime\");\n  let appinmentTime = JSON.parse(timeData);\n  let appinmentData = {\n    appoinmentId: response,\n    appoinmentFromTime: appinmentTime.appoinmentFromTime,\n    appoinmentToTime: appinmentTime.appoinmentToTime,\n    appoinmentType: \"Book\"\n  };\n\n  if ((response === null || response === void 0 ? void 0 : response.info) !== \"Failed\") {\n    dispatch({\n      type: BOOKING_CONFIRMATION,\n      payload: appinmentData\n    });\n    localStorage.removeItem(\"appinmentTime\");\n  } else {}\n}; //\n\nexport const addMember = member => async dispatch => {\n  dispatch({\n    type: ADD_FAMILY,\n    payload: member\n  });\n};\nexport const editMember = member => async dispatch => {\n  dispatch({\n    type: EDIT_FAMILY,\n    payload: member\n  });\n};\nexport const BookingConfirmationOnRequest = ({\n  orderData,\n  user,\n  orderRes\n}) => async dispatch => {\n  let uploadData = {\n    transactionPG: \"RAZORPAY\",\n    userId: user.userId,\n    appointmentDetails: {\n      appointmentBook: {\n        patientHeight: \"100\",\n        firstName: orderData.firstName,\n        reasonForVisit: orderData.reasonForVisit,\n        notesToDoctor: orderData.notesToDoctor,\n        weightMeasurement: \"kg\",\n        noOfBooking: 1,\n        bookingFrom: orderData.bookingFrom,\n        reminderNumber: \"%2B91 8157968993\",\n        appointmentFor: orderData.appointmentFor,\n        reports: orderData.reports,\n        blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n        basicFees: orderData.basicFees.replace(\"INR \", \"\"),\n        surgerydetails: orderData.surgeries,\n        referenceId: \"123456\",\n        allergies: orderData.allergies,\n        gender: orderData.gender,\n        appointmentDate: orderData.appointmentDate,\n        emergencyname: orderData.emergencyname,\n        relationship: orderData.relationship,\n        patientWeight: \"200\",\n        dob: orderData.dob,\n        heightMeasurement: \"cm\",\n        medications: orderData.medications,\n        emergencyrelation: orderData.emergencyrelation,\n        dentalInfo: \"[]\",\n        bookingType: orderData.bookingType,\n        fees: orderData.fees,\n        hospitalid: \"123456\",\n        typeofconsultation: orderData.typeofconsultation,\n        doctorId: orderData.doctorId,\n        emergencyphone: \"%2B91 968754621\",\n        status: orderData.status,\n        modeOfConsultation: \"Video\",\n        duration: orderData.duration,\n        appointmentTime: orderData.appointmentTime,\n        lastName: \"\"\n      },\n      couponCode: \"\",\n      bookingId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info\n    },\n    actualRate: \"74.27006\",\n    couponCode: \"\",\n    Ipaddress: IP,\n    transactionId: \"\",\n    blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n    browserTimeZone: `GMT${formatTime}`,\n    attachedReportFiles: \"[]\",\n    Os: platform,\n    useragent: userAgent,\n    razorpayId: \"\",\n    patientId: user.userId,\n    referenceId: \"\",\n    todayRate: \"74.27006\",\n    bookingFrom: orderData.bookingFrom,\n    Browser: browser.name + \" \" + browser.version,\n    appname: \"C2MD Web\"\n  };\n  const res = await loginedApi.post(\"payment\", {\n    data: uploadData,\n    token: \"C2MDVerificationToken\",\n    requestType: \"313\"\n  });\n  let response = res.data.data;\n\n  if ((response === null || response === void 0 ? void 0 : response.info) !== \"Failed\") {\n    dispatch({\n      type: BOOKING_CONFIRMATION,\n      payload: response\n    });\n  } else {}\n};\nexport const GotoDashboard_action = () => async dispatch => {\n  dispatch({\n    type: GOTO_DASHBOARD\n  });\n};\nexport const reset_booking = () => async dispatch => {\n  dispatch({\n    type: RESET_BOOKING\n  });\n};","map":{"version":3,"sources":["/home/veena/Downloads/c2md-web_react/src/actions/BookAppoinmentAction.js"],"names":["BOOK_APPOINMENT_QUESTIONARE","STORE_APPOINMENT_FORM_DATA","ADD_FAMILY","EDIT_FAMILY","BOOKING_CONFIRMATION","BOOKING_UPDATE_CONFIRMATION","REQUEST_BOOKING_CONFIRM","RESET_BOOKING","GOTO_DASHBOARD","loginedApi","axios","toast","useSelector","publicIp","require","IP","v4","detect","browser","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","fetch_appoinment_questions","dispatch","res","post","type","payload","data","Store_formData","book_slot","userr","old_appointment","data1","nationalId","symptoms","medicalConditions","patientHeight","firstName","reasonForVisit","notesToDoctor","weightMeasurement","noOfBooking","bookingFrom","reminderNumber","appointmentFor","reports","blockId","basicFees","surgerydetails","surgeries","referenceId","allergies","gender","appointmentDate","emergencyname","relationship","patientWeight","dob","heightMeasurement","medications","emergencyrelation","dentalInfo","bookingType","fees","hospitalid","hospitalId","typeofconsultation","doctorId","emergencyphone","status","modeOfConsultation","duration","appointmentTime","lastName","response","orderRes","info","token","IsfromMobile","todayRate","Ipaddress","Os","browserTimeZone","attachedReportFiles","patientId","userId","appointmentDetails","actualRate","useragent","Browser","name","version","appname","requestType","console","log","appointmentId","appinmentData","appoinmentId","appoinmentFromTime","appoinmentToTime","appoinmentType","displayRazorpay","orderdata","user","formData","loadScript","src","Promise","resolve","script","document","createElement","onload","onerror","body","appendChild","alert","amount","currency","receipt","payment_capture","notes","notes_key_1","notes_key_2","order_id","orderId","options","key","paymentgatewaykey","hospitalname","description","image","clinicLogo","handler","orderCreationId","razorpayPaymentId","razorpay_payment_id","razorpayOrderId","razorpay_order_id","razorpaySignature","razorpay_signature","signature_Verification","razorpayRes","orderData","prefill","email","userName","contact","mobileNumber","address","theme","color","paymentObject","Razorpay","on","open","BookingConfirmation","uploadData","transactionPG","appointmentBook","couponCode","bookingId","transactionId","razorpayId","timeData","localStorage","getItem","appinmentTime","JSON","parse","removeItem","addMember","member","editMember","BookingConfirmationOnRequest","GotoDashboard_action","reset_booking"],"mappings":"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","sourcesContent":["import {\n  BOOK_APPOINMENT_QUESTIONARE,\n  STORE_APPOINMENT_FORM_DATA,\n  ADD_FAMILY,\n  EDIT_FAMILY,\n  BOOKING_CONFIRMATION,\n  BOOKING_UPDATE_CONFIRMATION,\n  REQUEST_BOOKING_CONFIRM,\n  RESET_BOOKING,\n  GOTO_DASHBOARD,\n} from \"./type\";\nimport loginedApi from \"../apis\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useSelector } from \"react-redux\";\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nconst { detect } = require('detect-browser');\nconst browser = detect();\n\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif(formatTime.search(/\\+/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\+/g,\"%2B\")\n  }else if(formatTime.search(/\\-/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\-/g,\"%2D\")\n  }//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nexport const fetch_appoinment_questions = () => async (dispatch) => {\n  const res = await axios.post(\n    \"https://run.mocky.io/v3/bb5a24bf-255b-4289-9432-7ff1ebee4320\"\n  );\n\n  dispatch({ type: BOOK_APPOINMENT_QUESTIONARE, payload: res.data });\n};\n\nexport const Store_formData = (data) => async (dispatch) => {\n  dispatch({ type: STORE_APPOINMENT_FORM_DATA, payload: data });\n};\n\nexport const book_slot =\n  ({ data, userr, old_appointment }) =>\n  async (dispatch) => {\n    let data1 = {\n      nationalId: data.nationalId,\n\n      // insurance: {\n      //   provider: data.insurance.provider,\n      //   membershipNo: data.insurance.membershipNo,\n      // },\n      symptoms: data.symptoms,\n      medicalConditions: data.medicalConditions,\n      patientHeight: \"100\",\n      firstName: data.firstName,\n      reasonForVisit: data.reasonForVisit,\n      notesToDoctor: data.notesToDoctor,\n      weightMeasurement: \"kg\",\n      noOfBooking: 1,\n      bookingFrom: data.bookingFrom,\n      reminderNumber: data.reminderNumber,\n      appointmentFor: data.appointmentFor,\n      reports: data.reports,\n      blockId: \"\",\n      basicFees: data.basicFees,\n      surgerydetails: data.surgeries,\n      referenceId: data.referenceId,\n      allergies: data.allergies,\n      gender: data.gender,\n      appointmentDate: data.appointmentDate,\n      emergencyname: data.emergencyname,\n      relationship: data.relationship,\n      patientWeight: \"200\",\n      dob: data.dob,\n      heightMeasurement: \"cm\",\n      medications: data.medications,\n      emergencyrelation: data.emergencyrelation,\n      dentalInfo: \"[]\",\n      bookingType: data.bookingType,\n      fees: data.fees,\n      hospitalid: data.hospitalId,\n      typeofconsultation: \"\",\n      doctorId: data.doctorId,\n      emergencyphone: data.emergencyphone,\n      status: data.status,\n      modeOfConsultation: \"Video\",\n      duration: data.duration,\n      appointmentTime: data.appointmentTime,\n      lastName: \"\",\n      typeofconsultation: data.typeofconsultation,\n    };\n    let response = [];\n    let orderRes = [];\n    if (data.referenceId == \"\" && data.referenceId!=\"12345\" ) {\n      if (!old_appointment?.info) {\n        \n          response = await loginedApi.post(\"/appointments\", {\n          token: \"C2MDVerificationToken\",\n          data: {\n            IsfromMobile: true,\n            bookingFrom: data.bookingFrom,\n            todayRate: \"74.27006\",\n            Ipaddress: IP,\n            Os: platform,\n            browserTimeZone: `GMT${formatTime}`,\n            attachedReportFiles: \"[]\",\n            patientId: userr.userId,\n            appointmentDetails: data1,\n            actualRate: \"74.27006\",\n            useragent: userAgent,\n            Browser: browser.name+\" \"+browser.version,\n            appname: \"C2MD Web\",\n          },\n          requestType: \"161\",\n        });\n\n        console.log(response)\n        dispatch({\n          type: BOOKING_UPDATE_CONFIRMATION,\n          payload: response.data.data,\n        });\n\n        orderRes = response.data.data;\n      } else {\n        response = old_appointment;\n        orderRes = response;\n      }} else \n      {\n        response = await loginedApi.post(\"/requestordergeneration\", {\n          token: \"C2MDVerificationToken\",\n          data: {\n            IsfromMobile: true,\n            bookingFrom: data.bookingFrom,\n            todayRate: \"74.27006\",\n            Ipaddress: IP,\n            Os: platform,\n            browserTimeZone: `GMT${formatTime}`,\n            attachedReportFiles: \"[]\",\n            doctorId: data.doctorId,\n            fees: data.fees,\n            appointmentId: data.referenceId,\n            appointmentDetails: data1,\n            actualRate: \"74.27006\",\n            useragent: userAgent,\n            Browser: browser.name+\" \"+browser.version,\n            appname: \"C2MD Web\",\n          },\n          requestType: \"1023\",\n        });\n        orderRes = response.data.data;\n        data1.bookingFrom = \"Request\";\n        data1.referenceId = orderRes.info;\n      }\n\n    // let orderRes = response.data.data;\n\n    if (data?.bookingFrom == \"Request\") {\n      \n      let appinmentData = {\n        appoinmentId: \"\",\n        appoinmentFromTime: \"\",\n        appoinmentToTime: \"\",\n        appoinmentType: \"Request\",\n      };\n      dispatch({ type: BOOKING_CONFIRMATION, payload: \"Request\" });\n      // dispatch({ type: REQUEST_BOOKING_CONFIRM });\n\n      // dispatch(\n      //   BookingConfirmationOnRequest({\n      //     orderData: data1,\n      //     user: userr,\n      //     orderRes,\n      //   })\n      // );\n    } else {\n\n     \n      dispatch(\n        displayRazorpay({\n          orderRes,\n          orderdata: data1,\n          user: userr,\n          formData: data,\n        })\n      );\n    }\n  };\nfunction loadScript(src) {\n  return new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.onload = () => {\n      resolve(true);\n    };\n    script.onerror = () => {\n      resolve(false);\n    };\n    document.body.appendChild(script);\n  });\n}\n\nexport const displayRazorpay =\n  ({ orderRes, orderdata, user, formData }) =>\n  async (dispatch) => {\n    const res = await loadScript(\n      \"https://checkout.razorpay.com/v1/checkout.js\"\n    );\n\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Are you online?\");\n      return;\n    }\n\n    let result = {\n      amount: orderdata.basicFees * 100,\n      currency: \"INR\",\n      receipt: \"Receipt no. 1\",\n      payment_capture: 1,\n      notes: {\n        notes_key_1: \"Tea, Earl Grey, Hot\",\n        notes_key_2: \"Tea, Earl Greyâ€¦ decaf.\",\n      },\n      order_id: orderRes?.orderId,\n    };\n\n    const { amount, order_id, currency } = result;\n\n    const options = {\n      key: orderRes.paymentgatewaykey, // Enter the Key ID generated from the Dashboard\n      amount: amount.toString(),\n      currency: currency,\n      name: formData?.hospitalname,\n      description: \"\",\n      image: formData?.clinicLogo,\n      order_id: order_id,\n      handler: async function (response) {\n        const data = {\n          orderCreationId: order_id,\n          razorpayPaymentId: response.razorpay_payment_id,\n          razorpayOrderId: response.razorpay_order_id,\n          razorpaySignature: response.razorpay_signature,\n        };\n\n        dispatch(\n          signature_Verification({\n            razorpayRes: data,\n            orderData: orderdata,\n            user: user,\n            orderRes: orderRes,\n          })\n        );\n      },\n      prefill: {\n        name: \"<YOUR NAME>\",\n        email: user.userName,\n        contact: user.mobileNumber,\n      },\n      notes: {\n        address: \"Example Corporate Office\",\n      },\n      theme: {\n        color: \"#61dafb\",\n      },\n    };\n\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.on(\"payment.failed\", function (response) {});\n    paymentObject.open();\n  };\n\nexport const signature_Verification =\n  ({ razorpayRes, orderData, user, orderRes }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"signatureverification\", {\n      data: {\n        razorpay_signature: razorpayRes.razorpaySignature,\n        useragent: userAgent,\n        razorpay_order_id: razorpayRes.razorpayOrderId,\n        razorpay_payment_id: razorpayRes.razorpayPaymentId,\n        Ipaddress: IP,\n        Os: platform,\n        Browser: browser.name+\" \"+browser.version,\n        appname: \"C2MD Web\",\n      },\n      token: \"C2MDVerificationToken\",\n      requestType: \"1025\",\n    });\n\n    if (res.data?.data.status === \"Success\") {\n      dispatch(\n        BookingConfirmation({\n          razorpayRes: razorpayRes,\n          orderData: orderData,\n          user: user,\n          orderRes: orderRes,\n        })\n      );\n    }\n  };\nexport const BookingConfirmation =\n  ({ razorpayRes, orderData, user, orderRes }) =>\n  async (dispatch) => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: orderData.reminderNumber,\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes?.info,\n          basicFees: orderData.basicFees,\n\n          referenceId: orderData.referenceId,\n          surgerydetails: orderData.surgerydetails,\n          allergies: orderData.allergies,\n          symptoms: orderData.symptoms,\n          medicalConditions: orderData.medicalConditions,\n          medications: orderData.medications,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: orderData.emergencyphone,\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\",\n        },\n        couponCode: \"\",\n        bookingId: orderRes?.info,\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: razorpayRes.razorpayPaymentId,\n      blockId: orderRes?.info,\n      browserTimeZone: `GMT${formatTime}`,\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: razorpayRes.razorpayPaymentId,\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n   Browser: browser.name+\" \"+browser.version,\n          appname: \"C2MD Web\",\n    };\n\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\",\n    });\n\n    let response = res.data.data;\n    let timeData = localStorage.getItem(\"appinmentTime\");\n    let appinmentTime = JSON.parse(timeData);\n    let appinmentData = {\n      appoinmentId: response,\n      appoinmentFromTime: appinmentTime.appoinmentFromTime,\n      appoinmentToTime: appinmentTime.appoinmentToTime,\n      appoinmentType: \"Book\",\n    };\n    if (response?.info !== \"Failed\") {\n      dispatch({ type: BOOKING_CONFIRMATION, payload: appinmentData });\n      localStorage.removeItem(\"appinmentTime\");\n    } else {\n    }\n  };\n\n  //\nexport const addMember = (member) => async (dispatch) => {\n  dispatch({ type: ADD_FAMILY, payload: member });\n};\n\nexport const editMember = (member) => async (dispatch) => {\n  dispatch({ type: EDIT_FAMILY, payload: member });\n};\nexport const BookingConfirmationOnRequest =\n  ({ orderData, user, orderRes }) =>\n  async (dispatch) => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: \"%2B91 8157968993\",\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes?.info,\n          basicFees: orderData.basicFees.replace(\"INR \",\"\"),\n          surgerydetails: orderData.surgeries,\n          referenceId: \"123456\",\n          allergies: orderData.allergies,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n          medications: orderData.medications,\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"123456\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: \"%2B91 968754621\",\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\",\n        },\n        couponCode: \"\",\n        bookingId: orderRes?.info,\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: \"\",\n      blockId: orderRes?.info,\n      browserTimeZone: `GMT${formatTime}`,\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: \"\",\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n      Browser: browser.name+\" \"+browser.version,\n            appname: \"C2MD Web\",\n    };\n\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\",\n    });\n\n    let response = res.data.data;\n\n    if (response?.info !== \"Failed\") {\n      dispatch({ type: BOOKING_CONFIRMATION, payload: response });\n    } else {\n    }\n  };\nexport const GotoDashboard_action = () => async (dispatch) => {\n  dispatch({ type: GOTO_DASHBOARD });\n};\n\nexport const reset_booking = () => async (dispatch) => {\n  dispatch({ type: RESET_BOOKING });\n};\n"]},"metadata":{},"sourceType":"module"}