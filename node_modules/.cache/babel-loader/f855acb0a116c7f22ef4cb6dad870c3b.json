{"ast":null,"code":"var _formatTime;\n\nimport loginedApi from \"../apis\";\nimport CryptoJS from \"crypto-js\";\n\nconst {\n  detect\n} = require('detect-browser');\n\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const fetchForgotPassword = ({\n  values,\n  userId\n}) => async dispatch => {\n  let resp = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  const doctorscountrycode = resp.data.data; // var hash = CryptoJS.SHA512(values.confirmPassword);\n\n  var hash = CryptoJS.SHA512(\"C2MD|\" + values.confirmPassword);\n  const res = await loginedApi.post(\"updateForgotPassword\", {\n    token: \"C2MDVerificationToken\",\n    data: {\n      password: hash.toString(),\n      userId: userId,\n      browserTimeZone: `GMT${formatTime}`,\n      Ipaddress: doctorscountrycode.Ipaddress,\n      useragent: userAgent,\n      Browser: browser.name + \" \" + browser.version,\n      appname: \"C2MD Web\",\n      Os: platform,\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country\n    },\n    requestType: 6\n  });\n};\nexport const checkUserAvailability = ({\n  type,\n  searchkey\n}) => async dispatch => {\n  let resp = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  const doctorscountrycode = resp.data.data;\n  console.log({\n    type: type,\n    searchkey: searchkey\n  });\n  const response = await loginedApi.post(\"checkuserAvailablity\", {\n    requestType: 5,\n    token: \"C2MDVerificationToken\",\n    data: {\n      type: type,\n      searchkey: searchkey,\n      browserTimeZone: `GMT${formatTime}`,\n      Ipaddress: doctorscountrycode.Ipaddress,\n      useragent: userAgent,\n      Browser: browser.name + \" \" + browser.version,\n      appname: \"C2MD Web\",\n      Os: platform,\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country\n    }\n  });\n  console.log(\"Check user responce == >\", response);\n\n  if (response.status === 200) {\n    return response.data && response.data;\n  }\n};","map":{"version":3,"sources":["C:/Users/Shaju Damodaran/Documents/V9/c2md-web_react/src/actions/ForgotPasswordAction.js"],"names":["loginedApi","CryptoJS","detect","require","browser","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","fetchForgotPassword","values","userId","dispatch","resp","post","browserTimeZone","doctorscountrycode","data","hash","SHA512","confirmPassword","res","token","password","Ipaddress","useragent","Browser","name","version","appname","Os","currency","accessCountry","Country","requestType","checkUserAvailability","type","searchkey","console","log","response","status"],"mappings":"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","sourcesContent":["import loginedApi from \"../apis\";\nimport CryptoJS from \"crypto-js\";\nconst { detect } = require('detect-browser');\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\")\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\")\n}//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nexport const fetchForgotPassword =\n  ({ values, userId }) =>\n    async (dispatch) => {\n      let resp = await loginedApi.post(\"getcountrycode\",\n        {\n          \"token\": \"token\",\n          \"version\": \"2.0\",\n          \"data\": { browserTimeZone: `GMT${formatTime}` },\n          \"requestType\": 1058\n        });\n      const doctorscountrycode = resp.data.data;\n      // var hash = CryptoJS.SHA512(values.confirmPassword);\n      var hash = CryptoJS.SHA512(\"C2MD|\" + values.confirmPassword);\n\n      const res = await loginedApi.post(\"updateForgotPassword\", {\n        token: \"C2MDVerificationToken\",\n        data: {\n          password: hash.toString(),\n          userId: userId,\n          browserTimeZone: `GMT${formatTime}`,\n          Ipaddress: doctorscountrycode.Ipaddress,\n          useragent: userAgent,\n          Browser: browser.name + \" \" + browser.version,\n          appname: \"C2MD Web\",\n          Os: platform,\n          currency: doctorscountrycode.currency,\n          accessCountry: doctorscountrycode.Country,\n        },\n        requestType: 6,\n      });\n    };\n\nexport const checkUserAvailability =\n  ({ type, searchkey }) =>\n    async (dispatch) => {\n\n      let resp = await loginedApi.post(\"getcountrycode\",\n        {\n          \"token\": \"token\",\n          \"version\": \"2.0\",\n          \"data\": { browserTimeZone: `GMT${formatTime}` },\n          \"requestType\": 1058\n        });\n      const doctorscountrycode = resp.data.data;\n\n      console.log({ type: type, searchkey: searchkey });\n\n\n      const response = await loginedApi.post(\"checkuserAvailablity\", {\n        requestType: 5,\n        token: \"C2MDVerificationToken\",\n        data: {\n          type: type, searchkey: searchkey,\n          browserTimeZone: `GMT${formatTime}`,\n          Ipaddress: doctorscountrycode.Ipaddress,\n          useragent: userAgent,\n          Browser: browser.name + \" \" + browser.version,\n          appname: \"C2MD Web\",\n          Os: platform,\n          currency: doctorscountrycode.currency,\n          accessCountry: doctorscountrycode.Country,\n        },\n      });\n\n      console.log(\"Check user responce == >\", response);\n     \n      if (response.status === 200) {\n        return response.data && response.data;\n      }\n    };\n"]},"metadata":{},"sourceType":"module"}