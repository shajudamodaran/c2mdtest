{"ast":null,"code":"var _formatTime;\n\nimport { BOOK_APPOINMENT_QUESTIONARE, STORE_APPOINMENT_FORM_DATA, ADD_FAMILY, EDIT_FAMILY, BOOKING_CONFIRMATION, BOOKING_UPDATE_CONFIRMATION, REQUEST_BOOKING_CONFIRM, RESET_BOOKING, GOTO_DASHBOARD } from \"./type\";\nimport loginedApi from \"../apis\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useSelector } from \"react-redux\";\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\n\nconst {\n  detect\n} = require('detect-browser');\n\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const fetch_appoinment_questions = () => async dispatch => {\n  const res = await axios.post(\"https://run.mocky.io/v3/bb5a24bf-255b-4289-9432-7ff1ebee4320\");\n  dispatch({\n    type: BOOK_APPOINMENT_QUESTIONARE,\n    payload: res.data\n  });\n};\nexport const Store_formData = data => async dispatch => {\n  dispatch({\n    type: STORE_APPOINMENT_FORM_DATA,\n    payload: data\n  });\n};\nexport const book_slot = _ref => {\n  let {\n    data,\n    userr,\n    old_appointment\n  } = _ref;\n  return async dispatch => {\n    let data1 = {\n      nationalId: data.nationalId,\n      // insurance: {\n      //   provider: data.insurance.provider,\n      //   membershipNo: data.insurance.membershipNo,\n      // },\n      symptoms: data.symptoms,\n      medicalConditions: data.medicalConditions,\n      patientHeight: \"100\",\n      firstName: data.firstName,\n      reasonForVisit: data.reasonForVisit,\n      notesToDoctor: data.notesToDoctor,\n      weightMeasurement: \"kg\",\n      noOfBooking: 1,\n      bookingFrom: data.bookingFrom,\n      reminderNumber: data.reminderNumber,\n      appointmentFor: data.appointmentFor,\n      reports: data.reports,\n      blockId: \"\",\n      basicFees: data.basicFees.split(\" \")[1],\n      surgerydetails: data.surgeries,\n      referenceId: data.referenceId,\n      allergies: data.allergies,\n      gender: data.gender,\n      appointmentDate: data.appointmentDate,\n      emergencyname: data.emergencyname,\n      relationship: data.relationship,\n      patientWeight: \"200\",\n      dob: data.dob,\n      heightMeasurement: \"cm\",\n      medications: data.medications,\n      emergencyrelation: data.emergencyrelation,\n      dentalInfo: \"[]\",\n      bookingType: data.bookingType,\n      fees: data.fees,\n      hospitalid: data.hospitalId,\n      typeofconsultation: \"\",\n      doctorId: data.doctorId,\n      emergencyphone: data.emergencyphone,\n      status: data.status,\n      modeOfConsultation: \"Video\",\n      duration: data.duration,\n      appointmentTime: data.appointmentTime,\n      lastName: \"\",\n      typeofconsultation: data.typeofconsultation\n    };\n    let response = [];\n    let orderRes = [];\n    console.log(\"------data\", data);\n\n    if (data.referenceId == \"\") {\n      if (!(old_appointment !== null && old_appointment !== void 0 && old_appointment.info)) {\n        response = await loginedApi.post(\"/appointments\", {\n          token: \"C2MDVerificationToken\",\n          data: {\n            IsfromMobile: true,\n            bookingFrom: data.bookingFrom,\n            todayRate: \"74.27006\",\n            Ipaddress: IP,\n            Os: platform,\n            browserTimeZone: `GMT${formatTime}`,\n            attachedReportFiles: \"[]\",\n            patientId: userr.userId,\n            appointmentDetails: data1,\n            actualRate: \"74.27006\",\n            useragent: userAgent,\n            Browser: browser.name + \" \" + browser.version,\n            appname: \"C2MD Web\"\n          },\n          requestType: \"161\"\n        });\n        console.log(response);\n        dispatch({\n          type: BOOKING_UPDATE_CONFIRMATION,\n          payload: response.data.data\n        });\n        orderRes = response.data.data;\n      } else {\n        response = old_appointment;\n        orderRes = response;\n      }\n    } else {\n      response = await loginedApi.post(\"/requestordergeneration\", {\n        token: \"C2MDVerificationToken\",\n        data: {\n          IsfromMobile: true,\n          bookingFrom: data.bookingFrom,\n          todayRate: \"74.27006\",\n          Ipaddress: IP,\n          Os: platform,\n          browserTimeZone: `GMT${formatTime}`,\n          attachedReportFiles: \"[]\",\n          doctorId: data.doctorId,\n          fees: data.fees,\n          appointmentId: data.referenceId,\n          appointmentDetails: data1,\n          actualRate: \"74.27006\",\n          useragent: userAgent,\n          Browser: browser.name + \" \" + browser.version,\n          appname: \"C2MD Web\"\n        },\n        requestType: \"1023\"\n      });\n      orderRes = response.data.data;\n      data1.bookingFrom = \"Request\";\n      data1.referenceId = orderRes.info;\n    } // let orderRes = response.data.data;\n\n\n    if ((data === null || data === void 0 ? void 0 : data.bookingFrom) == \"Request\") {\n      var _orderRes;\n\n      localStorage.setItem(\"RequestId\", (_orderRes = orderRes) === null || _orderRes === void 0 ? void 0 : _orderRes.info);\n      let appinmentData = {\n        appoinmentId: \"\",\n        appoinmentFromTime: \"\",\n        appoinmentToTime: \"\",\n        appoinmentType: \"Request\"\n      };\n      dispatch({\n        type: BOOKING_CONFIRMATION,\n        payload: \"Request\"\n      }); // dispatch({ type: REQUEST_BOOKING_CONFIRM });\n      // dispatch(\n      //   BookingConfirmationOnRequest({\n      //     orderData: data1,\n      //     user: userr,\n      //     orderRes,\n      //   })\n      // );\n    } else {\n      dispatch(displayRazorpay({\n        orderRes,\n        orderdata: data1,\n        user: userr,\n        formData: data\n      }));\n    }\n  };\n};\n\nfunction loadScript(src) {\n  return new Promise(resolve => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = () => {\n      resolve(true);\n    };\n\n    script.onerror = () => {\n      resolve(false);\n    };\n\n    document.body.appendChild(script);\n  });\n}\n\nexport const displayRazorpay = _ref2 => {\n  let {\n    orderRes,\n    orderdata,\n    user,\n    formData\n  } = _ref2;\n  return async dispatch => {\n    const res = await loadScript(\"https://checkout.razorpay.com/v1/checkout.js\");\n\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Are you online?\");\n      return;\n    }\n\n    let result = {\n      amount: orderdata.basicFees * 100,\n      currency: \"INR\",\n      receipt: \"Receipt no. 1\",\n      payment_capture: 1,\n      notes: {\n        notes_key_1: \"Tea, Earl Grey, Hot\",\n        notes_key_2: \"Tea, Earl Greyâ€¦ decaf.\"\n      },\n      order_id: orderRes === null || orderRes === void 0 ? void 0 : orderRes.orderId\n    };\n    const {\n      amount,\n      order_id,\n      currency\n    } = result;\n    const options = {\n      key: orderRes.paymentgatewaykey,\n      // Enter the Key ID generated from the Dashboard\n      amount: amount.toString(),\n      currency: currency,\n      name: formData === null || formData === void 0 ? void 0 : formData.hospitalname,\n      description: \"\",\n      image: formData === null || formData === void 0 ? void 0 : formData.clinicLogo,\n      order_id: order_id,\n      handler: async function (response) {\n        const data = {\n          orderCreationId: order_id,\n          razorpayPaymentId: response.razorpay_payment_id,\n          razorpayOrderId: response.razorpay_order_id,\n          razorpaySignature: response.razorpay_signature\n        };\n        dispatch(signature_Verification({\n          razorpayRes: data,\n          orderData: orderdata,\n          user: user,\n          orderRes: orderRes\n        }));\n      },\n      prefill: {\n        name: \"<YOUR NAME>\",\n        email: user.userName,\n        contact: user.mobileNumber\n      },\n      notes: {\n        address: \"Example Corporate Office\"\n      },\n      theme: {\n        color: \"#61dafb\"\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.on(\"payment.failed\", function (response) {});\n    paymentObject.open();\n  };\n};\nexport const signature_Verification = _ref3 => {\n  let {\n    razorpayRes,\n    orderData,\n    user,\n    orderRes\n  } = _ref3;\n  return async dispatch => {\n    var _res$data;\n\n    const res = await loginedApi.post(\"signatureverification\", {\n      data: {\n        razorpay_signature: razorpayRes.razorpaySignature,\n        useragent: userAgent,\n        razorpay_order_id: razorpayRes.razorpayOrderId,\n        razorpay_payment_id: razorpayRes.razorpayPaymentId,\n        Ipaddress: IP,\n        Os: platform,\n        Browser: browser.name + \" \" + browser.version,\n        appname: \"C2MD Web\"\n      },\n      token: \"C2MDVerificationToken\",\n      requestType: \"1025\"\n    });\n\n    if (((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.data.status) === \"Success\") {\n      dispatch(BookingConfirmation({\n        razorpayRes: razorpayRes,\n        orderData: orderData,\n        user: user,\n        orderRes: orderRes\n      }));\n    }\n  };\n};\nexport const BookingConfirmation = _ref4 => {\n  let {\n    razorpayRes,\n    orderData,\n    user,\n    orderRes\n  } = _ref4;\n  return async dispatch => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: orderData.reminderNumber,\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n          basicFees: orderData.basicFees,\n          referenceId: orderData.referenceId,\n          surgerydetails: orderData.surgerydetails,\n          allergies: orderData.allergies,\n          symptoms: orderData.symptoms,\n          medicalConditions: orderData.medicalConditions,\n          medications: orderData.medications,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: orderData.emergencyphone,\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\"\n        },\n        couponCode: \"\",\n        bookingId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: razorpayRes.razorpayPaymentId,\n      blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n      browserTimeZone: `GMT${formatTime}`,\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: razorpayRes.razorpayPaymentId,\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n      Browser: browser.name + \" \" + browser.version,\n      appname: \"C2MD Web\"\n    };\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\"\n    });\n    let response = res.data.data;\n    let timeData = localStorage.getItem(\"appinmentTime\");\n    let appinmentTime = JSON.parse(timeData);\n    let appinmentData = {\n      appoinmentId: response,\n      appoinmentFromTime: appinmentTime === null || appinmentTime === void 0 ? void 0 : appinmentTime.appoinmentFromTime,\n      appoinmentToTime: appinmentTime === null || appinmentTime === void 0 ? void 0 : appinmentTime.appoinmentToTime,\n      appoinmentType: \"Book\"\n    };\n\n    if ((response === null || response === void 0 ? void 0 : response.info) !== \"Failed\") {\n      dispatch({\n        type: BOOKING_CONFIRMATION,\n        payload: appinmentData\n      });\n      localStorage.removeItem(\"appinmentTime\");\n    } else {}\n  };\n}; //\n\nexport const addMember = member => async dispatch => {\n  dispatch({\n    type: ADD_FAMILY,\n    payload: member\n  });\n};\nexport const editMember = member => async dispatch => {\n  dispatch({\n    type: EDIT_FAMILY,\n    payload: member\n  });\n};\nexport const BookingConfirmationOnRequest = _ref5 => {\n  let {\n    orderData,\n    user,\n    orderRes\n  } = _ref5;\n  return async dispatch => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: \"\",\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n          basicFees: orderData.basicFees,\n          surgerydetails: orderData.surgeries,\n          referenceId: \"\",\n          allergies: orderData.allergies,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n          medications: orderData.medications,\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: \"\",\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\"\n        },\n        couponCode: \"\",\n        bookingId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: \"\",\n      blockId: orderRes === null || orderRes === void 0 ? void 0 : orderRes.info,\n      browserTimeZone: `GMT${formatTime}`,\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: \"\",\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n      Browser: browser.name + \" \" + browser.version,\n      appname: \"C2MD Web\"\n    };\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\"\n    });\n    let response = res.data.data;\n\n    if ((response === null || response === void 0 ? void 0 : response.info) !== \"Failed\") {\n      dispatch({\n        type: BOOKING_CONFIRMATION,\n        payload: response\n      });\n    } else {}\n  };\n};\nexport const GotoDashboard_action = () => async dispatch => {\n  dispatch({\n    type: GOTO_DASHBOARD\n  });\n};\nexport const reset_booking = () => async dispatch => {\n  dispatch({\n    type: RESET_BOOKING\n  });\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V11/c2md-web_react/src/actions/BookAppoinmentAction.js"],"names":["BOOK_APPOINMENT_QUESTIONARE","STORE_APPOINMENT_FORM_DATA","ADD_FAMILY","EDIT_FAMILY","BOOKING_CONFIRMATION","BOOKING_UPDATE_CONFIRMATION","REQUEST_BOOKING_CONFIRM","RESET_BOOKING","GOTO_DASHBOARD","loginedApi","axios","toast","useSelector","publicIp","require","IP","v4","detect","browser","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","fetch_appoinment_questions","dispatch","res","post","type","payload","data","Store_formData","book_slot","userr","old_appointment","data1","nationalId","symptoms","medicalConditions","patientHeight","firstName","reasonForVisit","notesToDoctor","weightMeasurement","noOfBooking","bookingFrom","reminderNumber","appointmentFor","reports","blockId","basicFees","surgerydetails","surgeries","referenceId","allergies","gender","appointmentDate","emergencyname","relationship","patientWeight","dob","heightMeasurement","medications","emergencyrelation","dentalInfo","bookingType","fees","hospitalid","hospitalId","typeofconsultation","doctorId","emergencyphone","status","modeOfConsultation","duration","appointmentTime","lastName","response","orderRes","console","log","info","token","IsfromMobile","todayRate","Ipaddress","Os","browserTimeZone","attachedReportFiles","patientId","userId","appointmentDetails","actualRate","useragent","Browser","name","version","appname","requestType","appointmentId","localStorage","setItem","appinmentData","appoinmentId","appoinmentFromTime","appoinmentToTime","appoinmentType","displayRazorpay","orderdata","user","formData","loadScript","src","Promise","resolve","script","document","createElement","onload","onerror","body","appendChild","alert","amount","currency","receipt","payment_capture","notes","notes_key_1","notes_key_2","order_id","orderId","options","key","paymentgatewaykey","hospitalname","description","image","clinicLogo","handler","orderCreationId","razorpayPaymentId","razorpay_payment_id","razorpayOrderId","razorpay_order_id","razorpaySignature","razorpay_signature","signature_Verification","razorpayRes","orderData","prefill","email","userName","contact","mobileNumber","address","theme","color","paymentObject","Razorpay","on","open","BookingConfirmation","uploadData","transactionPG","appointmentBook","couponCode","bookingId","transactionId","razorpayId","timeData","getItem","appinmentTime","JSON","parse","removeItem","addMember","member","editMember","BookingConfirmationOnRequest","GotoDashboard_action","reset_booking"],"mappings":"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","sourcesContent":["import {\n  BOOK_APPOINMENT_QUESTIONARE,\n  STORE_APPOINMENT_FORM_DATA,\n  ADD_FAMILY,\n  EDIT_FAMILY,\n  BOOKING_CONFIRMATION,\n  BOOKING_UPDATE_CONFIRMATION,\n  REQUEST_BOOKING_CONFIRM,\n  RESET_BOOKING,\n  GOTO_DASHBOARD,\n} from \"./type\";\nimport loginedApi from \"../apis\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useSelector } from \"react-redux\";\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nconst { detect } = require('detect-browser');\nconst browser = detect();\n\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif(formatTime.search(/\\+/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\+/g,\"%2B\")\n  }else if(formatTime.search(/\\-/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\-/g,\"%2D\")\n  }//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nexport const fetch_appoinment_questions = () => async (dispatch) => {\n  const res = await axios.post(\n    \"https://run.mocky.io/v3/bb5a24bf-255b-4289-9432-7ff1ebee4320\"\n  );\n\n  dispatch({ type: BOOK_APPOINMENT_QUESTIONARE, payload: res.data });\n};\n\nexport const Store_formData = (data) => async (dispatch) => {\n  dispatch({ type: STORE_APPOINMENT_FORM_DATA, payload: data });\n};\n\nexport const book_slot =\n  ({ data, userr, old_appointment }) =>\n  async (dispatch) => {\n\n    let data1 = {\n      nationalId: data.nationalId,\n\n      // insurance: {\n      //   provider: data.insurance.provider,\n      //   membershipNo: data.insurance.membershipNo,\n      // },\n      symptoms: data.symptoms,\n      medicalConditions: data.medicalConditions,\n      patientHeight: \"100\",\n      firstName: data.firstName,\n      reasonForVisit: data.reasonForVisit,\n      notesToDoctor: data.notesToDoctor,\n      weightMeasurement: \"kg\",\n      noOfBooking: 1,\n      bookingFrom: data.bookingFrom,\n      reminderNumber: data.reminderNumber,\n      appointmentFor: data.appointmentFor,\n      reports: data.reports,\n      blockId: \"\",\n      basicFees: data.basicFees.split(\" \")[1],\n      surgerydetails: data.surgeries,\n      referenceId: data.referenceId,\n      allergies: data.allergies,\n      gender: data.gender,\n      appointmentDate: data.appointmentDate,\n      emergencyname: data.emergencyname,\n      relationship: data.relationship,\n      patientWeight: \"200\",\n      dob: data.dob,\n      heightMeasurement: \"cm\",\n      medications: data.medications,\n      emergencyrelation: data.emergencyrelation,\n      dentalInfo: \"[]\",\n      bookingType: data.bookingType,\n      fees: data.fees,\n      hospitalid: data.hospitalId,\n      typeofconsultation: \"\",\n      doctorId: data.doctorId,\n      emergencyphone: data.emergencyphone,\n      status: data.status,\n      modeOfConsultation: \"Video\",\n      duration: data.duration,\n      appointmentTime: data.appointmentTime,\n      lastName: \"\",\n      typeofconsultation: data.typeofconsultation,\n    };\n\n\n    let response = [];\n    let orderRes = [];\n\n    console.log(\"------data\",data)\n\n    if (data.referenceId == \"\") {\n      \n      if (!old_appointment?.info) {\n        \n          response = await loginedApi.post(\"/appointments\", {\n          token: \"C2MDVerificationToken\",\n          data: {\n            IsfromMobile: true,\n            bookingFrom: data.bookingFrom,\n            todayRate: \"74.27006\",\n            Ipaddress: IP,\n            Os: platform,\n            browserTimeZone: `GMT${formatTime}`,\n            attachedReportFiles: \"[]\",\n            patientId: userr.userId,\n            appointmentDetails: data1,\n            actualRate: \"74.27006\",\n            useragent: userAgent,\n            Browser: browser.name+\" \"+browser.version,\n            appname: \"C2MD Web\",\n          },\n          requestType: \"161\",\n        });\n\n        console.log(response)\n        dispatch({\n          type: BOOKING_UPDATE_CONFIRMATION,\n          payload: response.data.data,\n        });\n\n        orderRes = response.data.data;\n      } else {\n        response = old_appointment;\n        orderRes = response;\n      }\n    } else \n      {\n        response = await loginedApi.post(\"/requestordergeneration\", {\n          token: \"C2MDVerificationToken\",\n          data: {\n            IsfromMobile: true,\n            bookingFrom: data.bookingFrom,\n            todayRate: \"74.27006\",\n            Ipaddress: IP,\n            Os: platform,\n            browserTimeZone: `GMT${formatTime}`,\n            attachedReportFiles: \"[]\",\n            doctorId: data.doctorId,\n            fees: data.fees,\n            appointmentId: data.referenceId,\n            appointmentDetails: data1,\n            actualRate: \"74.27006\",\n            useragent: userAgent,\n            Browser: browser.name+\" \"+browser.version,\n            appname: \"C2MD Web\",\n          },\n          requestType: \"1023\",\n        });\n        orderRes = response.data.data;\n        data1.bookingFrom = \"Request\";\n        data1.referenceId = orderRes.info;\n      }\n\n    // let orderRes = response.data.data;\n\n    if (data?.bookingFrom == \"Request\") {\n      \n      \n      localStorage.setItem(\"RequestId\",orderRes?.info)\n      let appinmentData = {\n        appoinmentId: \"\",\n        appoinmentFromTime: \"\",\n        appoinmentToTime: \"\",\n        appoinmentType: \"Request\",\n      };\n      dispatch({ type: BOOKING_CONFIRMATION, payload: \"Request\" });\n      // dispatch({ type: REQUEST_BOOKING_CONFIRM });\n\n      // dispatch(\n      //   BookingConfirmationOnRequest({\n      //     orderData: data1,\n      //     user: userr,\n      //     orderRes,\n      //   })\n      // );\n    } else {\n\n     \n      dispatch(\n        displayRazorpay({\n          orderRes,\n          orderdata: data1,\n          user: userr,\n          formData: data,\n        })\n      );\n    }\n  };\nfunction loadScript(src) {\n  return new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.onload = () => {\n      resolve(true);\n    };\n    script.onerror = () => {\n      resolve(false);\n    };\n    document.body.appendChild(script);\n  });\n}\n\nexport const displayRazorpay =\n  ({ orderRes, orderdata, user, formData }) =>\n  async (dispatch) => {\n    const res = await loadScript(\n      \"https://checkout.razorpay.com/v1/checkout.js\"\n    );\n\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Are you online?\");\n      return;\n    }\n\n    let result = {\n      amount: orderdata.basicFees * 100,\n      currency: \"INR\",\n      receipt: \"Receipt no. 1\",\n      payment_capture: 1,\n      notes: {\n        notes_key_1: \"Tea, Earl Grey, Hot\",\n        notes_key_2: \"Tea, Earl Greyâ€¦ decaf.\",\n      },\n      order_id: orderRes?.orderId,\n    };\n\n    const { amount, order_id, currency } = result;\n\n    const options = {\n      key: orderRes.paymentgatewaykey, // Enter the Key ID generated from the Dashboard\n      amount: amount.toString(),\n      currency: currency,\n      name: formData?.hospitalname,\n      description: \"\",\n      image: formData?.clinicLogo,\n      order_id: order_id,\n      handler: async function (response) {\n        const data = {\n          orderCreationId: order_id,\n          razorpayPaymentId: response.razorpay_payment_id,\n          razorpayOrderId: response.razorpay_order_id,\n          razorpaySignature: response.razorpay_signature,\n        };\n\n        dispatch(\n          signature_Verification({\n            razorpayRes: data,\n            orderData: orderdata,\n            user: user,\n            orderRes: orderRes,\n          })\n        );\n      },\n      prefill: {\n        name: \"<YOUR NAME>\",\n        email: user.userName,\n        contact: user.mobileNumber,\n      },\n      notes: {\n        address: \"Example Corporate Office\",\n      },\n      theme: {\n        color: \"#61dafb\",\n      },\n    };\n\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.on(\"payment.failed\", function (response) {});\n    paymentObject.open();\n  };\n\nexport const signature_Verification =\n  ({ razorpayRes, orderData, user, orderRes }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"signatureverification\", {\n      data: {\n        razorpay_signature: razorpayRes.razorpaySignature,\n        useragent: userAgent,\n        razorpay_order_id: razorpayRes.razorpayOrderId,\n        razorpay_payment_id: razorpayRes.razorpayPaymentId,\n        Ipaddress: IP,\n        Os: platform,\n        Browser: browser.name+\" \"+browser.version,\n        appname: \"C2MD Web\",\n      },\n      token: \"C2MDVerificationToken\",\n      requestType: \"1025\",\n    });\n\n    if (res.data?.data.status === \"Success\") {\n      dispatch(\n        BookingConfirmation({\n          razorpayRes: razorpayRes,\n          orderData: orderData,\n          user: user,\n          orderRes: orderRes,\n        })\n      );\n    }\n  };\nexport const BookingConfirmation =\n  ({ razorpayRes, orderData, user, orderRes }) =>\n  async (dispatch) => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: orderData.reminderNumber,\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes?.info,\n          basicFees: orderData.basicFees,\n\n          referenceId: orderData.referenceId,\n          surgerydetails: orderData.surgerydetails,\n          allergies: orderData.allergies,\n          symptoms: orderData.symptoms,\n          medicalConditions: orderData.medicalConditions,\n          medications: orderData.medications,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: orderData.emergencyphone,\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\",\n        },\n        couponCode: \"\",\n        bookingId: orderRes?.info,\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: razorpayRes.razorpayPaymentId,\n      blockId: orderRes?.info,\n      browserTimeZone: `GMT${formatTime}`,\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: razorpayRes.razorpayPaymentId,\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n   Browser: browser.name+\" \"+browser.version,\n          appname: \"C2MD Web\",\n    };\n\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\",\n    });\n\n    let response = res.data.data;\n    let timeData = localStorage.getItem(\"appinmentTime\");\n    let appinmentTime = JSON.parse(timeData);\n    let appinmentData = {\n      appoinmentId: response,\n      appoinmentFromTime: appinmentTime?.appoinmentFromTime,\n      appoinmentToTime: appinmentTime?.appoinmentToTime,\n      appoinmentType: \"Book\",\n    };\n    if (response?.info !== \"Failed\") {\n      dispatch({ type: BOOKING_CONFIRMATION, payload: appinmentData });\n      localStorage.removeItem(\"appinmentTime\");\n    } else {\n    }\n  };\n\n  //\nexport const addMember = (member) => async (dispatch) => {\n  dispatch({ type: ADD_FAMILY, payload: member });\n};\n\nexport const editMember = (member) => async (dispatch) => {\n  dispatch({ type: EDIT_FAMILY, payload: member });\n};\nexport const BookingConfirmationOnRequest =\n  ({ orderData, user, orderRes }) =>\n  async (dispatch) => {\n    let uploadData = {\n      transactionPG: \"RAZORPAY\",\n      userId: user.userId,\n      appointmentDetails: {\n        appointmentBook: {\n          patientHeight: \"100\",\n          firstName: orderData.firstName,\n          reasonForVisit: orderData.reasonForVisit,\n          notesToDoctor: orderData.notesToDoctor,\n          weightMeasurement: \"kg\",\n          noOfBooking: 1,\n          bookingFrom: orderData.bookingFrom,\n          reminderNumber: \"\",\n          appointmentFor: orderData.appointmentFor,\n          reports: orderData.reports,\n          blockId: orderRes?.info,\n          basicFees: orderData.basicFees,\n          surgerydetails: orderData.surgeries,\n          referenceId: \"\",\n          allergies: orderData.allergies,\n          gender: orderData.gender,\n          appointmentDate: orderData.appointmentDate,\n          emergencyname: orderData.emergencyname,\n          relationship: orderData.relationship,\n          patientWeight: \"200\",\n          dob: orderData.dob,\n          heightMeasurement: \"cm\",\n          medications: orderData.medications,\n          emergencyrelation: orderData.emergencyrelation,\n          dentalInfo: \"[]\",\n          bookingType: orderData.bookingType,\n          fees: orderData.fees,\n          hospitalid: \"\",\n          typeofconsultation: orderData.typeofconsultation,\n          doctorId: orderData.doctorId,\n          emergencyphone: \"\",\n          status: orderData.status,\n          modeOfConsultation: \"Video\",\n          duration: orderData.duration,\n          appointmentTime: orderData.appointmentTime,\n          lastName: \"\",\n        },\n        couponCode: \"\",\n        bookingId: orderRes?.info,\n      },\n      actualRate: \"74.27006\",\n      couponCode: \"\",\n      Ipaddress: IP,\n      transactionId: \"\",\n      blockId: orderRes?.info,\n      browserTimeZone: `GMT${formatTime}`,\n      attachedReportFiles: \"[]\",\n      Os: platform,\n      useragent: userAgent,\n      razorpayId: \"\",\n      patientId: user.userId,\n      referenceId: \"\",\n      todayRate: \"74.27006\",\n      bookingFrom: orderData.bookingFrom,\n      Browser: browser.name+\" \"+browser.version,\n            appname: \"C2MD Web\",\n    };\n\n    const res = await loginedApi.post(\"payment\", {\n      data: uploadData,\n      token: \"C2MDVerificationToken\",\n      requestType: \"313\",\n    });\n\n    let response = res.data.data;\n\n    if (response?.info !== \"Failed\") {\n      dispatch({ type: BOOKING_CONFIRMATION, payload: response });\n    } else {\n    }\n  };\nexport const GotoDashboard_action = () => async (dispatch) => {\n  dispatch({ type: GOTO_DASHBOARD });\n};\n\nexport const reset_booking = () => async (dispatch) => {\n  dispatch({ type: RESET_BOOKING });\n};\n"]},"metadata":{},"sourceType":"module"}