{"ast":null,"code":"import moment from \"moment\";\nexport const isWithinMinutes = (date, time) => {\n  var date = new Date();\n  console.log(new Date(moment().format('LL').toString(), time));\n  var appointmentDate = setDateTime(date, time);\n  var FIVE_MIN = 5 * 60 * 1000;\n  console.log(appointmentDate, date, FIVE_MIN);\n\n  if (date - appointmentDate < FIVE_MIN) {\n    return true;\n  }\n};\n\nfunction setDateTime(date, time) {\n  var index = time.indexOf(\":\"); // replace with \":\" for differently displayed time.\n\n  var index2 = time.indexOf(\" \");\n  var hours = time.substring(0, index).toString();\n  var minutes = time.substring(index + 1, index2);\n  var mer = time.substring(index2 + 1, time.length);\n\n  if (mer == \"PM\") {\n    hours = hours + 12;\n  }\n\n  date.setHours(hours);\n  date.setMinutes(minutes);\n  date.setSeconds(\"00\");\n  console.log(hours);\n  return date;\n}","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V11/c2md-web_react/src/Helpers/dateFunctions.js"],"names":["moment","isWithinMinutes","date","time","Date","console","log","format","toString","appointmentDate","setDateTime","FIVE_MIN","index","indexOf","index2","hours","substring","minutes","mer","length","setHours","setMinutes","setSeconds"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAI7C,MAAID,IAAI,GAAG,IAAIE,IAAJ,EAAX;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAIF,IAAJ,CAASJ,MAAM,GAAGO,MAAT,CAAgB,IAAhB,EAAsBC,QAAtB,EAAT,EAA0CL,IAA1C,CAAZ;AAEA,MAAIM,eAAe,GAAGC,WAAW,CAACR,IAAD,EAAOC,IAAP,CAAjC;AACA,MAAIQ,QAAQ,GAAG,IAAI,EAAJ,GAAS,IAAxB;AAEAN,EAAAA,OAAO,CAACC,GAAR,CAAYG,eAAZ,EAA4BP,IAA5B,EAAiCS,QAAjC;;AAGA,MAAKT,IAAI,GAAGO,eAAR,GAA2BE,QAA/B,EAAyC;AACvC,WAAO,IAAP;AACD;AAGF,CAnBM;;AAqBP,SAASD,WAAT,CAAqBR,IAArB,EAA2BC,IAA3B,EAAiC;AAG/B,MAAIS,KAAK,GAAGT,IAAI,CAACU,OAAL,CAAa,GAAb,CAAZ,CAH+B,CAGA;;AAC/B,MAAIC,MAAM,GAAGX,IAAI,CAACU,OAAL,CAAa,GAAb,CAAb;AAEA,MAAIE,KAAK,GAAGZ,IAAI,CAACa,SAAL,CAAe,CAAf,EAAkBJ,KAAlB,EAAyBJ,QAAzB,EAAZ;AACA,MAAIS,OAAO,GAAGd,IAAI,CAACa,SAAL,CAAeJ,KAAK,GAAG,CAAvB,EAA0BE,MAA1B,CAAd;AAEA,MAAII,GAAG,GAAGf,IAAI,CAACa,SAAL,CAAeF,MAAM,GAAG,CAAxB,EAA2BX,IAAI,CAACgB,MAAhC,CAAV;;AAEA,MAAID,GAAG,IAAI,IAAX,EAAiB;AACfH,IAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACD;;AAGDb,EAAAA,IAAI,CAACkB,QAAL,CAAcL,KAAd;AACAb,EAAAA,IAAI,CAACmB,UAAL,CAAgBJ,OAAhB;AACAf,EAAAA,IAAI,CAACoB,UAAL,CAAgB,IAAhB;AAEAjB,EAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AAEA,SAAOb,IAAP;AACD","sourcesContent":["import moment from \"moment\";\n\nexport const isWithinMinutes = (date, time) => {\n\n\n\n  var date = new Date();\n\n  console.log(new Date(moment().format('LL').toString(),time));\n\n  var appointmentDate = setDateTime(date, time);\n  var FIVE_MIN = 5 * 60 * 1000;\n\n  console.log(appointmentDate,date,FIVE_MIN);\n\n\n  if ((date - appointmentDate) < FIVE_MIN) {\n    return true\n  }\n\n\n}\n\nfunction setDateTime(date, time) {\n\n\n  var index = time.indexOf(\":\"); // replace with \":\" for differently displayed time.\n  var index2 = time.indexOf(\" \");\n\n  var hours = time.substring(0, index).toString();\n  var minutes = time.substring(index + 1, index2);\n\n  var mer = time.substring(index2 + 1, time.length);\n\n  if (mer == \"PM\") {\n    hours = hours + 12;\n  }\n\n\n  date.setHours(hours);\n  date.setMinutes(minutes);\n  date.setSeconds(\"00\");\n\n  console.log(hours);\n\n  return date;\n}"]},"metadata":{},"sourceType":"module"}