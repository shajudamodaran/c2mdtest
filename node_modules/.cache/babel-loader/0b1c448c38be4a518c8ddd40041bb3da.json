{"ast":null,"code":"import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { LOGIN_SUCCESS_ACTION, LOG_OUT_ACTION, UPDATE_LOGIN } from \"./type\";\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nexport const loginAction = ({\n  loginType,\n  userName,\n  accessCountry,\n  password,\n  history,\n  backupData\n}) => async dispatch => {\n  var _res$data, _res$data$data;\n\n  var hash = CryptoJS.SHA512(\"C2MD|\" + password); // var hash = CryptoJS.SHA512(password);\n\n  const res = await loginedApi.post(\"login\", {\n    token: \"token\",\n    data: {\n      isFromMobile: true,\n      Ipaddress: IP,\n      clinicId: \"20\",\n      deviceId: \"\",\n      browserTimeZone: \"GMT%2B05:30\",\n      appname: \"C2MD Patient\",\n      Os: platform,\n      hashPassword: hash.toString(CryptoJS.enc.Base64),\n      useragent: userAgent,\n      password: hash.toString(),\n      accessCountry: accessCountry,\n      loginType: loginType,\n      userName: userName\n    },\n    requestType: 3\n  });\n\n  if (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.info) {\n    return res.data.data;\n  } else {\n    var _res$data2, _res$data2$data;\n\n    dispatch({\n      type: LOGIN_SUCCESS_ACTION,\n      payload: res.data.data\n    });\n    await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n    if (((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.userType) == \"Patient\") {\n      var _history$location, _history$location$sta;\n\n      if (backupData && (backupData === null || backupData === void 0 ? void 0 : backupData.redirection)) {\n        history.push(backupData === null || backupData === void 0 ? void 0 : backupData.redirection);\n      } else if (history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : (_history$location$sta = _history$location.state) === null || _history$location$sta === void 0 ? void 0 : _history$location$sta.redirection) {\n        var _history$location2, _history$location2$st;\n\n        history.push(history === null || history === void 0 ? void 0 : (_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : (_history$location2$st = _history$location2.state) === null || _history$location2$st === void 0 ? void 0 : _history$location2$st.redirection);\n      } else {\n        history.push(\"/\");\n      }\n    } else {\n      history.push(\"/\");\n    }\n  }\n\n  return res.data.data;\n};\nexport const checkUser = ({\n  type,\n  searchkey\n}) => async dispatch => {\n  const response = await loginedApi.post(\"loginwithotp\", {\n    requestType: 15,\n    token: \"C2MDVerificationToken\",\n    data: {\n      type: type,\n      searchKey: searchkey\n    }\n  });\n\n  if (response.status === 200) {\n    return response.data && response.data;\n  }\n};\nexport const logoutAction = userData => async dispatch => {\n  let params = {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      \"browserTimeZone\": \"GMT%2B05:30\",\n      \"userId\": \"34276524\",\n      \"Ipaddress\": \"192.168.1.43\",\n      \"appname\": \"C2MD Patient\",\n      \"Os\": \"iOS14.4\",\n      \"useragent\": \"Simulator iPhone13,4 - CDD71058-AA65-40EB-8B50-61115DDD07C4\",\n      \"accessCountry\": \"IN\"\n    },\n    \"requestType\": 4\n  };\n  const res = await loginedApi.post(\"logout\", {\n    token: \"C2MDVerificationToken\",\n    data: params.data,\n    requestType: 4\n  });\n  dispatch({\n    type: LOG_OUT_ACTION,\n    payload: res === null || res === void 0 ? void 0 : res.data.data\n  });\n  localStorage.removeItem(\"userData\");\n};\nexport const loginwithotp = ({\n  loginType,\n  userName,\n  accessCountry,\n  history,\n  appoinment_form\n}) => async dispatch => {\n  const res = await loginedApi.post(\"login\", {\n    token: \"token\",\n    data: {\n      isFromMobile: true,\n      Ipaddress: IP,\n      clinicId: \"20\",\n      deviceId: \"\",\n      browserTimeZone: \"GMT%2B05:30\",\n      appname: \"C2MD Patient\",\n      Os: platform,\n      hashPassword: \"\",\n      useragent: userAgent,\n      password: \"\",\n      accessCountry: accessCountry,\n      loginType: loginType,\n      userName: userName,\n      isotpverified: true\n    },\n    requestType: 3\n  });\n\n  if (res.data.data.info) {\n    toast.error(\"Invalid username or password !\", {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  } else {\n    var _res$data3, _res$data3$data;\n\n    dispatch({\n      type: LOGIN_SUCCESS_ACTION,\n      payload: res.data.data\n    });\n    await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n    if (((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$data = _res$data3.data) === null || _res$data3$data === void 0 ? void 0 : _res$data3$data.userType) == \"Patient\") {\n      if (appoinment_form === null || appoinment_form === void 0 ? void 0 : appoinment_form.routing) {\n        let doctrId = localStorage.getItem(\"doctrID\");\n        history.push(`/BookAppointment/${doctrId}`);\n      } else {\n        history.push(\"/DoctorListing\");\n      }\n    } else {\n      history.push(\"/DoctorListing\");\n    }\n  }\n};\nexport const loginWithGoogle = ({\n  Data,\n  history\n}) => async dispatch => {\n  const res = await loginedApi.post(\"login\", {\n    token: \"token\",\n    data: {\n      isFromMobile: true,\n      Ipaddress: IP,\n      clinicId: \"20\",\n      deviceId: \"\",\n      browserTimeZone: \"GMT%2B05:30\",\n      appname: \"C2MD Patient\",\n      Os: platform,\n      hashPassword: \"\",\n      useragent: userAgent,\n      password: \"\",\n      accessCountry: \"IN\",\n      loginType: \"email\",\n      userName: Data === null || Data === void 0 ? void 0 : Data.email,\n      isotpverified: true\n    },\n    requestType: 3\n  });\n\n  if (res.data.data.info) {\n    return res.data.data;\n  } else {\n    dispatch({\n      type: LOGIN_SUCCESS_ACTION,\n      payload: res.data.data\n    });\n    await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n    history.push(\"/DoctorListing\");\n  }\n\n  return res.data.data;\n};\nexport const updateLoginDetails = data => async dispatch => {\n  dispatch({\n    type: UPDATE_LOGIN,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/home/veena/Downloads/c2mdWEBPush/c2md-web_react/src/actions/LoginAction.js"],"names":["loginedApi","toast","CryptoJS","LOGIN_SUCCESS_ACTION","LOG_OUT_ACTION","UPDATE_LOGIN","publicIp","require","IP","v4","platform","window","navigator","userAgent","loginAction","loginType","userName","accessCountry","password","history","backupData","dispatch","hash","SHA512","res","post","token","data","isFromMobile","Ipaddress","clinicId","deviceId","browserTimeZone","appname","Os","hashPassword","toString","enc","Base64","useragent","requestType","info","type","payload","localStorage","setItem","JSON","stringify","userType","redirection","push","location","state","checkUser","searchkey","response","searchKey","status","logoutAction","userData","params","removeItem","loginwithotp","appoinment_form","isotpverified","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","routing","doctrId","getItem","loginWithGoogle","Data","email","updateLoginDetails"],"mappings":"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","sourcesContent":["import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { LOGIN_SUCCESS_ACTION, LOG_OUT_ACTION, UPDATE_LOGIN } from \"./type\";\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\n\nexport const loginAction =\n  ({ loginType, userName, accessCountry, password, history, backupData }) =>\n    async (dispatch) => {\n      var hash = CryptoJS.SHA512(\"C2MD|\" + password);\n      // var hash = CryptoJS.SHA512(password);\n      const res = await loginedApi.post(\"login\", {\n        token: \"token\",\n        data: {\n          isFromMobile: true,\n          Ipaddress: IP,\n          clinicId: \"20\",\n          deviceId: \"\",\n          browserTimeZone: \"GMT%2B05:30\",\n          appname: \"C2MD Patient\",\n          Os: platform,\n          hashPassword: hash.toString(CryptoJS.enc.Base64),\n          useragent: userAgent,\n          password: hash.toString(),\n          accessCountry: accessCountry,\n          loginType: loginType,\n          userName: userName,\n        },\n        requestType: 3,\n      });\n\n      if (res?.data?.data?.info) {\n        return res.data.data;\n      } else {\n        dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n        await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n        if (res.data?.data?.userType == \"Patient\") {\n          if (backupData && backupData?.redirection) {\n            history.push(backupData?.redirection);\n          } else if (history?.location?.state?.redirection) {\n            history.push(history?.location?.state?.redirection);\n          } else {\n            history.push(\"/\");\n          }\n        } else {\n          history.push(\"/\");\n        }\n      }\n      return res.data.data;\n    };\n\nexport const checkUser =\n  ({ type, searchkey }) =>\n    async (dispatch) => {\n      const response = await loginedApi.post(\"loginwithotp\", {\n        requestType: 15,\n        token: \"C2MDVerificationToken\",\n        data: { type: type, searchKey: searchkey },\n      });\n\n      if (response.status === 200) {\n        return response.data && response.data;\n      }\n    };\n\nexport const logoutAction = (userData) => async (dispatch) => {\n\n  let params = {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\":\n    {\n      \"browserTimeZone\": \"GMT%2B05:30\",\n      \"userId\": \"34276524\",\n      \"Ipaddress\": \"192.168.1.43\",\n      \"appname\": \"C2MD Patient\",\n      \"Os\": \"iOS14.4\",\n      \"useragent\": \"Simulator iPhone13,4 - CDD71058-AA65-40EB-8B50-61115DDD07C4\", \"accessCountry\": \"IN\"\n    },\n    \"requestType\": 4\n  }\n\n  const res = await loginedApi.post(\"logout\", {\n    token: \"C2MDVerificationToken\",\n    data: params.data,\n    requestType: 4,\n  });\n\n\n  dispatch({ type: LOG_OUT_ACTION, payload:res?.data.data });\n  localStorage.removeItem(\"userData\");\n\n\n};\n\nexport const loginwithotp =\n  ({ loginType, userName, accessCountry, history, appoinment_form }) =>\n    async (dispatch) => {\n      const res = await loginedApi.post(\"login\", {\n        token: \"token\",\n        data: {\n          isFromMobile: true,\n          Ipaddress: IP,\n          clinicId: \"20\",\n          deviceId: \"\",\n          browserTimeZone: \"GMT%2B05:30\",\n          appname: \"C2MD Patient\",\n          Os: platform,\n          hashPassword: \"\",\n          useragent: userAgent,\n          password: \"\",\n          accessCountry: accessCountry,\n          loginType: loginType,\n          userName: userName,\n          isotpverified: true,\n        },\n        requestType: 3,\n      });\n\n      if (res.data.data.info) {\n        toast.error(\"Invalid username or password !\", {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      } else {\n        dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n        await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n        if (res.data?.data?.userType == \"Patient\") {\n          if (appoinment_form?.routing) {\n            let doctrId = localStorage.getItem(\"doctrID\");\n\n            history.push(`/BookAppointment/${doctrId}`);\n          } else {\n            history.push(\"/DoctorListing\");\n          }\n        } else {\n          history.push(\"/DoctorListing\");\n        }\n      }\n    };\n\nexport const loginWithGoogle =\n  ({ Data, history }) =>\n    async (dispatch) => {\n      const res = await loginedApi.post(\"login\", {\n        token: \"token\",\n        data: {\n          isFromMobile: true,\n          Ipaddress: IP,\n          clinicId: \"20\",\n          deviceId: \"\",\n          browserTimeZone: \"GMT%2B05:30\",\n          appname: \"C2MD Patient\",\n          Os: platform,\n          hashPassword: \"\",\n          useragent: userAgent,\n          password: \"\",\n          accessCountry: \"IN\",\n          loginType: \"email\",\n          userName: Data?.email,\n          isotpverified: true,\n        },\n        requestType: 3,\n      });\n\n      if (res.data.data.info) {\n        return res.data.data;\n      } else {\n        dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n        await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n        history.push(\"/DoctorListing\");\n      }\n      return res.data.data;\n    };\n\nexport const updateLoginDetails = (data) => async dispatch => {\n  dispatch({ type: UPDATE_LOGIN, payload: data })\n}\n"]},"metadata":{},"sourceType":"module"}