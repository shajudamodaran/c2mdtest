{"ast":null,"code":"var _jsxFileName = \"/home/veena/Downloads/WEB_PUSH/c2md-web_react/src/pages/Microsite.js\",\n    _s = $RefreshSig$();\n\nimport React, { lazy, useEffect } from \"react\";\nimport { fetch_clientDetails } from '../actions/MicrositeAction';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MicrositeLayout = /*#__PURE__*/lazy(_c = () => import(\"../components/MicrositeLayout/Layout\"));\n_c2 = MicrositeLayout;\nconst Microsite = /*#__PURE__*/lazy(_c3 = () => import(\"../components/Microsite\"));\n_c4 = Microsite;\n\nfunction MicrositePage() {\n  _s();\n\n  let {\n    clinicId\n  } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetch_clientDetails(clinicId));\n  }, []);\n  const clientDetails = useSelector(state => state.clientDetails);\n  useEffect(() => {\n    setClinicdataInLocal(clientDetails);\n  }, [clientDetails]);\n\n  let setClinicdataInLocal = async data => {\n    await localStorage.setItem(\"clinicDetails\", JSON.stringify(data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(MicrositeLayout, {\n    clientDetails: clientDetails,\n    children: /*#__PURE__*/_jsxDEV(Microsite, {\n      clientDetails: clientDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MicrositePage, \"ZSTWs6UVGEQ1DLSwD6A9FisMCUM=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n\n_c5 = MicrositePage;\nexport default MicrositePage;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MicrositeLayout$lazy\");\n$RefreshReg$(_c2, \"MicrositeLayout\");\n$RefreshReg$(_c3, \"Microsite$lazy\");\n$RefreshReg$(_c4, \"Microsite\");\n$RefreshReg$(_c5, \"MicrositePage\");","map":{"version":3,"sources":["/home/veena/Downloads/WEB_PUSH/c2md-web_react/src/pages/Microsite.js"],"names":["React","lazy","useEffect","fetch_clientDetails","useSelector","useDispatch","useParams","MicrositeLayout","Microsite","MicrositePage","clinicId","dispatch","clientDetails","state","setClinicdataInLocal","data","localStorage","setItem","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAAQC,mBAAR,QAAkC,4BAAlC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AACA,MAAMC,eAAe,gBAAGN,IAAI,MAAC,MAAK,OAAO,sCAAP,CAAN,CAA5B;MAAMM,e;AACN,MAAMC,SAAS,gBAAGP,IAAI,OAAC,MAAK,OAAO,yBAAP,CAAN,CAAtB;MAAMO,S;;AAEN,SAASC,aAAT,GAAyB;AAAA;;AACvB,MAAI;AAAEC,IAAAA;AAAF,MAAeJ,SAAS,EAA5B;AACA,QAAMK,QAAQ,GAAGN,WAAW,EAA5B;AACAH,EAAAA,SAAS,CAAC,MAAI;AACZS,IAAAA,QAAQ,CAACR,mBAAmB,CAACO,QAAD,CAApB,CAAR;AAED,GAHQ,EAGP,EAHO,CAAT;AAKA,QAAME,aAAa,GAAGR,WAAW,CAC9BS,KAAD,IAAWA,KAAK,CAACD,aADc,CAAjC;AAIAV,EAAAA,SAAS,CAAC,MAAM;AAEdY,IAAAA,oBAAoB,CAACF,aAAD,CAApB;AAED,GAJQ,EAIN,CAACA,aAAD,CAJM,CAAT;;AAOA,MAAIE,oBAAoB,GAAE,MAAOC,IAAP,IAAc;AAEtC,UAAMC,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAtC,CAAN;AAED,GAJD;;AAQA,sBACE,QAAC,eAAD;AAAiB,IAAA,aAAa,EAAEH,aAAhC;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,aAAa,EAAEA;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAhCQH,a;UACYH,S,EACFD,W,EAMKD,W;;;MARfK,a;AAkCT,eAAeA,aAAf","sourcesContent":["import React, { lazy ,useEffect}  from \"react\";\nimport {fetch_clientDetails} from '../actions/MicrositeAction';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nconst MicrositeLayout = lazy(() =>import(\"../components/MicrositeLayout/Layout\"));\nconst Microsite = lazy(() =>import(\"../components/Microsite\"));\n\nfunction MicrositePage() {\n  let { clinicId } = useParams();\n  const dispatch = useDispatch();\n  useEffect(()=>{\n    dispatch(fetch_clientDetails(clinicId))\n\n  },[])\n\n  const clientDetails = useSelector(\n    (state) => state.clientDetails\n  );\n\n  useEffect(() => {\n\n    setClinicdataInLocal(clientDetails)\n   \n  }, [clientDetails])\n\n\n  let setClinicdataInLocal= async (data)=>{\n\n    await localStorage.setItem(\"clinicDetails\", JSON.stringify(data));\n\n  }\n  \n\n\n  return (\n    <MicrositeLayout clientDetails={clientDetails}>\n      <Microsite clientDetails={clientDetails}/>\n    </MicrositeLayout>\n  );\n}\n\nexport default MicrositePage;\n"]},"metadata":{},"sourceType":"module"}