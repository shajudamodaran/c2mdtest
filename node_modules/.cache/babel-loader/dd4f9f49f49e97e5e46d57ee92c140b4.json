{"ast":null,"code":"var _formatTime;\n\nimport loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport axios from \"axios\";\nimport { LOGIN_SUCCESS_ACTION, LOG_OUT_ACTION, UPDATE_LOGIN } from \"./type\";\n\nconst qs = require('qs');\n\nconst FormData = require('form-data');\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\n\nconst {\n  detect\n} = require(\"detect-browser\");\n\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const loginAction = _ref => {\n  let {\n    loginType,\n    userName,\n    accessCountry,\n    password,\n    history,\n    backupData,\n    setDrSign\n  } = _ref;\n  return async dispatch => {\n    var _res$data, _res$data$data;\n\n    let resp = await loginedApi.post(\"getcountrycode\", {\n      token: \"token\",\n      version: \"2.0\",\n      data: {\n        browserTimeZone: `GMT${formatTime}`\n      },\n      requestType: 1058\n    });\n    const doctorscountrycode = resp.data.data;\n    console.log(backupData);\n    var hash = CryptoJS.SHA512(\"C2MD|\" + password); // var hash = CryptoJS.SHA512(password);\n\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        clinicId: \"20\",\n        deviceId: \"\",\n        appname: \"C2MD Patient\",\n        hashPassword: hash.toString(CryptoJS.enc.Base64),\n        password: hash.toString(),\n        loginType: loginType,\n        userName: userName,\n        browserTimeZone: `GMT${formatTime}`,\n        Ipaddress: doctorscountrycode.Ipaddress,\n        useragent: userAgent,\n        Browser: browser.name + \" \" + browser.version,\n        Os: platform,\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country\n      },\n      requestType: 3\n    });\n\n    if (res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && (_res$data$data = _res$data.data) !== null && _res$data$data !== void 0 && _res$data$data.info) {\n      return res.data.data;\n    } else {\n      var _res$data2, _res$data2$data;\n\n      dispatch({\n        type: LOGIN_SUCCESS_ACTION,\n        payload: res.data.data\n      });\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n      if (((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.userType) == \"Patient\") {\n        var _history$location, _history$location$sta;\n\n        console.log(backupData);\n\n        if (backupData && backupData !== null && backupData !== void 0 && backupData.redirection) {\n          history.push(backupData === null || backupData === void 0 ? void 0 : backupData.redirection);\n        } else if (history !== null && history !== void 0 && (_history$location = history.location) !== null && _history$location !== void 0 && (_history$location$sta = _history$location.state) !== null && _history$location$sta !== void 0 && _history$location$sta.redirection) {\n          var _history$location2, _history$location2$st;\n\n          history.push(history === null || history === void 0 ? void 0 : (_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : (_history$location2$st = _history$location2.state) === null || _history$location2$st === void 0 ? void 0 : _history$location2$st.redirection);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      } else {\n        // history.push(\"/dashboard\");\n        // setDrSign(true)\n        let login = {\n          isFromMobile: true,\n          Ipaddress: IP,\n          clinicId: \"20\",\n          deviceId: \"\",\n          browserTimeZone: `GMT${formatTime}`,\n          appname: \"C2MD Patient\",\n          Os: platform,\n          hashPassword: \"\",\n          useragent: userAgent,\n          password: \"\",\n          accessCountry: accessCountry,\n          loginType: loginType,\n          userName: userName,\n          isotpverified: true,\n          Browser: browser.name + \" \" + browser.version\n        };\n        axios({\n          method: 'post',\n          url: 'https://uat.c2mdr.com/demo/Connect2MyDoctorRequest',\n          data: {\n            requestType: 3,\n            loginDetails: JSON.stringify(login)\n          },\n          headers: {\n            'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n          }\n        }).then(response => {\n          console.log(response);\n        }).catch(err => {\n          throw err;\n        });\n      }\n    }\n\n    return res.data.data;\n  };\n};\nexport const checkUser = _ref2 => {\n  let {\n    type,\n    searchkey\n  } = _ref2;\n  return async dispatch => {\n    const response = await loginedApi.post(\"loginwithotp\", {\n      requestType: 15,\n      token: \"C2MDVerificationToken\",\n      data: {\n        type: type,\n        searchKey: searchkey\n      }\n    });\n\n    if (response.status === 200) {\n      return response.data && response.data;\n    }\n  };\n};\nexport const logoutAction = () => async dispatch => {\n  dispatch({\n    type: LOG_OUT_ACTION\n  });\n  localStorage.removeItem(\"userData\");\n};\nexport const loginwithotp = _ref3 => {\n  let {\n    loginType,\n    userName,\n    accessCountry,\n    history,\n    appoinment_form\n  } = _ref3;\n  return async dispatch => {\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: accessCountry,\n        loginType: loginType,\n        userName: userName,\n        isotpverified: true,\n        Browser: browser.name + \" \" + browser.version\n      },\n      requestType: 3\n    });\n    console.log(res);\n\n    if (res.data.data.info) {\n      toast.error(\"Invalid username or password !\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    } else {\n      var _res$data3, _res$data3$data, _res$data4, _res$data4$data;\n\n      dispatch({\n        type: LOGIN_SUCCESS_ACTION,\n        payload: res.data.data\n      }); //await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n      console.log((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$data = _res$data3.data) === null || _res$data3$data === void 0 ? void 0 : _res$data3$data.userType);\n\n      if (((_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : (_res$data4$data = _res$data4.data) === null || _res$data4$data === void 0 ? void 0 : _res$data4$data.userType) == \"Patient\") {\n        if (appoinment_form !== null && appoinment_form !== void 0 && appoinment_form.routing) {\n          let doctrId = localStorage.getItem(\"doctrID\");\n          history.push(`/BookAppointment/${doctrId}`);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      } else {\n        let requestOptions = {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        };\n        let body = {\n          token: \"token\",\n          data: {\n            isFromMobile: true,\n            Ipaddress: IP,\n            clinicId: \"20\",\n            deviceId: \"\",\n            browserTimeZone: `GMT${formatTime}`,\n            appname: \"C2MD Patient\",\n            Os: platform,\n            hashPassword: \"\",\n            useragent: userAgent,\n            password: \"\",\n            accessCountry: accessCountry,\n            loginType: loginType,\n            userName: userName,\n            isotpverified: true,\n            Browser: browser.name + \" \" + browser.version\n          },\n          requestType: 3\n        };\n        return axios.post('https://uat.c2mdr.com/demo/Connect2MyDoctorRequest', JSON.stringify(body), requestOptions).then(response => {\n          return response;\n        }).catch(err => {\n          throw err;\n        }); //history.push(\"/dashboard\");\n      }\n    }\n  };\n};\nexport const loginWithGoogle = _ref4 => {\n  let {\n    Data,\n    history\n  } = _ref4;\n  return async dispatch => {\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: \"IN\",\n        loginType: \"email\",\n        userName: Data === null || Data === void 0 ? void 0 : Data.email,\n        isotpverified: true,\n        Browser: browser.name + \" \" + browser.version\n      },\n      requestType: 3\n    });\n\n    if (res.data.data.info) {\n      return res.data.data;\n    } else {\n      dispatch({\n        type: LOGIN_SUCCESS_ACTION,\n        payload: res.data.data\n      });\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n      history.push(\"/DoctorListing\");\n    }\n\n    return res.data.data;\n  };\n};\nexport const updateLoginDetails = data => async dispatch => {\n  dispatch({\n    type: UPDATE_LOGIN,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V11/c2md-web_react/src/actions/LoginAction.js"],"names":["loginedApi","toast","CryptoJS","axios","LOGIN_SUCCESS_ACTION","LOG_OUT_ACTION","UPDATE_LOGIN","qs","require","FormData","publicIp","IP","v4","detect","browser","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","loginAction","loginType","userName","accessCountry","password","history","backupData","setDrSign","dispatch","resp","post","token","version","data","browserTimeZone","requestType","doctorscountrycode","console","log","hash","SHA512","res","isFromMobile","clinicId","deviceId","appname","hashPassword","enc","Base64","Ipaddress","useragent","Browser","name","Os","currency","Country","info","type","payload","localStorage","setItem","JSON","stringify","userType","redirection","push","location","state","login","isotpverified","method","url","loginDetails","headers","then","response","catch","err","checkUser","searchkey","searchKey","status","logoutAction","removeItem","loginwithotp","appoinment_form","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","routing","doctrId","getItem","requestOptions","body","loginWithGoogle","Data","email","updateLoginDetails"],"mappings":"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","sourcesContent":["import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport axios from \"axios\";\nimport { LOGIN_SUCCESS_ACTION, LOG_OUT_ACTION, UPDATE_LOGIN } from \"./type\";\nconst qs = require('qs')\nconst FormData = require('form-data');\n\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nconst { detect } = require(\"detect-browser\");\nconst browser = detect();\n\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nexport const loginAction =\n  ({\n    loginType,\n    userName,\n    accessCountry,\n    password,\n    history,\n    backupData,\n    setDrSign,\n  }) =>\n  async (dispatch) => {\n    let resp = await loginedApi.post(\"getcountrycode\", {\n      token: \"token\",\n      version: \"2.0\",\n      data: { browserTimeZone: `GMT${formatTime}` },\n      requestType: 1058,\n    });\n    const doctorscountrycode = resp.data.data;\n\n    console.log(backupData);\n    var hash = CryptoJS.SHA512(\"C2MD|\" + password);\n    // var hash = CryptoJS.SHA512(password);\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        clinicId: \"20\",\n        deviceId: \"\",\n        appname: \"C2MD Patient\",\n        hashPassword: hash.toString(CryptoJS.enc.Base64),\n        password: hash.toString(),\n        loginType: loginType,\n        userName: userName,\n        browserTimeZone: `GMT${formatTime}`,\n        Ipaddress: doctorscountrycode.Ipaddress,\n        useragent: userAgent,\n        Browser: browser.name + \" \" + browser.version,\n        Os: platform,\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n      },\n      requestType: 3,\n    });\n\n    if (res?.data?.data?.info) {\n      return res.data.data;\n    } else {\n      dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n      if (res.data?.data?.userType == \"Patient\") {\n        console.log(backupData);\n        if (backupData && backupData?.redirection) {\n          history.push(backupData?.redirection);\n        } else if (history?.location?.state?.redirection) {\n          history.push(history?.location?.state?.redirection);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      } else {\n       // history.push(\"/dashboard\");\n        // setDrSign(true)\n\n       \n      let login = {\n        isFromMobile: true,\n              Ipaddress: IP,\n              clinicId: \"20\",\n              deviceId: \"\",\n              browserTimeZone: `GMT${formatTime}`,\n              appname: \"C2MD Patient\",\n              Os: platform,\n              hashPassword: \"\",\n              useragent: userAgent,\n              password: \"\",\n              accessCountry: accessCountry,\n              loginType: loginType,\n              userName: userName,\n              isotpverified: true,\n              Browser: browser.name + \" \" + browser.version,\n      };\n\n        axios({\n          method: 'post',\n          url: 'https://uat.c2mdr.com/demo/Connect2MyDoctorRequest',\n          data: {\n            requestType: 3,\n            loginDetails: JSON.stringify(login)\n        },\n          \n          headers: {\n            'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n          }\n        }).then(response => {\n          console.log(response)\n      })\n      .catch(err => {\n          throw err;\n      });\n\n      \n    \n      \n  \n      \n      }\n    }\n    return res.data.data;\n  };\n\nexport const checkUser =\n  ({ type, searchkey }) =>\n  async (dispatch) => {\n    const response = await loginedApi.post(\"loginwithotp\", {\n      requestType: 15,\n      token: \"C2MDVerificationToken\",\n      data: { type: type, searchKey: searchkey },\n    });\n\n    if (response.status === 200) {\n      return response.data && response.data;\n    }\n  };\n\nexport const logoutAction = () => async (dispatch) => {\n  dispatch({ type: LOG_OUT_ACTION });\n  localStorage.removeItem(\"userData\");\n};\n\nexport const loginwithotp =\n  ({ loginType, userName, accessCountry, history, appoinment_form }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: accessCountry,\n        loginType: loginType,\n        userName: userName,\n        isotpverified: true,\n        Browser: browser.name + \" \" + browser.version,\n      },\n      requestType: 3,\n    });\n\n    console.log(res);\n\n    if (res.data.data.info) {\n      toast.error(\"Invalid username or password !\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    } else {\n      dispatch({\n        type: LOGIN_SUCCESS_ACTION,\n        payload: res.data.data,\n      });\n\n      //await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n      console.log(res.data?.data?.userType);\n      if (res.data?.data?.userType == \"Patient\") {\n        if (appoinment_form?.routing) {\n          let doctrId = localStorage.getItem(\"doctrID\");\n\n          history.push(`/BookAppointment/${doctrId}`);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      } else {\n        let requestOptions = {\n          headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n          }\n      };\n  \n      let body = {\n        token: \"token\",\n        data: {\n          isFromMobile: true,\n          Ipaddress: IP,\n          clinicId: \"20\",\n          deviceId: \"\",\n          browserTimeZone: `GMT${formatTime}`,\n          appname: \"C2MD Patient\",\n          Os: platform,\n          hashPassword: \"\",\n          useragent: userAgent,\n          password: \"\",\n          accessCountry: accessCountry,\n          loginType: loginType,\n          userName: userName,\n          isotpverified: true,\n          Browser: browser.name + \" \" + browser.version,\n        },\n        requestType: 3,\n      };\n  \n      return axios.post('https://uat.c2mdr.com/demo/Connect2MyDoctorRequest', JSON.stringify(body), requestOptions)\n          .then(response => {\n              return response;\n          })\n          .catch(err => {\n              throw err;\n          });\n        //history.push(\"/dashboard\");\n      }\n    }\n  };\n\nexport const loginWithGoogle =\n  ({ Data, history }) =>\n  async (dispatch) => {\n    \n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: \"IN\",\n        loginType: \"email\",\n        userName: Data?.email,\n        isotpverified: true,\n        Browser: browser.name + \" \" + browser.version,\n      },\n      requestType: 3,\n    });\n\n    if (res.data.data.info) {\n      return res.data.data;\n    } else {\n      dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n      history.push(\"/DoctorListing\");\n    }\n    return res.data.data;\n  };\n\nexport const updateLoginDetails = (data) => async (dispatch) => {\n  dispatch({ type: UPDATE_LOGIN, payload: data });\n};\n"]},"metadata":{},"sourceType":"module"}