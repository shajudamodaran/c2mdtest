{"ast":null,"code":"var _formatTime;\n\nimport loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { LOGIN_SUCCESS_ACTION, LOG_OUT_ACTION, UPDATE_LOGIN } from \"./type\";\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const loginAction = ({\n  loginType,\n  userName,\n  accessCountry,\n  password,\n  history,\n  backupData,\n  setDrSign\n}) => async dispatch => {\n  var _res$data, _res$data$data;\n\n  var hash = CryptoJS.SHA512(\"C2MD|\" + password); // var hash = CryptoJS.SHA512(password);\n\n  const res = await loginedApi.post(\"login\", {\n    token: \"token\",\n    data: {\n      isFromMobile: true,\n      Ipaddress: IP,\n      clinicId: \"20\",\n      deviceId: \"\",\n      browserTimeZone: `GMT${formatTime}`,\n      appname: \"C2MD Patient\",\n      Os: platform,\n      hashPassword: hash.toString(CryptoJS.enc.Base64),\n      useragent: userAgent,\n      password: hash.toString(),\n      accessCountry: accessCountry,\n      loginType: loginType,\n      userName: userName\n    },\n    requestType: 3\n  });\n\n  if (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.info) {\n    return res.data.data;\n  } else {\n    var _res$data2, _res$data2$data;\n\n    dispatch({\n      type: LOGIN_SUCCESS_ACTION,\n      payload: res.data.data\n    });\n    await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n    if (((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.userType) == \"Patient\") {\n      var _history$location, _history$location$sta;\n\n      console.log(backupData);\n\n      if (backupData && (backupData === null || backupData === void 0 ? void 0 : backupData.redirection)) {\n        history.push(backupData === null || backupData === void 0 ? void 0 : backupData.redirection);\n      } else if (history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : (_history$location$sta = _history$location.state) === null || _history$location$sta === void 0 ? void 0 : _history$location$sta.redirection) {\n        var _history$location2, _history$location2$st;\n\n        history.push(history === null || history === void 0 ? void 0 : (_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : (_history$location2$st = _history$location2.state) === null || _history$location2$st === void 0 ? void 0 : _history$location2$st.redirection);\n      } else {\n        history.push(\"/dashboard\");\n      }\n    } else {\n      // history.push(\"/mobiledashboard\");\n      setDrSign(true);\n    }\n  }\n\n  return res.data.data;\n};\nexport const checkUser = ({\n  type,\n  searchkey\n}) => async dispatch => {\n  const response = await loginedApi.post(\"loginwithotp\", {\n    requestType: 15,\n    token: \"C2MDVerificationToken\",\n    data: {\n      type: type,\n      searchKey: searchkey\n    }\n  });\n\n  if (response.status === 200) {\n    return response.data && response.data;\n  }\n};\nexport const logoutAction = () => async dispatch => {\n  dispatch({\n    type: LOG_OUT_ACTION\n  });\n  localStorage.removeItem(\"userData\");\n};\nexport const loginwithotp = ({\n  loginType,\n  userName,\n  accessCountry,\n  history,\n  appoinment_form\n}) => async dispatch => {\n  const res = await loginedApi.post(\"login\", {\n    token: \"token\",\n    data: {\n      isFromMobile: true,\n      Ipaddress: IP,\n      clinicId: \"20\",\n      deviceId: \"\",\n      browserTimeZone: `GMT${formatTime}`,\n      appname: \"C2MD Patient\",\n      Os: platform,\n      hashPassword: \"\",\n      useragent: userAgent,\n      password: \"\",\n      accessCountry: accessCountry,\n      loginType: loginType,\n      userName: userName,\n      isotpverified: true\n    },\n    requestType: 3\n  });\n\n  if (res.data.data.info) {\n    toast.error(\"Invalid username or password !\", {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  } else {\n    var _res$data3, _res$data3$data;\n\n    dispatch({\n      type: LOGIN_SUCCESS_ACTION,\n      payload: JSON.parse(res.data.data)\n    });\n    await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n    if (((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$data = _res$data3.data) === null || _res$data3$data === void 0 ? void 0 : _res$data3$data.userType) == \"Patient\") {\n      if (appoinment_form === null || appoinment_form === void 0 ? void 0 : appoinment_form.routing) {\n        let doctrId = localStorage.getItem(\"doctrID\");\n        history.push(`/BookAppointment/${doctrId}`);\n      } else {\n        history.push(\"/DoctorListing\");\n      }\n    } else {\n      history.push(\"/DoctorListing\");\n    }\n  }\n};\nexport const loginWithGoogle = ({\n  Data,\n  history\n}) => async dispatch => {\n  const res = await loginedApi.post(\"login\", {\n    token: \"token\",\n    data: {\n      isFromMobile: true,\n      Ipaddress: IP,\n      clinicId: \"20\",\n      deviceId: \"\",\n      browserTimeZone: `GMT${formatTime}`,\n      appname: \"C2MD Patient\",\n      Os: platform,\n      hashPassword: \"\",\n      useragent: userAgent,\n      password: \"\",\n      accessCountry: \"IN\",\n      loginType: \"email\",\n      userName: Data === null || Data === void 0 ? void 0 : Data.email,\n      isotpverified: true\n    },\n    requestType: 3\n  });\n\n  if (res.data.data.info) {\n    return res.data.data;\n  } else {\n    dispatch({\n      type: LOGIN_SUCCESS_ACTION,\n      payload: res.data.data\n    });\n    await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n    history.push(\"/DoctorListing\");\n  }\n\n  return res.data.data;\n};\nexport const updateLoginDetails = data => async dispatch => {\n  dispatch({\n    type: UPDATE_LOGIN,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/v5/c2md-web_react/src/actions/LoginAction.js"],"names":["loginedApi","toast","CryptoJS","LOGIN_SUCCESS_ACTION","LOG_OUT_ACTION","UPDATE_LOGIN","publicIp","require","IP","v4","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","loginAction","loginType","userName","accessCountry","password","history","backupData","setDrSign","dispatch","hash","SHA512","res","post","token","data","isFromMobile","Ipaddress","clinicId","deviceId","browserTimeZone","appname","Os","hashPassword","enc","Base64","useragent","requestType","info","type","payload","localStorage","setItem","JSON","stringify","userType","console","log","redirection","push","location","state","checkUser","searchkey","response","searchKey","status","logoutAction","removeItem","loginwithotp","appoinment_form","isotpverified","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","parse","routing","doctrId","getItem","loginWithGoogle","Data","email","updateLoginDetails"],"mappings":"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","sourcesContent":["import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { LOGIN_SUCCESS_ACTION, LOG_OUT_ACTION,UPDATE_LOGIN } from \"./type\";\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif(formatTime.search(/\\+/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\+/g,\"%2B\")\n  }else if(formatTime.search(/\\-/g)!=null)\n  {\n    formatTime=formatTime.replace(/\\-/g,\"%2D\")\n  }//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const loginAction =\n  ({ loginType, userName, accessCountry, password, history, backupData, setDrSign }) =>\n  async (dispatch) => {\n    var hash = CryptoJS.SHA512(\"C2MD|\" + password);\n    // var hash = CryptoJS.SHA512(password);\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: hash.toString(CryptoJS.enc.Base64),\n        useragent: userAgent,\n        password: hash.toString(),\n        accessCountry: accessCountry,\n        loginType: loginType,\n        userName: userName,\n      },\n      requestType: 3,\n    });\n\n    if (res?.data?.data?.info) {\n      return res.data.data;\n    } else {\n      dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n\n      if (res.data?.data?.userType == \"Patient\") {\n        console.log(backupData);\n        if (backupData && backupData?.redirection) {\n          history.push(backupData?.redirection);\n        } else if (history?.location?.state?.redirection) {\n          history.push(history?.location?.state?.redirection);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      } else {\n        // history.push(\"/mobiledashboard\");\n        setDrSign(true)\n      }\n    }\n    return res.data.data;\n  };\n\nexport const checkUser =\n  ({ type, searchkey }) =>\n  async (dispatch) => {\n    const response = await loginedApi.post(\"loginwithotp\", {\n      requestType: 15,\n      token: \"C2MDVerificationToken\",\n      data: { type: type, searchKey: searchkey },\n    });\n\n    if (response.status === 200) {\n      return response.data && response.data;\n    }\n  };\n\nexport const logoutAction = () => async (dispatch) => {\n  dispatch({ type: LOG_OUT_ACTION });\n  localStorage.removeItem(\"userData\");\n};\n\nexport const loginwithotp =\n  ({ loginType, userName, accessCountry, history, appoinment_form }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: accessCountry,\n        loginType: loginType,\n        userName: userName,\n        isotpverified: true,\n      },\n      requestType: 3,\n    });\n\n    if (res.data.data.info) {\n      toast.error(\"Invalid username or password !\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    } else \n    {\n\n     \n\n      dispatch({ type: LOGIN_SUCCESS_ACTION, payload: JSON.parse(res.data.data) });\n\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n      if (res.data?.data?.userType == \"Patient\") {\n        if (appoinment_form?.routing) {\n          let doctrId = localStorage.getItem(\"doctrID\");\n\n          history.push(`/BookAppointment/${doctrId}`);\n        } else {\n          history.push(\"/DoctorListing\");\n        }\n      } else {\n        history.push(\"/DoctorListing\");\n      }\n    }\n  };\n\nexport const loginWithGoogle =\n  ({ Data, history }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"login\", {\n      token: \"token\",\n      data: {\n        isFromMobile: true,\n        Ipaddress: IP,\n        clinicId: \"20\",\n        deviceId: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        appname: \"C2MD Patient\",\n        Os: platform,\n        hashPassword: \"\",\n        useragent: userAgent,\n        password: \"\",\n        accessCountry: \"IN\",\n        loginType: \"email\",\n        userName: Data?.email,\n        isotpverified: true,\n      },\n      requestType: 3,\n    });\n\n    if (res.data.data.info) {\n      return res.data.data;\n    } else {\n      dispatch({ type: LOGIN_SUCCESS_ACTION, payload: res.data.data });\n\n      await localStorage.setItem(\"userData\", JSON.stringify(res.data.data));\n      history.push(\"/DoctorListing\");\n    }\n    return res.data.data;\n  };\n\n  export const updateLoginDetails = (data) => async dispatch => {\n   \n    dispatch({type:UPDATE_LOGIN,payload:data})\n  }"]},"metadata":{},"sourceType":"module"}