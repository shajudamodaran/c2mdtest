{"ast":null,"code":"var _formatTime;\n\nimport loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { SIGNUP_SUCCESS_ACTION } from \"./type\";\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nlet countrycoderes;\nlet doctorscountrycode;\nexport const signup_action = ({\n  values,\n  userType,\n  OTP,\n  history\n}) => async dispatch => {\n  var _values$dial_code, _values$mobileNumber;\n\n  // var hash = CryptoJS.SHA512(values.password);\n  console.log(\"Signup Params......\", {\n    values,\n    userType,\n    OTP\n  });\n  countrycoderes = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  doctorscountrycode = countrycoderes.data.data;\n  var hash = CryptoJS.SHA512(\"C2MD|\" + values.password);\n  let password = hash.toString();\n  let hashPassword = hash.toString(CryptoJS.enc.Base64); // let hashPassword = CryptoJS.SHA512(\"C2MD|\"+password);\n\n  let limit = (_values$dial_code = values.dial_code) === null || _values$dial_code === void 0 ? void 0 : _values$dial_code.length;\n  let mobNo = (_values$mobileNumber = values.mobileNumber) === null || _values$mobileNumber === void 0 ? void 0 : _values$mobileNumber.slice(limit);\n  let mobileNo = `%2B${values.dial_code}${\" \"}${mobNo}`;\n  console.log(values);\n  const res = await loginedApi.post(\"signup\", {\n    requestType: 2,\n    data: {\n      lastName: \"\",\n      accessCountry: doctorscountrycode.Country,\n      source: \"Web APP\",\n      useragent: userAgent,\n      department: \"\",\n      password: password,\n      hashPassword: hashPassword,\n      userType: userType,\n      mobileNumber: mobileNo,\n      emailId: values.email,\n      referenceOTP: OTP,\n      deviceId: \"\",\n      signupFrom: \"c2md\",\n      Os: platform,\n      firstName: values.fullName,\n      clinicId: \"20\",\n      Ipaddress: IP,\n      type: \"\",\n      browserTimeZone: `GMT${formatTime}`,\n      speciality: \"\",\n      appname: \"C2MD Patient\"\n    },\n    token: \"token\"\n  });\n\n  if (res.data.data) {\n    let response = res.data.data;\n\n    if (response.hasOwnProperty(\"info\")) {\n      return response;\n    } else {\n      var _res$data, _res$data$data;\n\n      dispatch({\n        type: SIGNUP_SUCCESS_ACTION,\n        payload: res.data.data\n      });\n      localStorage.setItem(\"userData\", response);\n\n      if (((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.userType) == \"Patient\") {\n        var _history$location, _history$location$sta;\n\n        if (history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : (_history$location$sta = _history$location.state) === null || _history$location$sta === void 0 ? void 0 : _history$location$sta.redirection) {\n          var _history$location2, _history$location2$st;\n\n          history.push(history === null || history === void 0 ? void 0 : (_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : (_history$location2$st = _history$location2.state) === null || _history$location2$st === void 0 ? void 0 : _history$location2$st.redirection);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      }\n    }\n\n    return response;\n  }\n};\nexport const generate_OTP = formData => async dispatch => {\n  var _formData$dial_code, _formData$mobileNumbe;\n\n  let limit = (_formData$dial_code = formData.dial_code) === null || _formData$dial_code === void 0 ? void 0 : _formData$dial_code.length;\n  let mobNo = (_formData$mobileNumbe = formData.mobileNumber) === null || _formData$mobileNumbe === void 0 ? void 0 : _formData$mobileNumbe.slice(limit);\n  let mobileNo = `%2B${formData.dial_code}${\" \"}${mobNo}`;\n  const res = await loginedApi.post(\"getmobileotp\", {\n    token: \"C2MDVerificationToken\",\n    requestType: \"25\",\n    data: {\n      mobileNumber: mobileNo,\n      Os: platform,\n      Ipaddress: IP,\n      useragent: userAgent\n    }\n  });\n  return res.data && res.data.data.info;\n};\nexport const signup_with_Google = ({\n  userType,\n  Data,\n  history\n}) => async dispatch => {\n  console.log(\"Data\", Data);\n  const res = await loginedApi.post(\"signup\", {\n    requestType: 2,\n    data: {\n      lastName: \"\",\n      accessCountry: \"\",\n      source: \"iOSApp\",\n      useragent: userAgent,\n      department: \"\",\n      password: \"\",\n      hashPassword: \"\",\n      userType: userType,\n      mobileNumber: \"\",\n      emailId: Data.email,\n      referenceOTP: \"\",\n      deviceId: \"\",\n      signupFrom: \"c2md\",\n      Os: platform,\n      firstName: Data.name,\n      socialProfileId: Data.googleId,\n      clinicId: \"20\",\n      Ipaddress: IP,\n      type: \"signUpGoogle\",\n      browserTimeZone: `GMT${formatTime}`,\n      speciality: \"\",\n      appname: \"C2MD Patient\"\n    },\n    token: \"token\"\n  });\n\n  if (res.data.data) {\n    let response = res.data.data;\n\n    if (response.hasOwnProperty(\"info\")) {\n      // toast.error(response.info, {\n      //   position: toast.POSITION.TOP_CENTER,\n      // });\n      return response;\n    } else {\n      var _res$data2, _res$data2$data;\n\n      dispatch({\n        type: SIGNUP_SUCCESS_ACTION,\n        payload: JSON.stringify(res.data.data)\n      });\n      localStorage.setItem(\"userData\", response);\n\n      if (((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.userType) == \"Patient\") {\n        var _history$location3, _history$location3$st;\n\n        if (history === null || history === void 0 ? void 0 : (_history$location3 = history.location) === null || _history$location3 === void 0 ? void 0 : (_history$location3$st = _history$location3.state) === null || _history$location3$st === void 0 ? void 0 : _history$location3$st.redirection) {\n          var _history$location4, _history$location4$st;\n\n          history.push(history === null || history === void 0 ? void 0 : (_history$location4 = history.location) === null || _history$location4 === void 0 ? void 0 : (_history$location4$st = _history$location4.state) === null || _history$location4$st === void 0 ? void 0 : _history$location4$st.redirection);\n        } else {\n          history.push(\"/dashboard\");\n        }\n      } //history.push(\"/DoctorListing\");\n\n    }\n\n    return response;\n  }\n};\nexport const checkUser = ({\n  searchtype,\n  searchKey\n}) => async dispatch => {\n  var _res$data3;\n\n  const res = await loginedApi.post(\"useravailability\", {\n    requestType: 22,\n    token: \"C2MDVerificationToken\",\n    data: {\n      searchtype: searchtype,\n      searchKey: searchKey\n    }\n  });\n  return (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.data;\n};","map":{"version":3,"sources":["/home/veena/Downloads/c2md-web_react/src/actions/SignupAction.js"],"names":["loginedApi","toast","CryptoJS","SIGNUP_SUCCESS_ACTION","publicIp","require","IP","v4","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","countrycoderes","doctorscountrycode","signup_action","values","userType","OTP","history","dispatch","console","log","post","browserTimeZone","data","hash","SHA512","password","hashPassword","enc","Base64","limit","dial_code","length","mobNo","mobileNumber","mobileNo","res","requestType","lastName","accessCountry","Country","source","useragent","department","emailId","email","referenceOTP","deviceId","signupFrom","Os","firstName","fullName","clinicId","Ipaddress","type","speciality","appname","token","response","hasOwnProperty","payload","localStorage","setItem","location","state","redirection","push","generate_OTP","formData","info","signup_with_Google","Data","name","socialProfileId","googleId","JSON","stringify","checkUser","searchtype","searchKey"],"mappings":"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","sourcesContent":["import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { SIGNUP_SUCCESS_ACTION } from \"./type\";\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\")\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\")\n}//replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nlet countrycoderes;\nlet doctorscountrycode;\n\n\n\nexport const signup_action =\n  ({ values, userType, OTP, history }) =>\n    async (dispatch) => {\n      // var hash = CryptoJS.SHA512(values.password);\n\n      console.log(\"Signup Params......\", {values, userType, OTP});\n\n      countrycoderes = await loginedApi.post(\"getcountrycode\",\n        {\n          \"token\": \"token\",\n          \"version\": \"2.0\",\n          \"data\": { browserTimeZone: `GMT${formatTime}`, },\n          \"requestType\": 1058\n        });\n\n      doctorscountrycode = countrycoderes.data.data;\n      var hash = CryptoJS.SHA512(\"C2MD|\" + values.password);\n\n      let password = hash.toString();\n\n      let hashPassword = hash.toString(CryptoJS.enc.Base64);\n      // let hashPassword = CryptoJS.SHA512(\"C2MD|\"+password);\n      let limit = values.dial_code?.length;\n      let mobNo = values.mobileNumber?.slice(limit);\n      let mobileNo = `%2B${values.dial_code}${\" \"}${mobNo}`;\n\n      console.log(values);\n\n      const res = await loginedApi.post(\"signup\", {\n        requestType: 2,\n        data: {\n\n          lastName: \"\",\n          accessCountry: doctorscountrycode.Country,\n          source: \"Web APP\",\n          useragent: userAgent,\n          department: \"\",\n          password: password,\n          hashPassword: hashPassword,\n          userType: userType,\n          mobileNumber: mobileNo,\n          emailId: values.email,\n          referenceOTP: OTP,\n          deviceId: \"\",\n          signupFrom: \"c2md\",\n          Os: platform,\n          firstName: values.fullName,\n          clinicId: \"20\",\n          Ipaddress: IP,\n          type: \"\",\n          browserTimeZone: `GMT${formatTime}`,\n          speciality: \"\",\n          appname: \"C2MD Patient\",\n        },\n        token: \"token\",\n      });\n\n      if (res.data.data) {\n        let response = res.data.data;\n\n        if (response.hasOwnProperty(\"info\")) {\n          return response;\n        } else {\n          dispatch({\n            type: SIGNUP_SUCCESS_ACTION,\n            payload: res.data.data,\n          });\n          localStorage.setItem(\"userData\", response);\n          if (res.data?.data?.userType == \"Patient\") {\n            \n             if (history?.location?.state?.redirection) {\n              history.push(history?.location?.state?.redirection);\n            } else {\n              history.push(\"/dashboard\");\n            }\n          }\n        }\n        return response;\n      }\n    };\nexport const generate_OTP = (formData) => async (dispatch) => {\n  \n  let limit = formData.dial_code?.length;\n  let mobNo = formData.mobileNumber?.slice(limit);\n  let mobileNo = `%2B${formData.dial_code}${\" \"}${mobNo}`;\n\n  const res = await loginedApi.post(\"getmobileotp\", {\n    token: \"C2MDVerificationToken\",\n    requestType: \"25\",\n    data: {\n      mobileNumber: mobileNo,\n      Os: platform,\n      Ipaddress: IP,\n      useragent: userAgent,\n    },\n  });\n\n  return res.data && res.data.data.info;\n};\n\nexport const signup_with_Google =\n  ({ userType, Data, history }) =>\n    async (dispatch) => {\n      console.log(\"Data\",Data);\n      const res = await loginedApi.post(\"signup\", {\n        requestType: 2,\n        data: {\n          lastName: \"\",\n          accessCountry: \"\",\n          source: \"iOSApp\",\n          useragent: userAgent,\n          department: \"\",\n          password: \"\",\n          hashPassword: \"\",\n          userType: userType,\n          mobileNumber: \"\",\n          emailId: Data.email,\n          referenceOTP: \"\",\n          deviceId: \"\",\n          signupFrom: \"c2md\",\n          Os: platform,\n          firstName: Data.name,\n          socialProfileId:Data.googleId,\n          clinicId: \"20\",\n          Ipaddress: IP,\n          type: \"signUpGoogle\",\n          browserTimeZone: `GMT${formatTime}`,\n          speciality: \"\",\n          appname: \"C2MD Patient\",\n        },\n        token: \"token\",\n      });\n\n      if (res.data.data) {\n        let response = res.data.data;\n       \n\n        if (response.hasOwnProperty(\"info\")) {\n          // toast.error(response.info, {\n          //   position: toast.POSITION.TOP_CENTER,\n          // });\n\n          return response;\n        } else {\n          dispatch({\n            type: SIGNUP_SUCCESS_ACTION,\n            payload: JSON.stringify(res.data.data),\n          });\n          localStorage.setItem(\"userData\", response);\n          if (res.data?.data?.userType == \"Patient\") {\n            \n            if (history?.location?.state?.redirection) {\n             history.push(history?.location?.state?.redirection);\n           } else {\n             history.push(\"/dashboard\");\n           }\n         }\n          //history.push(\"/DoctorListing\");\n        }\n        return response;\n      }\n    };\n\nexport const checkUser =\n  ({ searchtype, searchKey }) =>\n    async (dispatch) => {\n      const res = await loginedApi.post(\"useravailability\", {\n        requestType: 22,\n        token: \"C2MDVerificationToken\",\n        data: { searchtype: searchtype, searchKey: searchKey },\n      });\n\n      return res.data?.data;\n    };\n\n\n\n"]},"metadata":{},"sourceType":"module"}