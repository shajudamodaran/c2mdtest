{"ast":null,"code":"import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { SIGNUP_SUCCESS_ACTION } from \"./type\";\n\nconst publicIp = require(\"public-ip\");\n\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nexport const signup_action = ({\n  values,\n  userType,\n  OTP,\n  history\n}) => async dispatch => {\n  var _values$dial_code, _values$mobileNumber;\n\n  // var hash = CryptoJS.SHA512(values.password);\n  var hash = CryptoJS.SHA512(\"C2MD|\" + values.password);\n  let password = hash.toString();\n  let hashPassword = hash.toString(CryptoJS.enc.Base64); // let hashPassword = CryptoJS.SHA512(\"C2MD|\"+password);\n\n  let limit = (_values$dial_code = values.dial_code) === null || _values$dial_code === void 0 ? void 0 : _values$dial_code.length;\n  let mobNo = (_values$mobileNumber = values.mobileNumber) === null || _values$mobileNumber === void 0 ? void 0 : _values$mobileNumber.slice(limit);\n  let mobileNo = `%2B${values.dial_code}${\" \"}${mobNo}`;\n  const res = await loginedApi.post(\"signup\", {\n    requestType: 2,\n    data: {\n      lastName: values.fullName,\n      accessCountry: values === null || values === void 0 ? void 0 : values.countryCode,\n      source: \"iOSApp\",\n      useragent: userAgent,\n      department: \"\",\n      password: password,\n      hashPassword: hashPassword,\n      userType: userType,\n      mobileNumber: mobileNo,\n      emailId: values.email,\n      referenceOTP: OTP,\n      deviceId: \"\",\n      signupFrom: \"c2md\",\n      Os: platform,\n      firstName: values.fullName,\n      clinicId: \"20\",\n      Ipaddress: IP,\n      type: \"\",\n      browserTimeZone: \"GMT%2B0530\",\n      speciality: \"\",\n      appname: \"C2MD Patient\"\n    },\n    token: \"token\"\n  });\n\n  if (res.data.data) {\n    let response = res.data.data;\n\n    if (response.hasOwnProperty(\"info\")) {\n      return response;\n    } else {\n      dispatch({\n        type: SIGNUP_SUCCESS_ACTION,\n        payload: JSON.stringify(res.data.data)\n      });\n      localStorage.setItem(\"userData\", response);\n      history.push(\"/DoctorListing\");\n    }\n\n    return response;\n  }\n};\nexport const generate_OTP = formData => async dispatch => {\n  var _formData$dial_code, _formData$mobileNumbe;\n\n  let limit = (_formData$dial_code = formData.dial_code) === null || _formData$dial_code === void 0 ? void 0 : _formData$dial_code.length;\n  let mobNo = (_formData$mobileNumbe = formData.mobileNumber) === null || _formData$mobileNumbe === void 0 ? void 0 : _formData$mobileNumbe.slice(limit);\n  let mobileNo = `%2B${formData.dial_code}${\" \"}${mobNo}`;\n  const res = await loginedApi.post(\"getmobileotp\", {\n    token: \"C2MDVerificationToken\",\n    requestType: \"25\",\n    data: {\n      mobileNumber: mobileNo,\n      Os: platform,\n      Ipaddress: IP,\n      useragent: userAgent\n    }\n  });\n  return res.data && res.data.data.info;\n};\nexport const signup_with_Google = ({\n  userType,\n  Data,\n  history\n}) => async dispatch => {\n  const res = await loginedApi.post(\"signup\", {\n    requestType: 2,\n    data: {\n      lastName: \"\",\n      accessCountry: \"\",\n      source: \"iOSApp\",\n      useragent: userAgent,\n      department: \"\",\n      password: \"\",\n      hashPassword: \"\",\n      userType: userType,\n      mobileNumber: \"\",\n      emailId: Data.email,\n      referenceOTP: \"\",\n      deviceId: \"\",\n      signupFrom: \"c2md\",\n      Os: platform,\n      firstName: Data.name,\n      clinicId: \"20\",\n      Ipaddress: IP,\n      type: \"\",\n      browserTimeZone: \"GMT%2B0530\",\n      speciality: \"\",\n      appname: \"C2MD Patient\"\n    },\n    token: \"token\"\n  });\n\n  if (res.data.data) {\n    let response = res.data.data;\n\n    if (response.hasOwnProperty(\"info\")) {\n      // toast.error(response.info, {\n      //   position: toast.POSITION.TOP_CENTER,\n      // });\n      return response;\n    } else {\n      dispatch({\n        type: SIGNUP_SUCCESS_ACTION,\n        payload: JSON.stringify(res.data.data)\n      });\n      localStorage.setItem(\"userData\", response);\n      history.push(\"/DoctorListing\");\n    }\n\n    return response;\n  }\n};\nexport const checkUser = ({\n  searchtype,\n  searchKey\n}) => async dispatch => {\n  var _res$data;\n\n  const res = await loginedApi.post(\"useravailability\", {\n    requestType: 22,\n    token: \"C2MDVerificationToken\",\n    data: {\n      searchtype: searchtype,\n      searchKey: searchKey\n    }\n  });\n  return (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.data;\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V2/connect2mydoctor-phase1/connect2mydoctor-phase1/src/actions/SignupAction.js"],"names":["loginedApi","toast","CryptoJS","SIGNUP_SUCCESS_ACTION","publicIp","require","IP","v4","platform","window","navigator","userAgent","signup_action","values","userType","OTP","history","dispatch","hash","SHA512","password","toString","hashPassword","enc","Base64","limit","dial_code","length","mobNo","mobileNumber","slice","mobileNo","res","post","requestType","data","lastName","fullName","accessCountry","countryCode","source","useragent","department","emailId","email","referenceOTP","deviceId","signupFrom","Os","firstName","clinicId","Ipaddress","type","browserTimeZone","speciality","appname","token","response","hasOwnProperty","payload","JSON","stringify","localStorage","setItem","push","generate_OTP","formData","info","signup_with_Google","Data","name","checkUser","searchtype","searchKey"],"mappings":"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","sourcesContent":["import loginedApi from \"../apis\";\nimport { toast } from \"react-toastify\";\nimport CryptoJS from \"crypto-js\";\nimport { SIGNUP_SUCCESS_ACTION } from \"./type\";\nconst publicIp = require(\"public-ip\");\nlet IP = publicIp.v4();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\n\nexport const signup_action =\n  ({ values, userType, OTP, history }) =>\n  async (dispatch) => {\n    // var hash = CryptoJS.SHA512(values.password);\n    var hash = CryptoJS.SHA512(\"C2MD|\" + values.password);\n\n    let password = hash.toString();\n\n    let hashPassword = hash.toString(CryptoJS.enc.Base64);\n    // let hashPassword = CryptoJS.SHA512(\"C2MD|\"+password);\n    let limit = values.dial_code?.length;\n    let mobNo = values.mobileNumber?.slice(limit);\n    let mobileNo = `%2B${values.dial_code}${\" \"}${mobNo}`;\n\n    const res = await loginedApi.post(\"signup\", {\n      requestType: 2,\n      data: {\n        lastName: values.fullName,\n        accessCountry: values?.countryCode,\n        source: \"iOSApp\",\n        useragent: userAgent,\n        department: \"\",\n        password: password,\n        hashPassword: hashPassword,\n        userType: userType,\n        mobileNumber: mobileNo,\n        emailId: values.email,\n        referenceOTP: OTP,\n        deviceId: \"\",\n        signupFrom: \"c2md\",\n        Os: platform,\n        firstName: values.fullName,\n        clinicId: \"20\",\n        Ipaddress: IP,\n        type: \"\",\n        browserTimeZone: \"GMT%2B0530\",\n        speciality: \"\",\n        appname: \"C2MD Patient\",\n      },\n      token: \"token\",\n    });\n\n    if (res.data.data) {\n      let response = res.data.data;\n\n      if (response.hasOwnProperty(\"info\")) {\n        return response;\n      } else {\n        dispatch({\n          type: SIGNUP_SUCCESS_ACTION,\n          payload: JSON.stringify(res.data.data),\n        });\n        localStorage.setItem(\"userData\", response);\n        history.push(\"/DoctorListing\");\n      }\n      return response;\n    }\n  };\nexport const generate_OTP = (formData) => async (dispatch) => {\n  let limit = formData.dial_code?.length;\n  let mobNo = formData.mobileNumber?.slice(limit);\n  let mobileNo = `%2B${formData.dial_code}${\" \"}${mobNo}`;\n\n  const res = await loginedApi.post(\"getmobileotp\", {\n    token: \"C2MDVerificationToken\",\n    requestType: \"25\",\n    data: {\n      mobileNumber: mobileNo,\n      Os: platform,\n      Ipaddress: IP,\n      useragent: userAgent,\n    },\n  });\n\n  return res.data && res.data.data.info;\n};\n\nexport const signup_with_Google =\n  ({ userType, Data, history }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"signup\", {\n      requestType: 2,\n      data: {\n        lastName: \"\",\n        accessCountry: \"\",\n        source: \"iOSApp\",\n        useragent: userAgent,\n        department: \"\",\n        password: \"\",\n        hashPassword: \"\",\n        userType: userType,\n        mobileNumber: \"\",\n        emailId: Data.email,\n        referenceOTP: \"\",\n        deviceId: \"\",\n        signupFrom: \"c2md\",\n        Os: platform,\n        firstName: Data.name,\n        clinicId: \"20\",\n        Ipaddress: IP,\n        type: \"\",\n        browserTimeZone: \"GMT%2B0530\",\n        speciality: \"\",\n        appname: \"C2MD Patient\",\n      },\n      token: \"token\",\n    });\n\n    if (res.data.data) {\n      let response = res.data.data;\n\n      if (response.hasOwnProperty(\"info\")) {\n        // toast.error(response.info, {\n        //   position: toast.POSITION.TOP_CENTER,\n        // });\n\n        return response;\n      } else {\n        dispatch({\n          type: SIGNUP_SUCCESS_ACTION,\n          payload: JSON.stringify(res.data.data),\n        });\n        localStorage.setItem(\"userData\", response);\n        history.push(\"/DoctorListing\");\n      }\n      return response;\n    }\n  };\nexport const checkUser =\n  ({ searchtype, searchKey }) =>\n  async (dispatch) => {\n    const res = await loginedApi.post(\"useravailability\", {\n      requestType: 22,\n      token: \"C2MDVerificationToken\",\n      data: { searchtype: searchtype, searchKey: searchKey },\n    });\n\n    return res.data?.data;\n  };\n"]},"metadata":{},"sourceType":"module"}