{"ast":null,"code":"var _jsxFileName = \"/home/veena/Downloads/c2md-web_react/src/components/ConfirmPassword/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Style from \"./Confirm.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { fetchForgotPassword } from \"../../actions/ForgotPasswordAction\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport Form from \"react-bootstrap/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResetPassword() {\n  _s();\n\n  var _location$state;\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const userId = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userId;\n\n  const submit_data = values => {\n    dispatch(fetchForgotPassword({\n      values: values,\n      userId: userId\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(SignupLayout, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      validate: values => {\n        let errors = {};\n\n        if (values.newPassword === \"\") {\n          errors.newPassword = \"Password is required\";\n        } else if (values.newPassword.length < 8) {\n          errors.newPassword = \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\";\n        }\n\n        if (values.confirmPassword === \"\") {\n          errors.confirmPassword = \"Confirm Password is required\";\n        } else if (values.confirmPassword != values.newPassword) {\n          errors.confirmPassword = \"The passwords you entered are not matching. Please try again\";\n        }\n\n        return errors;\n      },\n      initialValues: {\n        newPassword: \"\",\n        confirmPassword: \"\"\n      },\n      onSubmit: values => {\n        history.push({\n          pathname: \"/passwordchange\"\n        });\n        submit_data(values);\n      },\n      children: ({\n        touched,\n        errors,\n        handleSubmit\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: Style.reset_form_align,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: Style.reset_header_align,\n          children: \"Reset password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: Style.reset_form_label,\n            children: \"New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"password\",\n              name: \"newPassword\",\n              className: Style.reset_input_field + \" \" + `${touched.newPassword && errors.newPassword ? \"is-invalid\" : \"\"}`,\n              placeholder: \"Enter Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"newPassword\",\n              className: Style.reset_form_error_msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: Style.reset_form_label,\n            children: \"Confirm New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"password\",\n              name: \"confirmPassword\",\n              className: Style.reset_input_field + \" \" + `${touched.confirmPassword && errors.confirmPassword ? \"is-invalid\" : \"\"}`,\n              placeholder: \"Enter Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"confirmPassword\",\n              className: Style.reset_form_error_msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: Style.signin_password_para,\n              children: \"*Password Must Be 8 Characters Minimum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            className: Style.signup_continue_btn,\n            type: \"submit\",\n            disabled: Object.keys(errors).length > 0 // onClick={() => history.push(\"/passwordchange\")}\n            ,\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPassword, \"8e5Tynd63zhGmRj1jtygWalh7sM=\", false, function () {\n  return [useHistory, useDispatch, useLocation];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/home/veena/Downloads/c2md-web_react/src/components/ConfirmPassword/index.js"],"names":["React","useEffect","useState","Style","Button","SignupLayout","useHistory","useLocation","fetchForgotPassword","useDispatch","Formik","Field","ErrorMessage","Form","ResetPassword","history","dispatch","location","userId","state","submit_data","values","errors","newPassword","length","confirmPassword","push","pathname","touched","handleSubmit","reset_form_align","reset_header_align","reset_form_label","reset_input_field","reset_form_error_msg","signin_password_para","signup_continue_btn","Object","keys"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Style from \"./Confirm.module.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport SignupLayout from \"../Layout/SignupLayout\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { fetchForgotPassword } from \"../../actions/ForgotPasswordAction\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction ResetPassword() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  const userId = location.state?.userId;\n\n  const submit_data = (values) => {\n    dispatch(fetchForgotPassword({ values: values, userId: userId }));\n  };\n\n  return (\n    <SignupLayout>\n      <Formik\n        validate={(values) => {\n          let errors = {};\n\n          if (values.newPassword === \"\") {\n            errors.newPassword = \"Password is required\";\n          } else if (values.newPassword.length < 8) {\n            errors.newPassword =\n              \"A secure password consists of minimum 8 characters including 1 special character, 1 CAPITAL letter and 1 small letter\";\n          }\n\n          if (values.confirmPassword === \"\") {\n            errors.confirmPassword = \"Confirm Password is required\";\n          } else if (values.confirmPassword != values.newPassword) {\n            errors.confirmPassword =\n              \"The passwords you entered are not matching. Please try again\";\n          }\n          return errors;\n        }}\n        initialValues={{ newPassword: \"\", confirmPassword: \"\" }}\n        onSubmit={(values) => {\n          history.push({\n            pathname: \"/passwordchange\",\n          });\n          submit_data(values);\n        }}\n      >\n        {({ touched, errors, handleSubmit }) => (\n          <Form className={Style.reset_form_align} onSubmit={handleSubmit}>\n            <h2 className={Style.reset_header_align}>Reset password</h2>\n\n            <div className=\"form-group\">\n              <label className={Style.reset_form_label}>New Password</label>\n              <br />\n              <p>\n                <Field\n                  type=\"password\"\n                  name=\"newPassword\"\n                  className={\n                    Style.reset_input_field +\n                    \" \" +\n                    `${\n                      touched.newPassword && errors.newPassword\n                        ? \"is-invalid\"\n                        : \"\"\n                    }`\n                  }\n                  placeholder=\"Enter Password\"\n                />\n                <ErrorMessage\n                  component=\"div\"\n                  name=\"newPassword\"\n                  className={Style.reset_form_error_msg}\n                />\n              </p>\n            </div>\n\n            <div className=\"form-group\">\n              <label className={Style.reset_form_label}>\n                Confirm New Password\n              </label>\n              <br />\n              <p>\n                <Field\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  className={\n                    Style.reset_input_field +\n                    \" \" +\n                    `${\n                      touched.confirmPassword && errors.confirmPassword\n                        ? \"is-invalid\"\n                        : \"\"\n                    }`\n                  }\n                  placeholder=\"Enter Password\"\n                />\n                <ErrorMessage\n                  component=\"div\"\n                  name=\"confirmPassword\"\n                  className={Style.reset_form_error_msg}\n                />\n                <p className={Style.signin_password_para}>\n                  *Password Must Be 8 Characters Minimum\n                </p>\n              </p>\n            </div>\n\n            <div className=\"col-md-12\">\n              <Button\n                variant=\"outline-secondary\"\n                className={Style.signup_continue_btn}\n                type=\"submit\"\n                disabled={Object.keys(errors).length > 0}\n                // onClick={() => history.push(\"/passwordchange\")}\n              >\n                Continue\n              </Button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </SignupLayout>\n  );\n}\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}