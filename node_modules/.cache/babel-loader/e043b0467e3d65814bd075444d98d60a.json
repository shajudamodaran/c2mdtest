{"ast":null,"code":"var _formatTime;\n\nimport loginedApi from \"../apis/index\";\nimport { DOCTOR_LISTING } from \"./type\";\n\nconst {\n  detect\n} = require(\"detect-browser\");\n\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off === null || off === void 0 ? void 0 : off.split(\"GMT\")[1].split(\" (\")[0];\nlet result = (_formatTime = formatTime) === null || _formatTime === void 0 ? void 0 : _formatTime.slice(1);\n\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\n\nexport const fetch_doctors = (speciality, clinicId, pagination) => async dispatch => {\n  let resp = await loginedApi.post(\"getcountrycode\", {\n    token: \"token\",\n    version: \"2.0\",\n    data: {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    requestType: 1058\n  });\n  const doctorscountrycode = resp.data.data;\n  let params = {\n    data: {\n      clinicId: clinicId,\n      todayRate: \"74.27006\",\n      searchName: \"\",\n      City: \"\",\n      speciality: speciality,\n      browserTimeZone: `GMT${formatTime}`,\n      Ipaddress: doctorscountrycode.Ipaddress,\n      useragent: userAgent,\n      Browser: browser.name + \" \" + browser.version,\n      appname: \"C2MD Web\",\n      Os: platform,\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country,\n      count: pagination\n    },\n    requestType: \"604\",\n    token: \"C2MDVerificationToken\"\n  };\n\n  if (speciality === \"ALL\") {\n    pagination = 0;\n  }\n\n  let getalldoctors = {\n    requestType: \"259\",\n    token: \"C2MDVerificationToken\",\n    data: {\n      browserTimeZone: `GMT${formatTime}`,\n      Ipaddress: doctorscountrycode.Ipaddress,\n      useragent: userAgent,\n      Browser: browser.name + \" \" + browser.version,\n      appname: \"C2MD Web\",\n      Os: platform,\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country,\n      todayRate: \"\",\n      clinicId: clinicId,\n      searchName: \"\",\n      City: \"\",\n      count: pagination\n    }\n  };\n\n  if (clinicId != \"\") {\n    params.data.clinicId = clinicId;\n  }\n\n  let res = null;\n\n  if (speciality && speciality != \"ALL\") {\n    console.log(\"Calling pagination doctors..................\");\n    res = await loginedApi.post(\"searchDoctor\", params);\n  } else {\n    console.log(\"Calling all doctors..................\");\n    res = await loginedApi.post(\"getdoctors\", getalldoctors);\n  } // const res = await loginedApi.post(\"searchDoctor\", params);\n  //  const res = await loginedApi.post(\"getdoctors\", dummyParams);\n\n\n  if (res.status === 200) {\n    const doctors = res.data.data;\n    let location = [{\n      value: \"All\",\n      checked: false\n    }];\n    let hospitals = [{\n      value: \"All\",\n      checked: false\n    }];\n    let languagesSet = [{\n      value: \"All\",\n      checked: false\n    }, {\n      value: \"English\",\n      checked: false\n    }, {\n      value: \"Hindi\",\n      checked: false\n    }, {\n      value: \"Tamil\",\n      checked: false\n    }];\n    doctors.Hospitals.map(item => {\n      item && hospitals.push({\n        value: item,\n        checked: false\n      });\n    });\n    doctors.citiesSet.map(item => {\n      item && location.push({\n        value: item,\n        checked: false\n      });\n    });\n    doctors.languagesSet.map(item => {\n      item && location.push({\n        value: item,\n        checked: false\n      });\n    });\n    dispatch({\n      type: DOCTOR_LISTING,\n      payload: {\n        speciality,\n        doctors: doctors,\n        location: location,\n        hospitals: hospitals,\n        languagesSet: languagesSet,\n        indexCharacters: doctors === null || doctors === void 0 ? void 0 : doctors.indexCharacters\n      }\n    });\n  }\n};\nexport const fetch_alldoctors = (count, clinicId) => async dispatch => {\n  var _res;\n\n  // let reduxData = useSelector(state => state)\n  // console.log(\"88888888888\",reduxData)\n  const countrycoderes = await loginedApi.post(\"getcountrycode\", {\n    \"token\": \"token\",\n    \"version\": \"2.0\",\n    \"data\": {\n      browserTimeZone: `GMT${formatTime}`\n    },\n    \"requestType\": 1058\n  });\n  const doctorscountrycode = countrycoderes.data.data;\n  let params = {\n    data: {\n      clinicId: clinicId,\n      Ipaddress: doctorscountrycode.Ipaddress,\n      useragent: userAgent,\n      todayRate: \"74.27006\",\n      currency: doctorscountrycode.currency,\n      accessCountry: doctorscountrycode.Country,\n      searchName: \"\",\n      browserTimeZone: `GMT${formatTime}`,\n      Os: platform,\n      City: \"\",\n      count: count\n    },\n    requestType: \"259\",\n    token: \"C2MDVerificationToken\"\n  };\n\n  if (clinicId != \"\") {\n    params.data.clinicId = clinicId;\n  }\n\n  let res;\n\n  if (clinicId != \"\" && clinicId != undefined) {\n    res = await loginedApi.post(\"getdoctors\", params);\n  }\n\n  console.log(\"res-->\", res);\n\n  if (((_res = res) === null || _res === void 0 ? void 0 : _res.status) === 200) {\n    const doctors = res.data.data;\n    let location = [{\n      value: \"All\",\n      checked: false\n    }];\n    let hospitals = [{\n      value: \"All\",\n      checked: false\n    }];\n    let languagesSet = [{\n      value: \"All\",\n      checked: false\n    }, {\n      value: \"English\",\n      checked: false\n    }, {\n      value: \"Hindi\",\n      checked: false\n    }, {\n      value: \"Tamil\",\n      checked: false\n    }];\n    doctors.Hospitals.map(item => {\n      item && hospitals.push({\n        value: item,\n        checked: false\n      });\n    });\n    doctors.citiesSet.map(item => {\n      item && location.push({\n        value: item,\n        checked: false\n      });\n    });\n    doctors.languagesSet.map(item => {\n      item && location.push({\n        value: item,\n        checked: false\n      });\n    });\n    dispatch({\n      type: DOCTOR_LISTING,\n      payload: {\n        doctors: doctors,\n        location: location,\n        hospitals: hospitals,\n        languagesSet: languagesSet,\n        indexCharacters: doctors === null || doctors === void 0 ? void 0 : doctors.indexCharacters\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/developer/Projects/Personal/Doctor-dashboard/Doctor Dash/V7/c2md-web_react/src/actions/DoctorListingAction.js"],"names":["loginedApi","DOCTOR_LISTING","detect","require","browser","platform","window","navigator","userAgent","off","Date","toString","replace","formatTime","split","result","slice","search","fetch_doctors","speciality","clinicId","pagination","dispatch","resp","post","token","version","data","browserTimeZone","requestType","doctorscountrycode","params","todayRate","searchName","City","Ipaddress","useragent","Browser","name","appname","Os","currency","accessCountry","Country","count","getalldoctors","res","console","log","status","doctors","location","value","checked","hospitals","languagesSet","Hospitals","map","item","push","citiesSet","type","payload","indexCharacters","fetch_alldoctors","countrycoderes","undefined"],"mappings":"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","sourcesContent":["import loginedApi from \"../apis/index\";\nimport { DOCTOR_LISTING } from \"./type\";\nconst { detect } = require(\"detect-browser\");\nconst browser = detect();\nlet platform = window.navigator.platform;\nlet userAgent = window.navigator.userAgent;\nlet off = new Date().toString().replace(/GMT\\+(\\d\\d)(\\d\\d)/, \"GMT+$1:$2\");\nlet formatTime = off?.split(\"GMT\")[1].split(\" (\")[0];\nlet result = formatTime?.slice(1);\nif (formatTime.search(/\\+/g) != null) {\n  formatTime = formatTime.replace(/\\+/g, \"%2B\");\n} else if (formatTime.search(/\\-/g) != null) {\n  formatTime = formatTime.replace(/\\-/g, \"%2D\");\n} //replace(/\\+/g,' ') browserTimeZone: `GMT${formatTime}`\n\nexport const fetch_doctors =\n  (speciality, clinicId, pagination) => async (dispatch) => {\n    let resp = await loginedApi.post(\"getcountrycode\", {\n      token: \"token\",\n      version: \"2.0\",\n      data: { browserTimeZone: `GMT${formatTime}` },\n      requestType: 1058,\n    });\n    const doctorscountrycode = resp.data.data;\n\n    let params = {\n      data: {\n        clinicId: clinicId,\n        todayRate: \"74.27006\",\n        searchName: \"\",\n        City: \"\",\n        speciality: speciality,\n        browserTimeZone: `GMT${formatTime}`,\n        Ipaddress: doctorscountrycode.Ipaddress,\n        useragent: userAgent,\n        Browser: browser.name + \" \" + browser.version,\n        appname: \"C2MD Web\",\n        Os: platform,\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n        count: pagination\n      },\n      requestType: \"604\",\n      token: \"C2MDVerificationToken\",\n    };\n    \n    if(speciality===\"ALL\")\n    {\n      pagination=0;\n    }\n\n    let getalldoctors = {\n      requestType: \"259\",\n      token: \"C2MDVerificationToken\",\n      data: {\n        browserTimeZone: `GMT${formatTime}`,\n        Ipaddress: doctorscountrycode.Ipaddress,\n        useragent: userAgent,\n        Browser: browser.name + \" \" + browser.version,\n        appname: \"C2MD Web\",\n        Os: platform,\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n        todayRate: \"\",\n        clinicId: clinicId,\n        searchName: \"\",\n        City: \"\",\n        count: pagination,\n      },\n    };\n\n    if (clinicId != \"\") {\n      params.data.clinicId = clinicId;\n    }\n\n    let res = null;\n\n    if (speciality && speciality!=\"ALL\") {\n\n      console.log(\"Calling pagination doctors..................\");\n      res = await loginedApi.post(\"searchDoctor\", params);\n    } else {\n      console.log(\"Calling all doctors..................\");\n      res = await loginedApi.post(\"getdoctors\", getalldoctors);\n    }\n\n    // const res = await loginedApi.post(\"searchDoctor\", params);\n\n    //  const res = await loginedApi.post(\"getdoctors\", dummyParams);\n\n    if (res.status === 200) {\n      const doctors = res.data.data;\n\n      let location = [{ value: \"All\", checked: false }];\n      let hospitals = [{ value: \"All\", checked: false }];\n      let languagesSet = [\n        { value: \"All\", checked: false },\n        { value: \"English\", checked: false },\n        { value: \"Hindi\", checked: false },\n        { value: \"Tamil\", checked: false },\n      ];\n\n      doctors.Hospitals.map((item) => {\n        item && hospitals.push({ value: item, checked: false });\n      });\n      doctors.citiesSet.map((item) => {\n        item && location.push({ value: item, checked: false });\n      });\n      doctors.languagesSet.map((item) => {\n        item && location.push({ value: item, checked: false });\n      });\n\n      dispatch({\n        type: DOCTOR_LISTING,\n        payload: {\n          speciality,\n          doctors: doctors,\n          location: location,\n          hospitals: hospitals,\n          languagesSet: languagesSet,\n          indexCharacters: doctors?.indexCharacters,\n        },\n      });\n    }\n  };\n\n  export const fetch_alldoctors = (count, clinicId) => async (dispatch) => {\n    // let reduxData = useSelector(state => state)\n    // console.log(\"88888888888\",reduxData)\n    const countrycoderes = await loginedApi.post(\"getcountrycode\", \n    {\n      \"token\": \"token\",\n      \"version\":\"2.0\",\n      \"data\": { browserTimeZone: `GMT${formatTime}`,},\n      \"requestType\": 1058\n  });\n  \n  const doctorscountrycode = countrycoderes.data.data;\n  \n    let params = {\n      data: {\n        clinicId: clinicId,\n        Ipaddress: doctorscountrycode.Ipaddress,\n        useragent: userAgent,\n        todayRate: \"74.27006\",\n        currency: doctorscountrycode.currency,\n        accessCountry: doctorscountrycode.Country,\n        searchName: \"\",\n        browserTimeZone: `GMT${formatTime}`,\n        Os: platform,\n        City: \"\",\n        \n        count: count,\n      },\n      requestType: \"259\",\n      token: \"C2MDVerificationToken\",\n    };\n  \n    if (clinicId != \"\") {\n      params.data.clinicId = clinicId;\n    }\n  \n    \n    let res;\n    if(clinicId != \"\"&& clinicId != undefined)\n    {\n      res = await loginedApi.post(\"getdoctors\", params);\n    }\n    console.log(\"res-->\",res)\n  \n    if (res?.status === 200) {\n      const doctors = res.data.data;\n  \n      let location = [{ value: \"All\", checked: false }];\n      let hospitals = [{ value: \"All\", checked: false }];\n      let languagesSet = [\n        { value: \"All\", checked: false },\n        { value: \"English\", checked: false },\n        { value: \"Hindi\", checked: false },\n        { value: \"Tamil\", checked: false },\n      ];\n  \n      doctors.Hospitals.map((item) => {\n        item && hospitals.push({ value: item, checked: false });\n      });\n      doctors.citiesSet.map((item) => {\n        item && location.push({ value: item, checked: false });\n      });\n      doctors.languagesSet.map((item) => {\n        item && location.push({ value: item, checked: false });\n      });\n  \n      \n      dispatch({\n        type: DOCTOR_LISTING,\n        payload: {\n          doctors: doctors,\n          location: location,\n          hospitals: hospitals,\n          languagesSet: languagesSet,\n          indexCharacters: doctors?.indexCharacters,\n        },\n      });\n    }\n  };"]},"metadata":{},"sourceType":"module"}